<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PyQt菜单与工具栏</title>
      <link href="/2020/03/24/PyQt%E8%8F%9C%E5%8D%95%E4%B8%8E%E5%B7%A5%E5%85%B7%E6%A0%8F/"/>
      <url>/2020/03/24/PyQt%E8%8F%9C%E5%8D%95%E4%B8%8E%E5%B7%A5%E5%85%B7%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>    利用PyQt的QMainWindow类创建一个应用程序，并添加菜单栏与工具栏；信号与信号槽的概念与案例联系。</p><h2 id="QMainWindow创建基本窗口"><a href="#QMainWindow创建基本窗口" class="headerlink" title="QMainWindow创建基本窗口"></a>QMainWindow创建基本窗口</h2><pre><code class="python">import sysfrom PyQt5.QtWidgets import QMainWindow,QApplicationclass Example(QMainWindow):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        self.statusBar().showMessage(&#39;Ready&#39;)        #QMainWindow类第一次调用ststusBar()方法创建一个状态栏，后续调用返回状态栏对象，showMassage()状态栏上显示一条消息        self.setGeometry(300,300,250,150)            self.setWindowTitle(&#39;Statusbar&#39;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h3 id="创建菜单栏"><a href="#创建菜单栏" class="headerlink" title="创建菜单栏"></a>创建菜单栏</h3><pre><code class="python">import sysfrom PyQt5.QtWidgets import QMainWindow, QAction, qApp, QApplicationfrom PyQt5.QtGui import QIconclass Example(QMainWindow):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        exitAction = QAction(QIcon(&#39;bi.svg&#39;), &#39;&amp;Exit&#39;, self)    #定义菜单控件图标与名字        exitAction.setShortcut(&#39;Ctrl+Q&#39;)                #定义控件快捷键        exitAction.setStatusTip(&#39;Exit application&#39;)     #定义控件提示        exitAction.triggered.connect(qApp.quit)        self.statusBar()        # 创建一个菜单栏        menubar = self.menuBar()        # 添加菜单        fileMenu = menubar.addMenu(&#39;&amp;File&#39;)        # 添加事件        fileMenu.addAction(exitAction)        #点击菜单控件的时候，调用qApp.quit,终止应用程序        self.setGeometry(300, 300, 250, 150)        self.setWindowTitle(&#39;Menubar&#39;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><pre><code class="python">import sysfrom PyQt5.QtWidgets import QMainWindow, QAction, QTextEdit, QApplicationfrom PyQt5.QtGui import QIconclass Example(QMainWindow):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        textEdit = QTextEdit()        self.setCentralWidget(textEdit)        exitAction = QAction(QIcon(&#39;bi.svg&#39;), &#39;Exit&#39;, self)        exitAction.setShortcut(&#39;Ctrl+Q&#39;)        exitAction.setStatusTip(&#39;Exit application&#39;)        exitAction.triggered.connect(self.close)        self.statusBar()        # 创建一个菜单栏        menubar = self.menuBar()        # 添加菜单        fileMenu = menubar.addMenu(&#39;&amp;File&#39;)        # 添加事件        fileMenu.addAction(exitAction)        #添加工具栏并命名为Tool，点击也是执行退出操作        toolbar = self.addToolBar(&#39;Tool&#39;)        toolbar.addAction(exitAction)        self.setGeometry(300, 300, 250, 150)        self.setWindowTitle(&#39;Menubar&#39;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h2 id="信号与信号槽"><a href="#信号与信号槽" class="headerlink" title="信号与信号槽"></a>信号与信号槽</h2><pre><code>所有的GUI程序都是事件驱动的。事件由用户出发，但也有可能是其他触发方式；例如网络连接、windows manager或定时器。当我们调用QApplication的exec_()方法时会使程序进入主循环，主循环会获取并分发时间。在事件模型中，有三个参与者；分别是事件源、事件对象、时间接收者。事件源是状态发生的对象，时间(对象)封装了事件中状态的变动，事件接收者是要接受事件源材料的对象，事件源对象将事件的处理工作交给事件接收者。PyQt5有独特的signal&amp;slot(信号槽)机制来处理事件，信号槽用于对象间的通信；signal在某以特定事件发生时被触发，slot可以是任何callable对象；当signal触发时会调用与之相连的slot。</code></pre><h3 id="信号槽Signal-amp-slots"><a href="#信号槽Signal-amp-slots" class="headerlink" title="信号槽Signal&amp;slots"></a>信号槽Signal&amp;slots</h3><pre><code class="python">import sysfrom PyQt5.QtWidgets import (QWidget, QApplication,                             QVBoxLayout,QLCDNumber,QSlider)from PyQt5.QtCore import Qtclass Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        lcd = QLCDNumber(self)        sld = QSlider(Qt.Horizontal, self)        vbox = QVBoxLayout()        vbox.addWidget(lcd)        vbox.addWidget(sld)        self.setLayout(vbox)        sld.valueChanged.connect(lcd.display)        #calueChanged参数关联到lcd显示插槽上         #sender是发出信号的对象。receiver是接收信号的对象。slot(插槽)是对信号做出反应的方法。        self.setGeometry(300, 300, 250, 150)        self.setWindowTitle(&#39;Signal &amp; slot&#39;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h3 id="重写实现事件处理器"><a href="#重写实现事件处理器" class="headerlink" title="重写实现事件处理器"></a>重写实现事件处理器</h3><pre><code class="python">import sysfrom PyQt5.QtWidgets import QWidget, QApplicationfrom PyQt5.QtCore import Qtclass Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        self.setGeometry(300,300,250,150)        self.setWindowTitle(&#39;Event handler&#39;)        self.show()    def keyPressEvent(self,e):        if e.key() == Qt.Key_Escape:            self.close()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h3 id="链接槽函数"><a href="#链接槽函数" class="headerlink" title="链接槽函数"></a>链接槽函数</h3><pre><code class="python">import sysfrom functools import partial#import pymel.core as pm        #maya的pyme模块提供了一种槽信号的链接方法，如需要使用需要导入此库from PyQt5.QtWidgets import*from PyQt5.QtGui import *from PyQt5.QtCore import *def fn():    print(123)def func(v):    print(v)if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    btn = QPushButton()    # 1    btn.clicked.connect(fn)    # 2    btn.clicked.connect(lambda :fn())    # 3    btn.clicked.connect(partial(fn))    # 4    # import pymel.core as pm    # btn.clicked.connect(pm.Callback(fn))  #pymel的槽函数链接方法演示    # 1    btn.clicked.connect(lambda:func(456))    # 2    btn.clicked.connect(partial(func,456))    # 3    # btn.clicked.connect(pm.Callback(fn,456))  # maya pymel.core.Callback    for i in range(5):        btn.clicked.connect(lambda:func(i))    for i in range(5):        btn.clicked.connect(partial(func,i))    btn.show()    sys.exit(app.exec())</code></pre><p>以上代码演示了几种不带参数的槽函数的用法和几种带参数的用法，一般情况下不带参数建议使用lambda方法链接槽函数，其他情况建议使用partial方法不易出现错误的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5基础入门</title>
      <link href="/2020/03/24/HTML5/"/>
      <url>/2020/03/24/HTML5/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML的基本格式"><a href="#HTML的基本格式" class="headerlink" title="HTML的基本格式"></a>HTML的基本格式</h1><pre><code class="html">&lt;!DOCTYPE html&gt;                 &lt;!---命名文档类型HTML5---&gt;&lt;html lang=&quot;en&quot;&gt;                &lt;!---说明我们写的是标记语言HTML文档---&gt;&lt;head&gt;                          &lt;!---头部文件(描述区)---&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;!---编码格式utf-8、gb2312、gbk---&gt;    &lt;title&gt;Title&lt;/title&gt;        &lt;!---网页标题---&gt;&lt;/head&gt;&lt;body&gt;                          &lt;!---命网页主体---&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h1 id="HTML5的基本语法"><a href="#HTML5的基本语法" class="headerlink" title="HTML5的基本语法"></a>HTML5的基本语法</h1><h2 id="HTML5标记的语法"><a href="#HTML5标记的语法" class="headerlink" title="HTML5标记的语法"></a>HTML5标记的语法</h2><p><code>常规标记</code></p><p>&lt;标记名称 属性1名=”属性1值” 属性2名=”属性2值” ……&gt;&lt;/标记名称&gt;</p><p><code>空标记</code></p><p>&lt;标记名称 属性1名=”属性1值”/&gt;<br>标记有两种形式，我们分别称它们为单标记和双标记或者空标记和普通标记;<br>说明：<br>    (1)写在&lt;&gt;括号里的第一个单词，叫做标记，也叫标签，也称做元素；<br>    (2)标记和属性用空格隔开，属性和属性值用等号相连接，属性值必须用双引号括起来；<br>    (3)一个标记可以有多个属性，属性和属性之间用空格隔开，属性不分先后顺序；<br>    (4)空标记是指没有结束标签的标记，必须使用”/“来关闭，例如:<hr/>;</p><h2 id="HTML5常用标签"><a href="#HTML5常用标签" class="headerlink" title="HTML5常用标签"></a>HTML5常用标签</h2><p><code>标题标签</code></p><pre><code class="html">&lt;h1&gt;&lt;/h1&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h5&gt;&lt;/h5&gt;&lt;h6&gt;&lt;/h6&gt;</code></pre><p>标题标签共有六级，一级字体最大；</p><p><code>字体标签</code></p><P></P>段落标签，标识一个段落(默认情况下段落与段落之间有段间距)<p><i></i>  <em></em><br>这两个标签都是使字体倾斜，一般情况下推荐使用<em></em>标签</p><p><b></b>  <strong></strong><br>设置文本加粗效果的标签，一般情况下推荐使用<strong></strong>标签，语义明确</p><p><u></u><br>设置文本下划线的标签</p><br/>空标签，换行标签<hr/>空标签，水平线标签<p><code>字符实体(转义字符)</code></p><!--&nbsp;--><p>空格</p><!--&gt;--><p>&gt;右尖括号</p><!--&lt;--><p>&lt;左尖括号</p><!--&copy;--><p>备案中图标</p><h1 id="HTML5列表"><a href="#HTML5列表" class="headerlink" title="HTML5列表"></a>HTML5列表</h1><p>HTML中有三种列表，分别是：无序列表，有序列表，自定义列表</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><pre><code class="html">&lt;ul&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><pre><code class="html">&lt;ol&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code></pre><p>有序列表的属性<br>(1)type 规定列表中的列表项目的项目符号的类型<br>语法：</p><pre><code class="html">&lt;ol type=&quot;A&quot;&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol type=&quot;I&quot;&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code></pre><p>1 数字的有序列表默认有(1，2，3，4)<br>a 字母顺序的有序列表有(a,b,c,d)<br>A 大写字母的有序列表有(A,B,C,D)<br>i 罗马数字小写(i,ii,iii,iv)IV<br>I 罗马数字大写(I，II，III，)</p><p>(2)start 属性规定有序列表的开始点<br>语法:</p><pre><code class="html">&lt;ol start=&quot;5&quot;&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code></pre><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><pre><code class="html">&lt;dl&gt;    &lt;dt&gt;名词&lt;/dt&gt;        &lt;dd&gt;解释&lt;/dd&gt;     &lt;!---definition description 定义描述---&gt;&lt;/dl&gt;</code></pre><h1 id="HTML5超链接和图像"><a href="#HTML5超链接和图像" class="headerlink" title="HTML5超链接和图像"></a>HTML5超链接和图像</h1><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>语法：<br><a href="https://luomit.xyz" title="我的博客"> 链接文本或图片</a><br><a href="#">空连接</a></p><p>说明：<br>href部分中url后边跟的是链接页面的地址(包含文件名) title属性，当加入title属性是鼠标指针在这个对象上会显示title的内容；<br>target 属性定义了打开链接的目标窗口；<br>_blank 在新的浏览器标签页上打开一个新的窗口(保留原始页面)；<br>_self 在当前浏览器标签页打开新的跳转窗口，此为默认；</p><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>语法：<br><img src="图片路径" border="边框" alt="图片替代文本" title="图片标题" width="图片的宽度" heigth="图片的高度"/></p><p>说明：<br>属性src表示图片的来源(图像的存放路径)；<br>border属性标识了图像的面框；<br>width和height设定图像在页面上显示的宽高；<br>title这是当鼠标悬停在图片上时要显示的信息；<br>alt当图片不能正确显示的时候，可以用作提示的信息给用的属性，这样用户体验也许会好些；</p><h1 id="文件的相对路径与绝对路径"><a href="#文件的相对路径与绝对路径" class="headerlink" title="文件的相对路径与绝对路径"></a>文件的相对路径与绝对路径</h1><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>相对路径的写法：<br>(同级)当文件目录与目标目录在同一文件夹下时，直接书写文件名+文件后缀<br>(上级找下级)当当前文件夹和目标文件所处的文件夹在同一路径下时，目标文件夹名/目标文件全称+目标文件后缀<br>(下级找上级)当当前文件所处的文件夹和目标文件在同一目录时，使用../将当前文件跳转到上一级别目录同级文职再+目标文件名+目标文件后缀；例如../images/a01.jpg</p><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>例如:<br><img sec="D:/OneDrive - JJXY/luomitBlog/Github/cdn/img/cover/001jpg"></p><h1 id="HTML5常用元素"><a href="#HTML5常用元素" class="headerlink" title="HTML5常用元素"></a>HTML5常用元素</h1><h2 id="快标签"><a href="#快标签" class="headerlink" title="快标签"></a>快标签</h2><p>语法：<br><dic></div><br>说明：<br>没有具体含义，统称为快标签，用来设置文档区域，是文档布局常用对象</p><p>语法：<br><span></span><br>说明：<br>文本结点标签，可以是某一段文字或是某一个字</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><!--注释信息等--><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p>说明:<br>注：一对tr表示一行；一对td表示一个单元格(一列)</p><p>表的相关属性：<br>(1)width=”表格的宽度”<br>(2)height=”表格的高度”<br>(3)border=”表格的边框”<br>(4)bordercolor=”边框色”<br>(5)cellspacing=”单元格与单元格的间距”<br>(6)cellpadding=”单元格与内容的距离”<br>(7)aligh=”表格的对其方式”  取值：”left”、”center”、”right” (valigh=”垂直对齐”、top、buttom、middle)<br>(8)合并单元格属性:(td)     合并列：colspan”所有要合并的单元格列数”  合并行：rowspan=”所有要合并单元格的行数”</p><h2 id="表单元素与属性"><a href="#表单元素与属性" class="headerlink" title="表单元素与属性"></a>表单元素与属性</h2><p>表单的作用：<br>用来收集用户的信息</p><p><code>表单框</code></p><p><from name="表单名称" method="post/get" action="路径"></form></p><p><code>表单控件</code></p><input type=""/>语法：<input type="" name="" value="" size="" maxlenght="" />说明：`input：`表即可创建按钮、文本输入框、选择框等各种类型的输入字段`name：`属性标识表单域的名称`type：`属性标识表单控件的类型，大概有十多种`value：`属性定义表单域的默认值，其他属性根据type的不同而有所变化`maxlength`：控制最多输入的字符数`size：`控制框的宽度(以字符为单位)<p>(1)文本框<input type="text" value="默认值"/><br>(2)密码框<input type="password"/><br>(3)提交按钮<input type="submit" value="按钮内容"/><br>(4)重置按钮<input type="reset" value="按钮内容"/><br>(5)空按钮<input type="button" value="按钮内容"/><br>(6)单选按钮组<br><input type="radio" name="ral" /><br><input type="radio" name="ral" checked="checked"/>默认选中<br>(7)复选框组<br><input type="checkbox" name=""/><input type="checkbox" name="" disabled="disabled"><br>disabled=”disabled”(禁用) checked=”checked”(默认启用)</p><p><code>下拉菜单</code></p><p>语法：<br><select><br>    <option>下拉选项1</option><br>    <option>下拉选项2</option><br></select><br>表单域多行文本定义</p><p>语法：<br><textarea name="" cols="" rows="" style="resize:none"></textarea><br>说明：<br>多行文本，row属性和cols属性用来设置文本输入窗口的高度和宽度，单位是字符<br>阻止浏览器对窗口的拖到设置：{resize=none;}(这是css属性)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/2020/03/24/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/24/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h1><p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML(标准通用标记语言的一个应用)<br>或XML(便准通用标记语言的一个子集)等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配<br>合各种脚本语言动态的对网页各元素进行格式化。CSS能够对网页中元素位置的排版进行像素级精确控制，<br>支持几乎所有的字体号样式，拥有对网页对象模型样式编辑的能力。</p><h1 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h1><h2 id="css语法说明"><a href="#css语法说明" class="headerlink" title="css语法说明"></a>css语法说明</h2><p>每个CSS样式由两部分组成，即选择符和声明，而声名又分为属性和属性值两部分；<br>属性需放在花括号中，属性与属性值用冒号隔开，每条声明用分号结束；<br>当一个声名中有多个属性和属性值时，属性和属性不分先后顺序；<br>在书写样式的过程中，空格、换行等操作不影响显示；<br>例如：idv{width:200px; height:200px; background:red;}</p><h2 id="样式的建立和使用方法"><a href="#样式的建立和使用方法" class="headerlink" title="样式的建立和使用方法"></a>样式的建立和使用方法</h2><p>内部样式表、外部样式表和内联样式表</p><p><code>内部样式表(嵌套到页面中)</code><br>语法：</p><pre><code class="html">&lt;style type=&quot;text/css&quot;&gt;    css语句&lt;/style&gt;</code></pre><p>注：使用style标记创建样式时，最好将该标记写在<head></head>内；</p><p><code>外部样式表</code><br>外部样式表的两种方式<br>a.外部样式表的创建<br>b.外部样式表的导入</p><p>方法一:<br>    语法:<link rel="stylesheet" type="text/css" href="目标文件的路径及目标文件全称"/><br>    说明：使用link元素导入外部样式表时，需要将该元素写在文档头部，即<head></head>内；<br>    rel：用于定义文档关联，表示关联样式表； type：定义文档类型；</p><p>方法二：<br>    语法：<br>    <style type="text/css"><br>        @import url(“目标文件的路径以及文件名全称”)；<br>    </style><br>    说明：@和import之间没有空格，url和小括号之间也没有空格；括号内加双引号，结尾必须以分号结束；</p><p>link和import的区别<br>(1)来源不同：link属于html标签，而@import完全是CSS提供的一种方式。link标签除了可以加载CSS外，还可以做很多其他的事情，比如定义RSS，定义rel连接属性，@import只能加载CSS；<br>(2)加载顺序：当一个网页在加载时(就是被浏览者浏览的时候)，link引入的CSS会与html内容同时被加载，而@import引用的CSS会等到html内容全部加载完成再加载；这就导致页面在一开始加载时丢失样式，内容混乱；<br>(3)兼容性：@import时CSS2.1提出的，所以老的浏览器不支持，@import只在IE5以上版本的浏览器才能识别，而link标签没有这个问题；<br>(4)dom控制样式：当使用JavaScript控制dom去改变样式时，只能使用link标签来引用CSS，因为@import不支持dom的样式控制方法；</p><p><code>内联样式表(表行间样式，内行样式，嵌入式样式)</code><br>语法：&lt;标签 style=”属性:属性值;属性:属性值;”&gt;&lt;/标签&gt;<br>例如：<div style="width:100px;height:500px;"></div></p><p><code>样式表的优先级</code><br>内联样式表在页面中优先级高于内部样式表和外部样式表;外部样式表和内部样式表的优先级取决于两者在页面中书写的先后顺序；</p><h1 id="CSS选择器-选择符"><a href="#CSS选择器-选择符" class="headerlink" title="CSS选择器(选择符)"></a>CSS选择器(选择符)</h1><p>选择符的定义：<br>    选择符表示要定义的对象，可以是元素本身，也可以是一类元素或者制定名称的元素。<br>常用的选择符有十多种类型，id选择符，class选择符，通配符，群组选择符，包含选择符，伪类选择符，伪对象选择符。</p><h2 id="元素选择符-类型选择符-标签选择符-element选择器"><a href="#元素选择符-类型选择符-标签选择符-element选择器" class="headerlink" title="元素选择符/类型选择符/标签选择符(element选择器)"></a>元素选择符/类型选择符/标签选择符(element选择器)</h2><p>语法：元素名称{属性:属性值;}<br>类型选择符是根据html语言中的标记来直接定义</p><p>说明：<br>    a.元素选择符就是以文档语言对象类型作为选择符，即使用结构中元素名称作为选择符；例如body、div、p、img、strong、span等。<br>    b.所有的页面元素都可以作为选择符；<br>用法：<br>    (1)如果想改变某个元素的默认样式时，可以使用类型选择符；(如：改变一个p段落样式)<br>    (2)当想要统一文档某个元素的显示效果时，可以使用类型选择符；(改变文档所有p段落样式)</p><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>语法：#id名{属性:属性值;}<br>说明：<br>(1)当我们使用id选择符时，应该为每个元素定义一个id属性；如：<div id="top"></div><br>(2)id选择器的语法格式是”#”加上自定义的id名；如：#box{width:300px;height:500px;}<br>(3)取名时要取英文名，不能取关键字：(所有的标记和属性都是关键字)<br>(4)一个id名称只能对应文档中一个具体的元素对象，因为id只能定义页面中某一个唯一的元素对象。<br>(5)最大的用处：创建网页的外部结构</p><h2 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h2><p>语法：.class名{属性:属性值;}<br>说明：<br>    当我们使用类型选择符时，应该先为每一个元素定义一个类名称，类选择符的语法格式如：<div class="top"></div><br>用法：<br>    class选择符更适合定义一种类型样式；</p><h2 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h2><p>语法：选择符1,选择符2,选择符3….{属性:属性值;}<br>说明：当有多个选择符应用相同的样式时，可以将选择符用”,”分隔的方式，合并为一组<br>实例：.top,#nav,p{width:100px;}</p><h2 id="包含选择器"><a href="#包含选择器" class="headerlink" title="包含选择器"></a>包含选择器</h2><p>语法：选择符1(父) 选择符2(子){属性:属性值;}<br>说明：选择符1和选择符2用空格隔开，含义就是选择符1包含所有选择符2；<br>实例：div ul li{height:25px;}</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>语法：<em>{属性:属性值;}<br>说明：通配选择符的写法是”</em>“,其含义是所有元素<br>用法：常用来重置样式</p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>a:link{color:red;}      <code>未访问的连接状态</code><br>a:visited{color:green;} <code>已访问的连接状态</code><br>a:hover{color:blue;}    <code>鼠标滑过时的连接状态</code><br>a:avtive{color:yellow;} <code>鼠标点击时的连接状态</code><br>说明：<br>    (1)当这四类超链接伪类选择符联合使用时，应注意他们的顺序，正常的顺序为：a,a:link,a:visited,a:hover,a:active,错误的顺序有时会使超链接的样式失效；<br>    (2)为了简化代码，可以把伪类选择符中相同的声名提出来放在a选择符中；例如：a{color:red;} a:hover{color:green;}表示超链接的三种状态都相同，只有鼠标划过变化颜色。</p><p>常用于超链接</p><h2 id="转载符的权重"><a href="#转载符的权重" class="headerlink" title="转载符的权重"></a>转载符的权重</h2><p>css中用四位数表示权重，权重的表达法方式如：0,0,0,0<br>类型选择符的权重为0001 a p div span form … 1<br>class选择符的权重为0010 .class 10<br>id选择符的权重为0100 # 100<br>子选择符的权重为0000<br>属性选择符的权重为0010<br>伪类选择符的权重为0010<br>伪元素选择符的权重为0010<br>包含选择符的权重：为包含选择符的权重之和<br>内联样式的权重为1000<br>继承样式的权重为1000<br>注：如果权重相同时，则执行后写的样式；</p><h2 id="html与css的注释"><a href="#html与css的注释" class="headerlink" title="html与css的注释"></a>html与css的注释</h2><p>html的注释<!--注释的内容--><br>css的注释/<em>–注释的内容–</em>/</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonPJManegement</title>
      <link href="/2020/03/17/PythonPJMane/"/>
      <url>/2020/03/17/PythonPJMane/</url>
      
        <content type="html"><![CDATA[<h2 id="创建基础框架"><a href="#创建基础框架" class="headerlink" title="创建基础框架"></a>创建基础框架</h2><pre><code class="python">from hutil.Qt import QtWidgetsimport osproj = hou.getenv(&#39;JOB&#39;)+&#39;/&#39;#使用hou.getenv获取当前工程的环境变量属性def openScene(item):    hipFile = proj + item.data()    hou.hipFile.load(hipFile)    #print hipFiledef onCreateInterface():    widget = QtWidgets.QLabel(proj)    listwidget = QtWidgets.QListWidget()    #print &#39;\n&#39; &quot;ProjectPath(&quot; + proj +&#39;)&#39;    for file in os.listdir(proj):        if file.endswith(&quot;.hip&quot;):            listwidget.addItem(file)    #将按钮链接到函数上执行打开文件的指令    listwidget.doubleClicked.connect(openScene)    return listwidget</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS8安装与配置</title>
      <link href="/2020/03/15/CentOS8%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/15/CentOS8%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a><a href="https://www.centos.org/download/" target="_blank" rel="noopener">镜像下载</a></h2><p><a href="https://rufus.en.softonic.com/" target="_blank" rel="noopener">刻录工具</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 系统 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HoudiniArnold炫酷爆炸效果</title>
      <link href="/2020/03/10/HoudiniArnold%E7%82%AB%E9%85%B7%E7%88%86%E7%82%B8%E6%95%88%E6%9E%9C/"/>
      <url>/2020/03/10/HoudiniArnold%E7%82%AB%E9%85%B7%E7%88%86%E7%82%B8%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>前言：前几天在网上看到一个很棒的爆炸效果，然后就从某宝入手了一份工程文件，打算取一波经。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>话不多说，先上效果</p><body><p class="imglist">  <img src="https://cdn.jsdelivr.net/gh/luomit/cdn@v1.1.1/demo/作品鉴赏/Houdini and Arnold_Explorsion/000.png" data-fancybox="images" data-caption="HoudiniArnold爆炸效果" />  <img src="https://cdn.jsdelivr.net/gh/luomit/cdn@v1.1.1/demo/作品鉴赏/Houdini and Arnold_Explorsion/001.png" data-fancybox="images" data-caption="HoudiniArnold爆炸效果" />  <img src="https://cdn.jsdelivr.net/gh/luomit/cdn@v1.1.1/demo/作品鉴赏/Houdini and Arnold_Explorsion/002.png" data-fancybox="images" data-caption="HoudiniArnold爆炸效果" /></p><p class="imglist">  <video src="https://cdn.jsdelivr.net/gh/luomit/cdn@v1.1.1/demo/作品鉴赏/Houdini and Arnold_Explorsion/houdini pyro爆炸 hip源文件分享 - 1.1473991412(Av77069352,P1).mp4" preload="metadata" controls playsinline poster="https://cdn.jsdelivr.net/gh/luomit/cdn@v1.1.1/demo/作品鉴赏/Houdini and Arnold_Explorsion/002.png">Sorry, your browser does not support the video tag.</video></p></body><h3 id="工程分享"><a href="#工程分享" class="headerlink" title="工程分享"></a>工程分享</h3><p><a href="https://cdn.jsdelivr.net/gh/luomit/cdn@v1.1.1/demo/作品鉴赏/Houdini%20and%20Arnold_Explorsion/pyro_v38_P.hip" target="_blank" rel="noopener">pyro_hip</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://cdn.jsdelivr.net/gh/luomit/cdn@v1.1.1/demo/作品鉴赏/Houdini%20and%20Arnold_Explorsion/shader_final_v01.hip" target="_blank" rel="noopener">shader_final</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      
        <tags>
            
            <tag> pyro </tag>
            
            <tag> 工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houdini配置</title>
      <link href="/2020/03/06/Houdini%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/06/Houdini%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="houdini文档的配置"><a href="#houdini文档的配置" class="headerlink" title="houdini文档的配置"></a>houdini文档的配置</h2><pre><code class="houdini"># ---------------- &amp;&amp; Plug-ni PATH &amp;&amp; -------------------#自定义插件目录MEHOU = D:\Users\luomit\Documents\houdini18.0\plug-inMOPS = $MEHOU/MOPS-masterDM = $MEHOU/DM-v1.5.25HDRI = $MEHOU/Hdri-Link-for-Houdini-masterOPX = $MEHOU/optixARNOLD = C:\arnold\htoa\htoa-5.1.0_r9289183_houdini-${HOUDINI_VERSION}\htoa-5.1.0_r9289183_houdini-${HOUDINI_VERSION}GAMETOOL = $MEHOU/SideFX_GameDevToolset_Houdini17.5_1.232EDITOR = &quot;C:\Users\luomit\AppData\Local\Programs\Microsoft VS Code\Code.exe&quot;#PDG_IMAGEMAGICK = &quot;C:\luomitPC\ImageMagick-7.0.9-Q16\magick.exe&quot;#PDG_FFMPEG = &quot;C:\Program Files\ffmpeg-20200227-9b22254-win64-static\bin\ffmpeg.exe&quot;---------------- &amp;&amp; Plug-ni PATH &amp;&amp; -------------------# --------------------- &amp;&amp; PATH &amp;&amp; -----------------------HOUDINI_PATH = &quot;$HOUDINI_PATH;$GAMETOOL;$ARNOLD;$REDSHIFT;$MOPS;&amp;&quot;PATH = &quot;$PATH;$EDITOR;$GAMETOOL/bin;$ARNOLD/scripts/bin;$REDSHIFTPATH&quot;# --------------------- &amp;&amp; PATH &amp;&amp; -----------------------# HOUDINI_NVIDIA_OPTIX_DSO_PATH =HOUDINI_BUFFERDSAVE=1HOUDINI_UISCALE=120HOUDINI_EXTERNAL_HELP_BROWSER=1HOUDINI_USE_HFS_PYTHON=1HOUDINI_DOS_ERROR=2</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liquids_II</title>
      <link href="/2020/03/05/Liquids-II/"/>
      <url>/2020/03/05/Liquids-II/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> liquids </tag>
            
            <tag> hide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HPython</title>
      <link href="/2020/03/05/HPython/"/>
      <url>/2020/03/05/HPython/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VEX-Script</title>
      <link href="/2020/03/05/VEX-Script/"/>
      <url>/2020/03/05/VEX-Script/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> vex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5创建基础UI</title>
      <link href="/2020/02/20/PyQt%E5%88%9B%E5%BB%BAUI/"/>
      <url>/2020/02/20/PyQt%E5%88%9B%E5%BB%BAUI/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3学习网站收藏"><a href="#Python3学习网站收藏" class="headerlink" title="Python3学习网站收藏"></a>Python3学习网站收藏</h1><p><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Python官网</a>下载对应系统的安装文件进行安装；<br><a href="https://docs.python.org/zh-cn/3/" target="_blank" rel="noopener">Python文档</a>有各个版本的Python多种语言的技术文档说明；<br><a href="https://www.runoob.com/python/" target="_blank" rel="noopener">Runoob编程中文文档</a><br><a href="http://code.py40.com/" target="_blank" rel="noopener">PyQt5-Python学习笔记文档</a></p><h1 id="PyQt5安装"><a href="#PyQt5安装" class="headerlink" title="PyQt5安装"></a>PyQt5安装</h1><h2 id="windows10安装PyQt5-tool"><a href="#windows10安装PyQt5-tool" class="headerlink" title="windows10安装PyQt5-tool"></a>windows10安装PyQt5-tool</h2><p><a href="https://pypi.org/project/pyqt5-tools/" target="_blank" rel="noopener">pyqt2-tool下载</a><br>使用CMD运行如下代码</p><pre><code>pip install pyqt5-tools</code></pre><p>这里建议先安装pyqt5-tool再安装pyqt5，避免安装pyqt5时报错，若是仍然有报错可<a href="https://blog.csdn.net/SeekAndFindYou/article/details/81264684" target="_blank" rel="noopener">参考</a></p><h2 id="windows10安装PyQt5"><a href="#windows10安装PyQt5" class="headerlink" title="windows10安装PyQt5"></a>windows10安装PyQt5</h2><p><a href="https://pypi.org/project/PyQt5/" target="_blank" rel="noopener">pyqt5下载</a><br>使用CMD运行如下代码</p><pre><code>pip install pyqt5</code></pre><p>如是提示pip版本过低执行</p><pre><code>python -m pip install --upgrade pip</code></pre><p>升级pip版本后在执行上一条命令安装PyQt5</p><h1 id="PyCharm配置PyQt5"><a href="#PyCharm配置PyQt5" class="headerlink" title="PyCharm配置PyQt5"></a>PyCharm配置PyQt5</h1><h3 id="PyCharm安装"><a href="#PyCharm安装" class="headerlink" title="PyCharm安装"></a>PyCharm安装</h3><p><a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">PyCharm</a>官网下载<br><a href="https://www.cnblogs.com/huke123/p/12110902.html" target="_blank" rel="noopener">学习版设置</a></p><h3 id="PyCharm配置"><a href="#PyCharm配置" class="headerlink" title="PyCharm配置"></a>PyCharm配置</h3><p>Python文件代码模板</p><pre><code>##!/usr/bin/python# -*- coding: utf-8 _*_# @Time     :${DATE} ${TIME}# @Author   :luomit# @Email    :1107199736@qq.com# @File     :${NAME}.py# @Project  :${PROJECT_NAME}</code></pre><p><a href="https://blog.csdn.net/stormdony/article/details/80400032" target="_blank" rel="noopener">PyQt5其他配置参考</a></p><h1 id="PyQt5创建UI"><a href="#PyQt5创建UI" class="headerlink" title="PyQt5创建UI"></a>PyQt5创建UI</h1><h2 id="基础窗口-置顶"><a href="#基础窗口-置顶" class="headerlink" title="基础窗口 置顶"></a>基础窗口 置顶</h2><pre><code class="python">import sysfrom PyQt5.QtWidgets import *from PyQt5.QtGui import *from PyQt5.QtCore import *class MainWindows(QWidget):    def __init__(self):        super(MainWindows, self).__init__()        self.setWindowTitle(&quot;主窗口&quot;)  # 设置窗口标题        self.resize(800, 600)  # 重设尺寸        self.move(0, 0)  # 移动窗口        # self.setGeometry(0,0,800,600)     #相当于move + resize        self.setWindowIcon(QIcon(&#39;icon path&#39;))  # 设置窗口的图标        self.setWindowFlag(Qt.WindowStaysOnTopHint, True)  # 设置窗口标旗，置顶标旗        # self.setStyleSheet(&#39;background(100,200,200)&#39;)      #通过样式的方法把窗口背景的颜色设置为(100，200，200)if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    a = MainWindows()    a.show()  # show是窗口的显示方法，hide时窗口的隐藏方法，close窗口的关闭方法    app.exec_()</code></pre><pre><code class="python">import sys#引入必要的模块，窗口的基本控件位于QtWidgets模块中from PyQt5.QtWidgets import QApplication, QWidgetif __name__ == &#39;__main__&#39;:    #每一个PyQt5程序必须创建一个应用程序对象。argv参数是一个列表，从命令行输入参数    app = QApplication(sys.argv)    #QWidget部件时PyQt5所有用户界面的基类，它为构建窗口界面提供默认构造，默认构造没有父对象    w = QWidget()    #重设窗口的大小    w.resize(300,250)    #设置窗口的标头    w.setWindowTitle(&quot;luomit windows&quot;)    #设置窗口的位置    w.move(300,300)    #show显示窗口    w.show()    #使用exit()方法确保应用程序干净的退出    #exec_有下划线是因为这里执行的时一个Python的关键词，因此exec_替代    sys.exit(app.exec_())</code></pre><h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><p><code>QPushButton Label</code></p><pre><code class="python">import sysfrom PyQt5.QtWidgets import*from PyQt5.QtGui import *from PyQt5.QtCore import *class Buttom(QPushButton):    def __init__(self):        super(Buttom, self).__init__()        self.setText(&quot;按钮&quot;)        #self.setIcon()        self.clicked.connect(self.print123)        self.clicked.connect(lambda:print(456))        print(self.text())    def print123(self):        print(123)class Label(QLabel):    def __init__(self):        super().__init__()        self.setText(&#39;大标签&#39;)        self.setAlignment(Qt.AlignVCenter | Qt.AlignHCenter)    # |按钮或运算        #self.setPixmap(QPixmap(&#39;map path&#39;))                     #像素图        #获取参数的方法        print(self.text())        print(self.alignment())if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    a = Label()    a.show()    app.exec_()</code></pre><h3 id="窗口提示"><a href="#窗口提示" class="headerlink" title="窗口提示"></a>窗口提示</h3><pre><code class="python">import sysfrom PyQt5.QtWidgets import (QWidget,QToolTip,QPushButton,QApplication)from PyQt5.QtGui import QFontclass Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        QToolTip.setFont(QFont(&quot;sansSerif&quot;,10))        self.setToolTip(&quot;这是一个UI提示测试脚本&quot;)        btn = QPushButton(&quot;Button&quot;,self)        btn.setToolTip(&quot;这是一个按钮提示&quot;)        btn.resize(btn.sizeHint())        btn.move(50,50)        self.setGeometry(300,300,300,200)        self.setWindowTitle(&quot;Tooltips&quot;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h3 id="消息提示框"><a href="#消息提示框" class="headerlink" title="消息提示框"></a>消息提示框</h3><pre><code class="python">import sysfrom PyQt5.QtWidgets import QWidget, QPushButton, QApplicationfrom PyQt5.QtCore import QCoreApplicationclass Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        qbtn = QPushButton(&quot;Quit&quot;, self)        qbtn.clicked.connect(QCoreApplication.instance().quit)        qbtn.resize(qbtn.sizeHint())        qbtn.move(50, 50)        self.setGeometry(300, 300, 300, 200)        self.setWindowTitle(&quot;Quit button&quot;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h3 id="消息提示框-1"><a href="#消息提示框-1" class="headerlink" title="消息提示框"></a>消息提示框</h3><pre><code class="python">import sysfrom PyQt5.QtWidgets import QWidget, QMessageBox, QApplication#QMessageBoxclass Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        self.setGeometry(300, 300, 250, 150)        self.setWindowTitle(&#39;Message box&#39;)        self.show()    # 定义关闭触发方法    def closeEvent(self, event):        reply = QMessageBox.question(self, &#39;Message&#39;,&quot;Are you sure to quit?&quot;, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)        if reply == QMessageBox.Yes:            event.accept()        else:            event.ignore()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h3 id="显示窗口到屏幕中心"><a href="#显示窗口到屏幕中心" class="headerlink" title="显示窗口到屏幕中心"></a>显示窗口到屏幕中心</h3><pre><code class="python">import sysfrom PyQt5.QtWidgets import QWidget, QDesktopWidget, QApplicationclass Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        self.resize(250,150)        self.center()        self.setWindowTitle(&quot;Center&quot;)        self.show()    #控制窗口显示在屏幕中心的方法    def center(self):        #获得窗口        qr = self.frameGeometry()        #获取屏幕中心点坐标        cp = QDesktopWidget().availableGeometry().center()        #显示到屏幕中心        qr.moveCenter(cp)        self.move(qr.topLeft())if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h1 id="PyQt的布局"><a href="#PyQt的布局" class="headerlink" title="PyQt的布局"></a>PyQt的布局</h1><p>程序指定每个控件的位置和大小(以像素为单位px)</p><h2 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h2><p>绝对布局有以下限制:</p><ul><li>调整窗口，控件元素的大小和位置不会改变</li><li>会因使用的场景影响其显示效果</li><li>如改变内部元素，应用程序的布局就会改变</li></ul><pre><code class="python">import sysfrom PyQt5.QtWidgets import QWidget, QLabel, QApplicationclass Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        laba = QLabel(&#39;好想出去玩啊&#39;,self)        laba.move(15,10)        labb = QLabel(&#39;肺炎啥时候走&#39;,self)        labb.move(35,40)        labc = QLabel(&#39;我看不见病毒&#39;,self)        labc.move(55,70)        self.setGeometry(300,300,250,150)        self.setWindowTitle(&#39;绝对布局案例&#39;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h2 id="相对布局-框布局BoxLayout"><a href="#相对布局-框布局BoxLayout" class="headerlink" title="相对布局-框布局BoxLayout"></a>相对布局-框布局BoxLayout</h2><pre><code class="python">import sysfrom PyQt5.QtWidgets import (QWidget,QPushButton,QHBoxLayout,QVBoxLayout,QApplication)#导入PyQt的纵向布局方法和横向布局方法class Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        okButton = QPushButton(&#39;OK&#39;)        cancelButton = QPushButton(&#39;Cancel&#39;)        #设置纵向布局方式然后添加一个纵向拉伸因子并创建两个Button        hbox = QHBoxLayout()        hbox.addStretch(1)        hbox.addWidget(okButton)        hbox.addWidget(cancelButton)        #设置横向布局，并设置横向拉伸因子来将按钮推向右侧        vbox = QVBoxLayout()        vbox.addStretch(1)        vbox.addLayout(hbox)        #最后将设置到全局窗口中           self.setLayout(vbox)        self.setGeometry(300,300,250,150)        self.setWindowTitle(&#39;绝对布局案例&#39;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h2 id="相对布局-表格布局QGridLayout"><a href="#相对布局-表格布局QGridLayout" class="headerlink" title="相对布局-表格布局QGridLayout"></a>相对布局-表格布局QGridLayout</h2><pre><code class="python">import sysfrom PyQt5.QtWidgets import (QWidget,QPushButton,QGridLayout,QApplication)class Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        grid = QGridLayout()        self.setLayout(grid)        #实例化QGridLayout表格布局样式并设置到应用程序布局        name = [&#39;Cls&#39;,&#39;Bck&#39;,&#39;&#39;,&#39;Close&#39;,                &#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;/&#39;,                &#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;*&#39;,                &#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;-&#39;,                &#39;0&#39;,&#39;.&#39;,&#39;=&#39;,&#39;+&#39;]        #创建按钮到一个字符串数组中        positions = [(i,j)for i in range(5)for j in range(4)]        for position,name in zip(positions, name):            if name == &#39;&#39;:                continue            button = QPushButton(name)            grid.addWidget(button,*position)        #使用for in 将数组字符串解包依次对应到各自位置上        self.move(300,150)            self.setWindowTitle(&#39;Grid布局案例&#39;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre><h2 id="相对布局-跨行表格布局"><a href="#相对布局-跨行表格布局" class="headerlink" title="相对布局-跨行表格布局"></a>相对布局-跨行表格布局</h2><pre><code class="python">import sysfrom PyQt5.QtWidgets import (QWidget,QLabel,QLineEdit,QTextEdit,QGridLayout,QApplication)class Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        title = QLabel(&#39;Title&#39;)        author = QLabel(&#39;Author&#39;)        review = QLabel(&#39;Review&#39;)        titleEdit = QLineEdit()        authorEdit = QLineEdit()        reviewEdit = QLineEdit()        grid = QGridLayout()        grid.setSpacing(10)        grid.addWidget(title,1,0)        grid.addWidget(titleEdit,1,1)        grid.addWidget(author,2,0)        grid.addWidget(authorEdit,2,1)        grid.addWidget(review,3,0)        grid.addWidget(reviewEdit,3,1,5,1)        self.setLayout(grid)        self.setGeometry(300,300,350,300)            self.setWindowTitle(&#39;跨行表格布局案例&#39;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2020/02/09/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/02/09/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Node.js安装</li></ul><p>node.js链接 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><blockquote><p>node.js安装会给系统安装一个npm的包管理器，这是hexo搭建博客所需要的；</p></blockquote><ul><li>打开终端获取管理员权限</li></ul><p>windows使用管理员身份运行命令提示符窗口<br>liunx or mac则使用sudo su获得管理员权限</p><ul><li>查看node版本</li></ul><pre><code>node -v</code></pre><ul><li>查看npm版本</li></ul><pre><code>npm -v</code></pre><ul><li>使用npm安装cnpm来提高构建博客框架时下载文件的速度的</li></ul><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><ul><li>使用cnpm安装hexo</li></ul><pre><code>cnpm install -g hexo</code></pre><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><ul><li>pwd 返回当前终端所在系统位置</li><li>mkdir ‘文件夹名’ 创建一个博客文件目录，后续的配置都在这个目录内进行</li><li>hexo init 初始化博客框架<br>初始化报错</li></ul><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><pre><code>ls -l#total 261#-rw-r--r-- 1 Administrator 197121   2465  2月 10 01:49 _config.yml#-rw-r--r-- 1 Administrator 197121  71577  2月 10 01:49 db.json#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:13 node_modules/#-rw-r--r-- 1 Administrator 197121    581  2月 10 01:35 package.json#-rw-r--r-- 1 Administrator 197121 133002  2月 10 01:13 package-lock.json#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:49 public/#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:02 scaffolds/#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:02 source/#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:46 themes/## 可以列出当前目录下的hexo创建的所有文件windows使用dir来查看</code></pre><pre><code>hexo startINFO  Start processingINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.## 本地运行博客网页可使用hexo s</code></pre><pre><code>hexo n &quot;博客文章名&quot;INFO Created:&quot;文章路径&quot; ## 创建一篇新的博客文章</code></pre><pre><code>hexo clean ## 删除静态博客</code></pre><pre><code>hexo generate ## 生成静态博客 hexo g</code></pre><h2 id="部署GitHub-and-Coding"><a href="#部署GitHub-and-Coding" class="headerlink" title="部署GitHub and Coding"></a>部署GitHub and Coding</h2><h4 id="仓库的创建与本地文件配置"><a href="#仓库的创建与本地文件配置" class="headerlink" title="仓库的创建与本地文件配置"></a>仓库的创建与本地文件配置</h4><p>在GitHub创建一个名字格式为 “用户名”+ .github.io 的仓库<br>在Coding创建一个名字格式为 “用户名”+ .coding.me 的仓库<br>然后复制仓库路径添加到博客目录下_config.yml内，如下所示</p><pre><code># Deployment# Docs: https://hexo.io/docs/deployment.htmldeploy:- type: &#39;git&#39;  repo: &#39;仓库地址&#39;  branch: &#39;分支&#39;- type: &#39;git&#39;  repo: git@e.coding.net:luomit/luomit.coding.me.git  branch: master## 这里可以配置多个仓库的路径一键部署到多个仓库下</code></pre><h4 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h4><p>在博客根目录下使用以下命令安装git</p><pre><code>cnpm install --save hexo-deployer-git</code></pre><h4 id="git-用户配置"><a href="#git-用户配置" class="headerlink" title="git 用户配置"></a>git 用户配置</h4><pre><code># git config --global user.name &quot;用户名&quot;# git config --global user.email &quot;邮箱&quot;git config --global user.name luomitgit config --global user.email 1107199736@qq.com## 注意，如果需要在部署时同时部署到不同的站点，则这些站点的用户名和注册邮箱需要一致</code></pre><h4 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h4><ul><li><p>检查ssh密钥是否存在<br>cd 到系统根目录，使用ls -l 列出所有文件，如果有.ssh文件夹存在，则打开.pud结尾的文件将密钥复制到远端站点的用户设置内<img src="/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20200210025046915.png" alt=""></p></li><li><p>生成SSH密钥</p></li></ul><pre><code class="bash">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;## 使用以上代码会生成一个.ssh的文件夹在系统根目录内，.ssh文件夹内就有id_rsa和id_rsa.pub两个文件，分别表示生成的私钥和公钥## 公钥一定要妥善保管，切勿泄露他人，以免心怀不轨的人偷走你的&#39;小姐姐&#39;or&#39;小哥哥&#39;</code></pre><h4 id="部署到远端仓库"><a href="#部署到远端仓库" class="headerlink" title="部署到远端仓库"></a>部署到远端仓库</h4><pre><code class="bash">$ hexo clean ## 删除静态博客$ hexo generate ## 生成静态博客$ hexo deploy## 部署$ hexo backup## 备份$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo backup &amp;&amp; hexo deploy## 也可以一次执行全部命令</code></pre><h2 id="主题替换"><a href="#主题替换" class="headerlink" title="主题替换"></a>主题替换</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo</a>主题官网</p><pre><code>git clone https://github.com/JoeyBling/hexo-theme-yilia-plus.git /themes/yilia## git clone &quot;主题仓库路径&quot; &quot;目标路径&quot;</code></pre><h2 id="Sakura主题修改"><a href="#Sakura主题修改" class="headerlink" title="Sakura主题修改"></a>Sakura主题修改</h2><h2 id="Hexo-插件"><a href="#Hexo-插件" class="headerlink" title="Hexo 插件"></a>Hexo 插件</h2><h3 id="Hexo-tag-gdemo"><a href="#Hexo-tag-gdemo" class="headerlink" title="Hexo-tag-gdemo"></a>Hexo-tag-gdemo</h3><p>用于展示代码在终端输入的过程，[详情][5]<br>基本样式：</p><pre><code>&gt; {% gdemo_terminal 'node ./demo' '250px' 'bash' '500' '$' 'demo-teriminal' %}Hello World!{% endgdemo_terminal %}</code></pre><h3 id="Fancybox-主题集成"><a href="#Fancybox-主题集成" class="headerlink" title="Fancybox(主题集成)"></a>Fancybox(主题集成)</h3><p>点击图片预览时可以缩放等，[详情][4]<br>基本样式：(在博客中插入)</p><pre><code class="md">#第一种{% fb_img src [caption] %}#第二种&lt;a href=&quot;image.jpg&quot; data-fancybox=&quot;images&quot; data-caption=&quot;My caption&quot;&gt;    &lt;img src=&quot;thumbnail.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;#更多部分多方法，详情跳转</code></pre><h3 id="hexo-tag-bili-主题集成"><a href="#hexo-tag-bili-主题集成" class="headerlink" title="hexo-tag-bili(主题集成)"></a>hexo-tag-bili(主题集成)</h3><p>用来在文章或单页面中插入B站外链视频，[详情][3]</p><pre><code>{% bili video_id [page] %}</code></pre><h3 id="Bilibili追番"><a href="#Bilibili追番" class="headerlink" title="Bilibili追番"></a>Bilibili追番</h3><p>[npm][2]安装配置说明说明</p><pre><code>&gt;&gt;&gt; hexo bangumi -u     #更新追番数据&gt;&gt;&gt; hexo bangumi -d     #删除追番数据</code></pre><h3 id="豆瓣书单"><a href="#豆瓣书单" class="headerlink" title="豆瓣书单"></a>豆瓣书单</h3><p>[Github][1]安装配置说明地址</p><pre><code>&gt;&gt;&gt; hexo douban -bgm</code></pre><h3 id="图标设置插件"><a href="#图标设置插件" class="headerlink" title="图标设置插件"></a>图标设置插件</h3><p>[fontawesome][6]</p><h3 id="Hexo文章隐藏插件"><a href="#Hexo文章隐藏插件" class="headerlink" title="Hexo文章隐藏插件"></a>Hexo文章隐藏插件</h3><p>[参考][7]</p><h2 id="windows下端口占用问题"><a href="#windows下端口占用问题" class="headerlink" title="windows下端口占用问题"></a>windows下端口占用问题</h2><p>在windows下时常会遇到端口占用而导致hexo不能在本地运行博客预览，如当4000端口占用可使用”netstat -ano | findstr 4000”，查看当前占用4000端口的pid然后使用”tasklist | findstr pid”查询当前占用该端口的程序，使用”taskkill -PID 10388 -F”来杀死该程序，如下所示</p><pre><code class="bash">C:\Users\Administrator&gt;netstat -ano | findstr 4000  TCP    0.0.0.0:4000           0.0.0.0:0              LISTENING       10388  TCP    [::]:4000              [::]:0                 LISTENING       10388C:\Users\Administrator&gt;tasklist | findstr 10388node.exe                     10388 Console                    1     62,568 KC:\Users\Administrator&gt;taskkill -PID 10388 -F成功: 已终止 PID 为 10388 的进程。C:\Users\Administrator&gt;</code></pre><h2 id="git-常见问题与解决方法"><a href="#git-常见问题与解决方法" class="headerlink" title="git 常见问题与解决方法"></a>git 常见问题与解决方法</h2><p>问题：本地仓库与远程仓库不同步导致报错</p><pre><code class="bush">To github.com:luomit/luomit.github.io.git ! [rejected]        master -&gt; master (fetch first)error: failed to push some refs to &#39;git@github.com:luomit/luomit.github.io.git&#39;```解决方案：```bushgit pull origin master --allow-unrelated-histories</code></pre><p>主题<a href="/theme-sakura/">帮助文档</a>挺详细</p><p><a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">1</a><br><a href="https://www.npmjs.com/package/hexo-bilibili-bangumi" target="_blank" rel="noopener">2</a><br><a href="https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md" target="_blank" rel="noopener">3</a><br><a href="http://fancyapps.com/fancybox/3/docs/" target="_blank" rel="noopener">4</a><br><a href="https://heowc.dev/2018/11/14/introduction-hexo-tag-gdemo/" target="_blank" rel="noopener">5</a><br><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">6</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hugo博客搭建</title>
      <link href="/2020/02/09/Hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/02/09/Hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h4 id="Hugo的安装"><a href="#Hugo的安装" class="headerlink" title="Hugo的安装"></a>Hugo的安装</h4><p>Hugo<a href="https://www.gohugo.org/" target="_blank" rel="noopener">帮助文档</a><br>Hugo<a href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener">下载链接</a><br>Go<a href="https://dl.google.com/go/go1.13.8.windows-386.zip" target="_blank" rel="noopener">下载链接</a><br>Mercurial<a href="https://www.mercurial-scm.org/" target="_blank" rel="noopener">下载链接</a></p><p>检查hugo版本</p><pre><code>hugo version</code></pre><h4 id="站点的创建"><a href="#站点的创建" class="headerlink" title="站点的创建"></a>站点的创建</h4><pre><code>hugo new site wiki   #创建一个文件夹名字为wiki的站点cd wiki git init    #初始化站点</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h4><pre><code class="bash">git submodule add https://github.com/forestryio/hugo-theme-novela.git themes/novela    #下载novela主题到/themes/novela文件夹下</code></pre><h4 id="本地运行博客"><a href="#本地运行博客" class="headerlink" title="本地运行博客"></a>本地运行博客</h4><pre><code class="bash">hugo server -t nederburg --buildDrafts# hugo server -t &quot;主题名&quot; --buildDrafts</code></pre><h4 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h4><pre><code class="bash">hugo new post/Hogo博客搭建.md#hugo new post /&quot;博客名.md&quot;</code></pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h4 id="生成public仓库"><a href="#生成public仓库" class="headerlink" title="生成public仓库"></a>生成public仓库</h4><pre><code class="bash">hugo --theme=novela -- baseUrl=&quot;https://luomit.github.io&quot; --buildDrafts</code></pre><h4 id="提交部署"><a href="#提交部署" class="headerlink" title="提交部署"></a>提交部署</h4><pre><code class="bash">cd publicgit init git add .git commit -m &quot;第一次提交&quot;git remote add origin https://github.com/luomit/luomit.github.io.gitgit push -u origin master</code></pre><p>未完待续…..</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hugo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
