<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/05/12/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/test/"/>
      <url>2021/05/12/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/test/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    st--&gt;start</span><br><span class="line">    op--&gt;operation</span><br><span class="line">    cond--&gt;condition</span><br><span class="line">    st--&gt;op--&gt;cond</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">实例</th><th align="center">子层级Kind</th></tr></thead><tbody><tr><td align="center">Assembly</td><td align="center">BookShelf<br><font color=gray>Shelf</br>BookA</br>……</br>BookZ</font></td><td align="center">Assemble<br>Group<br>Component</td></tr><tr><td align="center">Group</td><td align="center">Cups<br><font color=gray>Cup0</br>Cup1</br>……</br>Cup10</font></td><td align="center">Assembly</br>Group</br>Component</td></tr><tr><td align="center">Component</td><td align="center">Shelf / BookA / Cup1</td><td align="center">SubComponent</td></tr><tr><td align="center">SubComponent</td><td align="center">BookA<br><font color=gray>Book_Mesh</br></font>Cup0<font color=gray></br>Cup_Body</br>Cup_Liq</font></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    BookShelfd--&gt;Shelfd</span><br><span class="line">    BookShelfc--&gt;Shelfc</span><br><span class="line">    BookShelfb--&gt;Shelfb</span><br><span class="line">    BookShelfa--&gt;Shelfa</span><br></pre></td></tr></table></figure><p>|||</p>]]></content>
      
      
      <categories>
          
          <category> gallery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/12/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/Mermaid%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
      <url>2021/05/12/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/Mermaid%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="流程图-基本语法"><a href="#流程图-基本语法" class="headerlink" title="流程图-基本语法"></a>流程图-基本语法</h1><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><p>graph用于定义流程局节点的走线方向；<br>T D或者TB可以让流程图从上往下走。</p><p>```mermaid<br>graph T D<br>    Start –&gt; Stop<br>```</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure><p>LR 从左到右</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    <span class="literal">Start</span> --&gt; <span class="literal">Stop</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure><p>流程图方向定义语法：</p><ul><li>TB从上到下</li><li>T D 从上到下(与TB相同)</li><li>BT 从下到上</li><li>RL 从右到左</li><li>LR 从左到右</li></ul><h2 id="No-Des-amp-Shapes"><a href="#No-Des-amp-Shapes" class="headerlink" title="No Des&amp;Shapes"></a>No Des&amp;Shapes</h2><p>默认情况下流程图的节点形状为直角矩形，可通过括号的组合来改变流程图节点的形状</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    <span class="selector-tag">A</span> --&gt; <span class="selector-tag">B</span></span><br><span class="line">    C(<span class="selector-tag">A</span>) --&gt; D(<span class="selector-attr">[Shape]</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A --&gt; B</span><br><span class="line">    C(A) --&gt; D([Shape])</span><br></pre></td></tr></table></figure><p>mermai D添加括号改变节点形状时语法也有了些许的改变;添加括号语法后，括号内的内容就是节点里显示的内容且里面<font Color=yellow>必须有内容</font>，括号外面的内容变成了节点形状的name(在一个图表中name不能相同);<br>节点形状语法表<br>|语法|说明|<br>|:—–:|:—–:|<br>|start[start]|直角矩形|<br>|start(start)|圆角矩形|<br>|start([start])|体育场形|<br>|start[[start]]|长灯光形|<br>|start[(start)]|圆柱体形|<br>|start((start))|正圆形|<br>|start&gt;start]|标签形|<br>|start{start}|菱形|<br>|start|六角形|<br>|start[/start/]|平行四边形|<br>|start[\start]|反向平行四边行|<br>|start[/start]|梯形|<br>|start[\start/]|倒梯形|</p><h2 id="Line-amp-Label"><a href="#Line-amp-Label" class="headerlink" title="Line&amp;Label"></a>Line&amp;Label</h2><p>节点形状间可以添加各式各样的连线，并且可以在线上添加注释；</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">graph</span> <span class="variable">TB</span></span><br><span class="line">    <span class="variable">A</span> <span class="operator">--&gt;</span> <span class="variable">B</span>     </span><br><span class="line">    <span class="built_in">C</span> <span class="operator">---</span> <span class="built_in">D</span></span><br><span class="line">    <span class="built_in">E</span> <span class="operator">--</span> <span class="built_in">Run</span><span class="operator">!</span> <span class="operator">---</span> <span class="variable">F</span></span><br><span class="line">    <span class="variable">G</span> <span class="operator">---|</span><span class="built_in">Run</span><span class="operator">!|</span> <span class="variable">H</span></span><br><span class="line">    <span class="built_in">I</span> <span class="operator">-.-</span> <span class="variable">J</span></span><br><span class="line">    <span class="built_in">K</span> <span class="operator">.-&gt;</span> <span class="variable">L</span></span><br><span class="line">    <span class="variable">M</span> <span class="operator">-.</span><span class="built_in">Run</span><span class="operator">!.-&gt;</span> <span class="built_in">N</span></span><br><span class="line">    <span class="built_in">O</span> <span class="operator">==</span><span class="built_in">Run</span><span class="operator">!==&gt;</span> <span class="variable">P</span></span><br><span class="line">    <span class="variable">Q</span> <span class="operator">--</span><span class="built_in">Run</span><span class="operator">!--&gt;</span> <span class="variable">R</span> <span class="operator">--</span><span class="variable">stop</span><span class="operator">!--&gt;</span> <span class="variable">S</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A --&gt; B     </span><br><span class="line">    C --- D</span><br><span class="line">    E -- Run! --- F</span><br><span class="line">    G ---|Run!| H</span><br><span class="line">    I -.- J</span><br><span class="line">    K .-&gt; L</span><br><span class="line">    M -.Run!.-&gt; N</span><br><span class="line">    O &#x3D;&#x3D;Run!&#x3D;&#x3D;&gt; P</span><br><span class="line">    Q --Run!--&gt; R --stop!--&gt; S</span><br></pre></td></tr></table></figure><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart <span class="keyword">TB</span></span><br><span class="line">    T--&gt; U &amp; V --&gt; <span class="keyword">W</span></span><br><span class="line">    <span class="keyword">X</span> &amp; <span class="keyword">Y</span> --&gt; <span class="keyword">Z</span> &amp; ZZ</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    T--&gt; U &amp; V --&gt; W</span><br><span class="line">    X &amp; Y --&gt; Z &amp; ZZ</span><br></pre></td></tr></table></figure><h2 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h2><h3 id="特殊类型的连线"><a href="#特殊类型的连线" class="headerlink" title="特殊类型的连线"></a><font Color=red>特殊类型的连线</font></h3><p>flowchart和graph比连线变得平滑了些许，而且flowchart有更多的连线类型</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">flowchart</span> <span class="comment">TB</span>    </span><br><span class="line">    <span class="comment">A</span> --<span class="comment">o</span> <span class="comment">B</span> --<span class="comment">x</span> <span class="comment">C</span> <span class="comment">&amp;</span> <span class="comment">D</span></span><br><span class="line"><span class="comment"></span>    <span class="comment">E</span> <span class="comment">&amp;</span> <span class="comment">F</span> --&gt; <span class="comment">G</span> <span class="comment">&amp;</span>  <span class="comment">H</span></span><br><span class="line"><span class="comment"></span>    <span class="comment">I</span> &lt;--&gt; <span class="comment">J</span> </span><br><span class="line">    <span class="comment">K</span> <span class="comment">x</span>--<span class="comment">x</span> <span class="comment">L</span></span><br><span class="line"><span class="comment"></span>    <span class="comment">M</span> <span class="comment">o</span>--<span class="comment">o</span> <span class="comment">N</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB    </span><br><span class="line">    A --o B --x C &amp; D</span><br><span class="line">    E &amp; F --&gt; G &amp;  H</span><br><span class="line">    I &lt;--&gt; J </span><br><span class="line">    K x--x L</span><br><span class="line">    M o--o N</span><br></pre></td></tr></table></figure><h3 id="较长连线-下面的代码要在8-8以上的mermaid上才能正常运行"><a href="#较长连线-下面的代码要在8-8以上的mermaid上才能正常运行" class="headerlink" title="较长连线(下面的代码要在8.8以上的mermaid上才能正常运行)"></a>较长连线(下面的代码要在8.8以上的mermaid上才能正常运行)</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    subgraph one</span><br><span class="line">    A[A0] --&gt; B&#123;B0&#125;</span><br><span class="line">    B --&gt;|<span class="type">Yes</span>| <span class="type">C</span>[OK0]</span><br><span class="line">    C --&gt; D[Rethink0]</span><br><span class="line">    D --&gt; B</span><br><span class="line">    B ----&gt; |<span class="type">No</span>| <span class="type">E</span>[End0]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    subgraph two</span><br><span class="line">    F[A1] --&gt; G&#123;B1&#125;</span><br><span class="line">    G --&gt;|<span class="type">Yes</span>| <span class="type">H</span>[OK1]</span><br><span class="line">    H--&gt; I[Rethink1]</span><br><span class="line">    I --&gt; G</span><br><span class="line">    G -- NO ----&gt; J[End1]</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    subgraph one</span><br><span class="line">    A[A0] --&gt; B&#123;B0&#125;</span><br><span class="line">    B --&gt;|Yes| C[OK0]</span><br><span class="line">    C --&gt; D[Rethink0]</span><br><span class="line">    D --&gt; B</span><br><span class="line">    B ----&gt; |No| E[End0]</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    F[A1] --&gt; G&#123;B1&#125;</span><br><span class="line">    G --&gt;|Yes| H[OK1]</span><br><span class="line">    H--&gt; I[Rethink1]</span><br><span class="line">    I --&gt; G</span><br><span class="line">    G -- NO ----&gt; J[End1]</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><p>更多线的修饰符:<br>|长度|1|2|3|<br>|:—–:|:—–:|:—–:|:—–:|<br>|正常|—|—-|—–|<br>|普通带箭头|–&gt;|—&gt;|—-&gt;|<br>|粗|===|====|=====|<br>|粗带箭头|==&gt;|===&gt;|====&gt;|<br>|点缀|-.-|-..-|-…-|<br>|点缀带箭头|-.-&gt;|-..-&gt;|-…-&gt;|</p><h2 id="更加复杂的注释信息"><a href="#更加复杂的注释信息" class="headerlink" title="更加复杂的注释信息"></a>更加复杂的注释信息</h2><p>在写注释的时候可能会使用到一些符号表情，这些符号表情可能会破坏代码结构，这是可以使用双引号将注释信息转成字符串</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">graph</span> <span class="comment">LR</span></span><br><span class="line"><span class="comment"></span>    <span class="comment">A</span>--<span class="comment">&quot;Run!</span> <span class="comment">&amp;&amp;</span> <span class="comment">❤❤</span> <span class="comment">&quot;</span>--&gt;<span class="comment">B</span>--<span class="comment">&quot;🕒stop!&quot;</span>--&gt;<span class="comment">C</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A--&quot;Run! &amp;&amp; ❤❤ &quot;--&gt;B--&quot;🕒stop!&quot;--&gt;C</span><br></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    <span class="selector-tag">A</span><span class="selector-attr">[<span class="string">&quot;A double quote:#quot;&quot;</span>]</span> --&gt;<span class="selector-tag">B</span><span class="selector-attr">[<span class="string">&quot;A dec char:#9829;&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[&quot;A double quote:#quot;&quot;] --&gt;B[&quot;A dec char:#9829;&quot;]</span><br></pre></td></tr></table></figure><h2 id="多层嵌套-字图"><a href="#多层嵌套-字图" class="headerlink" title="多层嵌套(字图)"></a>多层嵌套(字图)</h2><p>为流程添加子层<br>subgraph title<br>    graph definition<br>end</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">graph</span> TB</span><br><span class="line">    <span class="built_in">c1</span>--&gt;<span class="built_in">a2</span></span><br><span class="line">    subgraph one</span><br><span class="line">    <span class="built_in">a1</span>--&gt;<span class="built_in">a2</span></span><br><span class="line">    <span class="meta">end</span></span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    <span class="meta">end</span></span><br><span class="line">    subgraph three</span><br><span class="line">    <span class="built_in">c1</span>--&gt;<span class="built_in">c2</span></span><br><span class="line">    <span class="meta">end</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">graph</span> TB</span><br><span class="line">    <span class="built_in">c1</span>--&gt;<span class="built_in">a2</span></span><br><span class="line">    subgraph ide1 [one]</span><br><span class="line">    <span class="built_in">a1</span>--&gt;<span class="built_in">a2</span></span><br><span class="line">    <span class="meta">end</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph ide1 [one]</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><p>更多有趣的用法<a href="https://mermaid-js.github.io/mermaid/diagrams-and-syntax-and-examples/entityRelationshipDiagram.html">官方文档</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/12/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/Blender%E6%9D%90%E8%B4%A8%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
      <url>2021/05/12/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/Blender%E6%9D%90%E8%B4%A8%E5%9F%BA%E7%A1%80(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/12/%E7%AD%86%E8%A8%98/linux/CentOS8.1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/05/12/%E7%AD%86%E8%A8%98/linux/CentOS8.1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="基本命令的使用"><a href="#基本命令的使用" class="headerlink" title="基本命令的使用"></a>基本命令的使用</h3><h3 id="文本编辑器使用"><a href="#文本编辑器使用" class="headerlink" title="文本编辑器使用"></a>文本编辑器使用</h3><h3 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h3><h3 id="Shell脚本入门"><a href="#Shell脚本入门" class="headerlink" title="Shell脚本入门"></a>Shell脚本入门</h3><h3 id="常见的服务器"><a href="#常见的服务器" class="headerlink" title="常见的服务器"></a>常见的服务器</h3><h3 id="Java-Tomcat运行环境的搭建"><a href="#Java-Tomcat运行环境的搭建" class="headerlink" title="Java/Tomcat运行环境的搭建"></a>Java/Tomcat运行环境的搭建</h3><h3 id="其他软件的编译与安装Redis"><a href="#其他软件的编译与安装Redis" class="headerlink" title="其他软件的编译与安装Redis"></a>其他软件的编译与安装Redis</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unreal Engine 地编技巧合集</title>
      <link href="2021/05/11/%E7%AD%86%E8%A8%98/ue4/Unreal-Engine-%E5%9C%B0%E7%BC%96%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/"/>
      <url>2021/05/11/%E7%AD%86%E8%A8%98/ue4/Unreal-Engine-%E5%9C%B0%E7%BC%96%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Unreal-Engine-使用距离场解决地表贴图重复问题"><a href="#Unreal-Engine-使用距离场解决地表贴图重复问题" class="headerlink" title="Unreal Engine 使用距离场解决地表贴图重复问题"></a>Unreal Engine 使用距离场解决地表贴图重复问题</h3><ol><li>PixelDepth在UE4中关于深度Depth的函数，PixelDepth像素景深既屏幕像素场景中的深度信息，就是该像素到摄像机的距离。</li><li>在游戏场景的制作中，常常需要使用到贴图的高重复度来使得贴图在场景表上有足够的细节；但是由于游戏场景是比较庞大的一个空间，在使用高重复的图时，就无法满足近处与远处的重复值，给得过低无法表现近处贴图材质的节，过高会使得远处有过于明显的贴出重复。</li><li>在制作材质时，可以使用PixelDepth获得场景到摄像机的距离，然后使用ler函数将混合两种重复度的贴图，来达到细节表现上贴图重复的平衡。</li></ol><p>[练习封装的材质函数]</p><p><img src="/Image-assets/2021.5.12_DitherThresholdAA.jpg"></p><h3 id="Unreal-Engine高效无缝材质衔接"><a href="#Unreal-Engine高效无缝材质衔接" class="headerlink" title="Unreal Engine高效无缝材质衔接"></a>Unreal Engine高效无缝材质衔接</h3><p>场景中模型与模型的交界融合</p><ol><li><p>在材质主节点下有一个Pixel Depth Offset像素深度便宜，创建一个DitherThresholdAA阈值抖动，创建一个常量来与DitherThresholdAA相乘，就可以用这个常量来控制交融的强度范围。</p></li><li></li></ol><h3 id="Unreal-Engine-RVT虚拟纹理使用"><a href="#Unreal-Engine-RVT虚拟纹理使用" class="headerlink" title="Unreal Engine RVT虚拟纹理使用"></a>Unreal Engine RVT虚拟纹理使用</h3><p><a href="https://www.bilibili.com/video/BV1ni4y1A74g">地表重复纹理</a><br><a href="https://www.bilibili.com/video/BV1EA411K79z">物体穿插无缝材质</a><br><a href="https://www.bilibili.com/video/BV1Sf4y1D7KU/?spm_id_from=333.788.recommend_more_video.1">RVT虚拟纹理</a></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ue4 </tag>
            
            <tag> shader </tag>
            
            <tag> 地编 </tag>
            
            <tag> 材质 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal Engine 特效小技巧合集</title>
      <link href="2021/05/11/%E7%AD%86%E8%A8%98/ue4/Unreal-Engine-%E7%89%B9%E6%95%88%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/"/>
      <url>2021/05/11/%E7%AD%86%E8%A8%98/ue4/Unreal-Engine-%E7%89%B9%E6%95%88%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="透明材质的折射"><a href="#透明材质的折射" class="headerlink" title="透明材质的折射"></a>透明材质的折射</h3><ol><li>当要实现折射效果的对象是透明材质对象时，需要取消该对象的的材质属性下的Translucency下的 Render After DOF 选项。</li><li>当材质取消Render After DOF 后，镜头远近将影响透明对象的显示，在材质属性Refraction下切换Mode；Index Of Refraction可以等到真实漂亮的折射，Pixel Normal Offset可以纠正相机远近导致材质效果变化较大的问题，但是无法获得折射效果(可能需要配合其他参数实现)。</li></ol><h3 id="MeshDeta-amp-GPU粒子类型"><a href="#MeshDeta-amp-GPU粒子类型" class="headerlink" title="MeshDeta &amp; GPU粒子类型"></a>MeshDeta &amp; GPU粒子类型</h3><ol><li>使用MeshDeta粒子发射类型时，需要将Mesh下的OverrideMaterial勾选，这样才能给发射的Mesh赋予材质。</li><li>当只需要发射一个粒子时，出来需要修改发射率还需要讲Duration的EmitterLoops设置为1，让粒子发射停止循环。</li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ue4 </tag>
            
            <tag> shader </tag>
            
            <tag> 材质 </tag>
            
            <tag> vfx </tag>
            
            <tag> 特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ureal Engine 小技巧合集</title>
      <link href="2021/05/11/%E7%AD%86%E8%A8%98/ue4/Ureal-Engine-%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/"/>
      <url>2021/05/11/%E7%AD%86%E8%A8%98/ue4/Ureal-Engine-%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Ureal-Engine-项目缓存"><a href="#Ureal-Engine-项目缓存" class="headerlink" title="Ureal Engine 项目缓存"></a>Ureal Engine 项目缓存</h2><ol><li>有unreal engine在项目构建过程中会产生大量的cache文件，这些文件对于项目工程来说很重要，适当的安排cache文件夹的位置可以避免项目在迁移时的麻烦；</li><li>cache默认存储在C盘，这样长时间后将会给C盘带来很大的负担，所以可以不定期清理cache文件夹”C:\Users\Administrator\AppData\Local\UnrealEngine\Common\DerivedDataCache”;cache被清理后会导致正在进行的项目已构建的材质灯光等需要重新构建和烘焙；</li></ol><h3 id="更改项目缓存位置为当前项目文件夹"><a href="#更改项目缓存位置为当前项目文件夹" class="headerlink" title="更改项目缓存位置为当前项目文件夹"></a>更改项目缓存位置为当前项目文件夹</h3><ol><li>找到对应引擎版本路径”D:\Program Files\Epic Games\UE_4.24\Engine\Config”下的”BaseEngine.ini”文件；</li><li>使用记事本打开，在编辑栏搜索”[InstalledDerivedDataBackendGraph]”找到这一块中的”</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Local=(<span class="type">Type</span>=FileSystem, ReadOnly=false, Clean=false,Flush=false, PurgeTransient=true, DeleteUnused=true,UnusedFileAge=<span class="number">34</span>, FoldersToClean=-<span class="number">1</span>,Path=<span class="string">&quot;%ENGINEVERSIONAGNOSTICUSERDIR%DerivedDataCache&quot;</span>,EditorOverrideSetting=LocalDerivedDataCache)</span><br></pre></td></tr></table></figure><p>然后将Path=<code>&quot;&quot;</code>引号内容改成<code>&quot;%GAMEDIR%DerivedDataCache&quot;</code>；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Local=(<span class="type">Type</span>=FileSystem, ReadOnly=false, Clean=false,Flush=false, PurgeTransient=true, DeleteUnused=true,UnusedFileAge=<span class="number">34</span>, FoldersToClean=-<span class="number">1</span>,Path=<span class="string">&quot;%GAMEDIR%DerivedDataCache&quot;</span>,EditorOverrideSetting=LocalDerivedDataCache)</span><br></pre></td></tr></table></figure><ol start="3"><li>关掉引擎重新打开即可；此时再次构建项目时，会在项目文件夹根目录多一个名为”DerivedDataCache”的文件夹。</li></ol><blockquote><p>默认变量Path=”%ENGINEVERSIONAGNOSTICUSERDIR%DerivedDataCache”；新变量Path=”%GAMEDIR%DerivedDataCache”。</p></blockquote><h2 id="Unreal-Engine-项目迁移"><a href="#Unreal-Engine-项目迁移" class="headerlink" title="Unreal Engine 项目迁移"></a>Unreal Engine 项目迁移</h2><ol><li>临时拷贝：<br>需要将项目临时带到别的电脑上作业时，可以将工程文件夹中除了Intermediate和Saved文件夹外整体打包进行压缩后拷贝到移动硬盘。</li><li>文件迁移：<br>首先在UE4资源管理其中选中要迁移的目标，右键选择迁移；然后选择迁移目标工程的Content文件夹即可。</li></ol><h2 id="UE4程序闪退常见的几大原因"><a href="#UE4程序闪退常见的几大原因" class="headerlink" title="UE4程序闪退常见的几大原因"></a>UE4程序闪退常见的几大原因</h2><ol><li>系统版本老旧</li><li>显卡驱动老旧</li><li>缺失游戏运行库</li><li>硬件不兼容(老硬件)</li><li>检查工程代码、素材</li><li>关闭全屏</li></ol><h2 id="Unreal-Engine-工程文件结构"><a href="#Unreal-Engine-工程文件结构" class="headerlink" title="Unreal Engine 工程文件结构"></a>Unreal Engine 工程文件结构</h2><p>工程文件夹结构:</p><ol><li><code>Config</code> 包含了项目设置，键盘输入子类的配置文件</li><li><code>Content</code> 存放工程文件的内容，包括模型、材质、代码、蓝图等</li><li><code>Intermediate</code> 包含了在编译引擎或游戏时生成的临时文件</li><li><code>Saved</code> 包含自动保存的内容、配置文件以及日志文件</li><li><code>xxx.uproject</code> 项目启动程序，用来打开工程项目</li><li><code>DerivedDataCache</code> 如果引擎的缓存变量修改成”%GAMEDIR%DerivedDataCache”那么就会在项目文件夹下生成该文件夹</li></ol>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ue4 </tag>
            
            <tag> cache </tag>
            
            <tag> 迁移 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houdini湖边小屋</title>
      <link href="2021/05/10/%E7%AD%86%E8%A8%98/houdini/Houdini%E6%B9%96%E8%BE%B9%E5%B0%8F%E5%B1%8B/"/>
      <url>2021/05/10/%E7%AD%86%E8%A8%98/houdini/Houdini%E6%B9%96%E8%BE%B9%E5%B0%8F%E5%B1%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Houdini四元数(花开)</title>
      <link href="2021/05/08/%E7%AD%86%E8%A8%98/houdini/Houdini%E5%9B%9B%E5%85%83%E6%95%B0-%E8%8A%B1%E5%BC%80/"/>
      <url>2021/05/08/%E7%AD%86%E8%A8%98/houdini/Houdini%E5%9B%9B%E5%85%83%E6%95%B0-%E8%8A%B1%E5%BC%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> 四元数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络教程网盘资源</title>
      <link href="2021/04/28/%E8%B5%84%E6%BA%90/%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/"/>
      <url>2021/04/28/%E8%B5%84%E6%BA%90/%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<!-- VFXFORCE110期 --><p><a href="https://pan.baidu.com/s/1Z2aIFbPyC-lPKU2DNKcynw"><img src="https://ftp.bmp.ovh/imgs/2021/04/ba21b1928fcb15f5.jpg" alt="Houdini到UnrealEngine地形教程" title="VFXFORCE110期"></a></p><!-- VFXFORCE117期 --><p><a href="https://pan.baidu.com/s/1U8w8OvRbsRk1aVlJQ_7z3g"><img src="https://ftp.bmp.ovh/imgs/2021/04/ae4eb71afb2a9a26.jpg" alt="Houdini写实小镇" title="VFXFORCE117期"></a></p><!-- VFXFORCE120期 --><p><a href="https://pan.baidu.com/s/1_qeytGNmF0H3Aj4OwCWdrw"><img src="https://ftp.bmp.ovh/imgs/2021/04/52ee5d666af549a5.jpg" alt="HoudiniFlip流体" title="VFXFORCE120期"></a></p><!-- VFXFORCE126期 --><p><a href="https://pan.baidu.com/s/1zaktnc4v2BOpSSDakVjwDg"><img src="https://ftp.bmp.ovh/imgs/2021/04/c8c678c8facf9d18.jpg" alt="HoudiniPDG程序化科幻城市" title="VFXFORCE126期"></a></p><!-- VFXFORCE130期 --><p><a href="https://pan.baidu.com/s/1NeI3Kg9_xq7d33uB-BblBg"><img src="https://ftp.bmp.ovh/imgs/2021/04/89523dd9b52edcbd.jpg" alt="Houdini拉丝火焰" title="VFXFORCE130期"></a></p><!-- VFXFORCE142期 --><p><a href="https://pan.baidu.com/s/1Wa5lClIsDqSMJCO9lqHVRQ"><img src="https://www.picbed.cn/images/2021/04/28/mmexport1619588518527.gif" alt="HoudiniFlip流体" title="VFXFORCE142期"></a></p><!-- VFXFORCE171期 --><p><a href="https://pan.baidu.com/s/1cZOtIBtGA24mZgAahSs9TQ"><img src="https://ftp.bmp.ovh/imgs/2021/04/3a1ed2bd566a249a.jpg" alt="Houdini程序化植物hda" title="VFXFORCE171期"></a></p><hr><!-- AboutCG --><p><a href="https://pan.baidu.com/s/1cmbPj8c3Hkof8NHscig9Ug"><img src="imglink" alt="Unreal Engine 4 零基础美术流程完全手册" title="AboutCG 陶仁贤美术流程"></a></p><p><a href="https://pan.baidu.com/s/17ciQsRQu6d8YRxY7IoSOXw"><img src="imglink" alt="Unreal Engine 4 可视化虚拟现实 全流程" title="AboutCG 陶仁贤虚拟现实"></a></p><p><a href="https://pan.baidu.com/s/1GybEYZUc9e9gu4M2xZ1-vQ"><img src="imglink" alt="Unreal Engine 4 高级材质" title="AboutCG 陶仁贤高级材质"></a></p><p><a href="https://pan.baidu.com/s/1E0Yef1kl650Z8VUxtAqaGA"><img src="imglink" alt="Unreal Engine 4 独立游戏制作&amp;编程教学" title="AboutCG 风之神韵"></a></p><p><a href="https://pan.baidu.com/s/1jvsvZudEHBgaUsbde7bahg"><img src="imglink" alt="Unreal Engine 4 蓝图可视化编程教学 进阶篇" title="AboutCG 风之神韵"></a></p><p><a href="https://pan.baidu.com/s/1JksafCgdhddNyKvXXijE7Q"><img src="imglink" alt="Unreal Engine 4 RPG游戏与特效实战 Path1" title="AboutCG RPG游戏与特效实战"></a></p><p><a href="https://pan.baidu.com/s/1Z6YaZDSX0_NNFQLddjh6gA"><img src="imglink" alt="Unreal Engine 4 RPG游戏与特效实战 Path2" title="AboutCG RPG游戏与特效实战"></a></p><p><a href="https://pan.baidu.com/s/1DlkktjVqtLjpZp6AxOBsrA"><img src="imglink" alt="Unreal Engine 4 VR交互虚拟漫游" title="AboutCG 罗龙"></a></p><p><a href="https://pan.baidu.com/s/1UltnYV9eXjCN_3YJPWLIfA"><img src="imglink" alt="Unreal Engine 4 次时代和VR游戏特效高级课程第一期" title="AboutCG 月神一期"></a></p><p><a href="https://pan.baidu.com/s/1fLc7QxIBrnQNWfNMEw2Mfw"><img src="imglink" alt="Unreal Engine 4 次时代和VR游戏特效高级课程第二期" title="AboutCG 月神二期"></a></p><p><a href="https://pan.baidu.com/s/1nDy9JREt7Es4EA8WlJhy8Q"><img src="imglink" alt="Maya 特效三部曲" title="AboutCG N大教程"></a></p><p><a href="https://pan.baidu.com/s/1urO7Oq84ibvvtDTeLWekbQ"><img src="imglink" alt="剑圣 次时代模型全流程" title="AboutCG 剑圣"></a></p><!-- 翼虎网 --><p><a href="https://pan.baidu.com/s/1LeTb3c-Mne-EFf-ynRVUVw"><img src="imglink" alt="Unreal Engine 4 ARPG手游 无尽之剑" title="YIHU 无尽之剑"></a></p><p><a href="https://pan.baidu.com/s/1XQKOBRm0XpDDHKj-Y02BTw"><img src="imglink" alt="Unreal Engine 4 大型开放世界" title="YIHU 开放世界"></a></p><p><a href="https://pan.baidu.com/s/1iIxOEhxmBlfRhDzAN5qV3Q"><img src="imglink" alt="Unreal Engine 4 CG场景特训营" title="YIHU CG场景特训营"></a></p><p><a href="https://pan.baidu.com/s/1e88v0Y06VmxW0GnWUrljEw"><img src="imglink" alt="Unreal Engine 4 奇幻游戏场景" title="YIHU 奇幻游戏场景"></a></p><p><a href="https://pan.baidu.com/s/17ysaPlLas3M_fnCGHD_8UA"><img src="https://ftp.bmp.ovh/imgs/2021/04/3a1ed2bd566a249a.jpg" alt="Unreal Engine 4 资源库" title="Unreal Engine 素材库"></a></p><p><a href="https://pan.baidu.com/s/12MKigcBuVj9VYN6pcj3fsg"><img src="https://ftp.bmp.ovh/imgs/2021/04/3a1ed2bd566a249a.jpg" alt="Houdini 资源库" title="Houdini 素材库"></a></p>]]></content>
      
      
      <categories>
          
          <category> links </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Houdini </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houdini Particle Trail</title>
      <link href="2020/12/14/%E7%AD%86%E8%A8%98/houdini/Houdini-Particle-Trail/"/>
      <url>2020/12/14/%E7%AD%86%E8%A8%98/houdini/Houdini-Particle-Trail/</url>
      
        <content type="html"><![CDATA[<h2 id="Houdini-粒子路徑運動"><a href="#Houdini-粒子路徑運動" class="headerlink" title="Houdini 粒子路徑運動"></a>Houdini 粒子路徑運動</h2>]]></content>
      
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> trail </tag>
            
            <tag> particle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smoke Pump</title>
      <link href="2020/10/11/%E7%AD%86%E8%A8%98/houdini/Smoke-Pump/"/>
      <url>2020/10/11/%E7%AD%86%E8%A8%98/houdini/Smoke-Pump/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Arch安装</title>
      <link href="2020/10/11/%E7%AD%86%E8%A8%98/linux/Arch/"/>
      <url>2020/10/11/%E7%AD%86%E8%A8%98/linux/Arch/</url>
      
        <content type="html"><![CDATA[<h2 id="ArchLinux-系统安装"><a href="#ArchLinux-系统安装" class="headerlink" title="ArchLinux 系统安装"></a>ArchLinux 系统安装</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>开启电脑EFI启动支持(根据电脑情况选择系统启动方式)<br>ArchLinux系统U盘</p><h3 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ip link                     <span class="meta"># 查看网卡</span></span><br><span class="line">ip link <span class="keyword">set</span> enp0s3 up       <span class="meta"># 启用网卡</span></span><br><span class="line">dhcpcd &amp;                    <span class="meta"># dhcpcs 自动分配ip &amp;后台运行</span></span><br><span class="line">wpa_passphrase Wifi passwd</span><br><span class="line"><span class="built_in">ping</span> baidu.com              <span class="meta"># 检查一下是否可用</span></span><br></pre></td></tr></table></figure><h4 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h4><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">timedatectl</span> <span class="built_in">set-ntp</span> <span class="string">true</span>        <span class="comment"># 设置时间</span></span><br></pre></td></tr></table></figure><h3 id="修改pacman镜像源"><a href="#修改pacman镜像源" class="headerlink" title="修改pacman镜像源"></a>修改pacman镜像源</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>pacman.conf            <span class="comment"># 查看U盘/安装盘系统的pacman源配置</span></span><br><span class="line">vim <span class="regexp">/etc/</span>pacman.d/mirrorlist    <span class="comment"># 编辑镜像源，在文件最开始添加阿里源(超级快)</span></span><br><span class="line">&gt;  Server = http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/archlinux/</span><span class="variable">$repo</span><span class="regexp">/os/</span><span class="variable">$arch</span>      <span class="comment"># 阿里源</span></span><br><span class="line">&gt;  Server = https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/manjaro/</span>stable<span class="regexp">/$repo/</span><span class="variable">$arch</span> <span class="comment"># 清华源</span></span><br></pre></td></tr></table></figure><h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><p>分区</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fdisk</span> -l                    <span class="comment"># 查看当前系统的磁盘</span></span><br><span class="line">cfdisk                      <span class="comment"># 使用方向键和回车选择分区功能</span></span><br><span class="line"><span class="comment">#EFI / swap home opt  比较常用的几个分区，EFI / swap 这三个是必须的</span></span><br></pre></td></tr></table></figure><p>格式化</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F32 <span class="regexp">/dev/</span>sda1     <span class="comment"># 格式化EFI引导分区</span></span><br><span class="line">mkswap -f <span class="regexp">/dev/</span>sda2         <span class="comment"># 格式化虚拟内存</span></span><br><span class="line">mkfs.ext4 <span class="regexp">/dev/</span>sda3         <span class="comment"># 格式化系统分区</span></span><br></pre></td></tr></table></figure><p>打开虚拟内存</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon <span class="regexp">/dev/</span>sda2            <span class="comment"># 打开/启用虚拟内存</span></span><br></pre></td></tr></table></figure><p>挂载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount <span class="regexp">/dev/</span>sda3 <span class="regexp">/mnt            # 挂在系统根目录到U盘/</span>安装盘的/mnt上</span><br><span class="line">mkdir -p <span class="regexp">/mnt/</span>boot/efi          <span class="comment"># 创建引导分区的挂载目录</span></span><br><span class="line">mount <span class="regexp">/dev/</span>sda1 <span class="regexp">/mnt/</span>boot/efi   <span class="comment"># 挂载引导分区</span></span><br></pre></td></tr></table></figure><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><p>系统核心部件安装</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt <span class="keyword">base</span> linux linux-firmware             <span class="meta"># 将系统安装到/mnt下</span></span><br><span class="line">pacstrap <span class="keyword">base</span>-devel neovim dhcpcd NetworkManager    <span class="meta"># 可选安装(开发工具包)、文本编辑器、网络链接工具</span></span><br></pre></td></tr></table></figure><p>生成系统挂载文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U <span class="regexp">/mnt &gt;&gt; /m</span>nt<span class="regexp">/etc/</span>fstab          <span class="comment"># 将系统挂载磁盘信息写入到fstab中</span></span><br><span class="line">cat <span class="regexp">/mnt/</span>etc/fstab                          <span class="comment"># 检查是否成功生成</span></span><br></pre></td></tr></table></figure><p>时区配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot <span class="regexp">/mnt                            # 使用这个命令进入安装在/m</span>nt的系统</span><br><span class="line">ln -sf <span class="regexp">/usr/</span>share<span class="regexp">/zoneinfo/</span>Asia<span class="regexp">/Shanghai /</span>etc/localtime <span class="comment"># 绑定时区</span></span><br><span class="line">hwclock --systohc                           <span class="comment"># 设置时间</span></span><br></pre></td></tr></table></figure><p>配置语言</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span>                                        <span class="comment"># 退出新系统，回到U盘系统(因为新系统没有编辑器，需要退出到U盘系统来修改配置文件)</span></span><br><span class="line">vim <span class="regexp">/mnt/</span>etc/locale.gen                     <span class="comment"># 找到zh_CN.UTF-8 UTF-8取消注释;如果需要英文就注释 en_US.UTF-8 UTF-8 取消注释</span></span><br><span class="line">arch-chroot /mnt                            <span class="comment"># 再次进入新系统</span></span><br><span class="line">locale-gen                                  <span class="comment"># 生成语言编码</span></span><br><span class="line"><span class="keyword">exit</span>                                        <span class="comment"># 再次退出</span></span><br><span class="line">vim <span class="regexp">/mnt/</span>etc/locale.conf                    <span class="comment"># 配置添加字符集 LANG=en_US.UTF_8</span></span><br><span class="line">vim <span class="regexp">/mnt/</span>etc/hostname                       <span class="comment"># 计算机名archlinux</span></span><br><span class="line">vim <span class="regexp">/mnt/</span>etc/host                           <span class="comment"># 添加以下内容</span></span><br><span class="line"><span class="comment"># 127.0.0.1 localhost</span></span><br><span class="line"><span class="comment"># ::1       localhost</span></span><br><span class="line"><span class="comment"># 127.0.0.1 archlinux.localdoamin archlinux # 这里的archlinux改为你的计算机名(pc name)</span></span><br></pre></td></tr></table></figure><h3 id="引导安装"><a href="#引导安装" class="headerlink" title="引导安装"></a>引导安装</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot <span class="string">/mnt</span>                                <span class="comment"># 进入系统</span></span><br><span class="line">pacman -S grub efibootmgr intel-ucode os-prober <span class="comment"># 安装引导包</span></span><br><span class="line">grub-install <span class="params">--target=x86_64-efi</span> <span class="params">--efi-directory=/boot</span> <span class="params">--bootloader-id=Arch</span> <span class="comment"># 安装引导到引导盘</span></span><br><span class="line"><span class="comment"># EFI引导安装需要电脑支持EFI引导</span></span><br><span class="line"><span class="comment"># 安装系统前设置bioss仅支持EFI，减少出错的概率</span></span><br><span class="line"><span class="comment"># 如果出现这一步无法安装，退出安装后设置bioss再进来挂载系统再次尝试</span></span><br><span class="line">mkdir <span class="string">/boot/grub</span>                                <span class="comment"># 创建一个引导配置文件存放文件夹</span></span><br><span class="line">grub-mkconfig -o <span class="string">/boot/grub/grub.cfg</span>            <span class="comment"># 生成引导配置</span></span><br></pre></td></tr></table></figure><h3 id="安装系统必要软件"><a href="#安装系统必要软件" class="headerlink" title="安装系统必要软件"></a>安装系统必要软件</h3><p>网络连接组件是一定要装的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dhcpcd wpa_supplicant sudo   <span class="meta"># 必装(网络连接组件和sudo)</span></span><br><span class="line">sudo pacman -S <span class="keyword">base</span>-devel neovim fish       <span class="meta"># base-devel必装，选装文本编辑器等</span></span><br></pre></td></tr></table></figure><h3 id="配置用户和密码"><a href="#配置用户和密码" class="headerlink" title="配置用户和密码"></a>配置用户和密码</h3><p>添加用户</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">useradd</span> -m main                         <span class="comment"># 创建用户</span></span><br><span class="line">passwd main                             <span class="comment"># 设置用户密码/顺便设置root的密码</span></span><br></pre></td></tr></table></figure><p>用户权限配置</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim /etc/sudoer                        # 在root <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) <span class="keyword">ALL</span> 下添加</span><br></pre></td></tr></table></figure><h2 id="DWM桌面环境配置"><a href="#DWM桌面环境配置" class="headerlink" title="DWM桌面环境配置"></a>DWM桌面环境配置</h2><p>安装xorg显示服务器</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S <span class="keyword">xorg-server </span><span class="keyword">xorg-apps </span><span class="keyword">xorg-xinit</span></span><br></pre></td></tr></table></figure><h3 id="安装显示管理器"><a href="#安装显示管理器" class="headerlink" title="安装显示管理器"></a>安装显示管理器</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings</span></span><br></pre></td></tr></table></figure><h3 id="安装终端浏览器"><a href="#安装终端浏览器" class="headerlink" title="安装终端浏览器"></a>安装终端浏览器</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S w3m                      <span class="meta"># 终端浏览器</span></span><br><span class="line">w3m suckless<span class="meta">.org</span>                        <span class="meta"># 使用w3m浏览dwm官网下载dwm</span></span><br><span class="line"><span class="meta"># tab 加 方向键移动光标到Downd按钮回车进入，分别下载dwm、dmenu、st这三个包</span></span><br><span class="line"><span class="meta"># 找到后按回车就可以下载了，下载完成后按q退出w3m</span></span><br></pre></td></tr></table></figure><h3 id="安装dwm"><a href="#安装dwm" class="headerlink" title="安装dwm"></a>安装dwm</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mkdir</span> -p ~/.local/applicaions/dwm       # 创建一个放置程序源码的地方</span><br><span class="line"><span class="attribute">mv</span> dmenu-<span class="number">5</span>.<span class="number">0</span>.tar.gz dwm-<span class="number">6</span>.<span class="number">2</span>.tar.gz st-<span class="number">0</span>.<span class="number">8</span>.tar.gz st-<span class="number">0</span>.<span class="number">8</span>.<span class="number">4</span>.tar.gz ~/.local/applicaions/dwm</span><br><span class="line"><span class="attribute">tar</span> zxvf dmenu-<span class="number">5</span>.<span class="number">0</span>.tar.gz               # 依次解压</span><br><span class="line"><span class="attribute">make</span>                                    # 依次编译</span><br><span class="line"><span class="attribute">sudo</span> make install                       # 依次编译安装</span><br></pre></td></tr></table></figure><p>这里注意，如果前面安装系统时没有安装base-devel包会出现编译失败的情况，可以安装这个包后再编译即可</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S <span class="keyword">base</span>-devel</span><br></pre></td></tr></table></figure><h4 id="dwm补丁"><a href="#dwm补丁" class="headerlink" title="dwm补丁"></a>dwm补丁</h4><h3 id="分辨率设置"><a href="#分辨率设置" class="headerlink" title="分辨率设置"></a>分辨率设置</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">xrandr</span></span><br><span class="line"><span class="attribute">cvt</span> <span class="number">1920</span> <span class="number">1080</span> <span class="number">58</span></span><br><span class="line"><span class="attribute">xrandr</span> --newmode <span class="string">&quot;1920x1080_58.00&quot;</span> <span class="number">166</span>.<span class="number">00</span> <span class="number">1920</span> <span class="number">2040</span> <span class="number">2240</span> <span class="number">2560</span> <span class="number">1080</span> <span class="number">1083</span> <span class="number">1088</span> <span class="number">1119</span> -hsync +xsync</span><br><span class="line"><span class="attribute">xrandr</span> --addmode Virtual-<span class="number">1</span> <span class="string">&quot;1920x1080_58.00&quot;</span></span><br><span class="line"><span class="attribute">xrandr</span> --output Virtua-<span class="number">1</span> --mode <span class="string">&quot;1920x1080_58.00&quot;</span></span><br></pre></td></tr></table></figure><p>将这些设置写在~.xinitrc中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Display</span></span><br><span class="line"><span class="attribute">xrandr</span> --newmode <span class="string">&quot;1920x1080_58.00&quot;</span> <span class="number">166</span>.<span class="number">00</span> <span class="number">1920</span> <span class="number">2040</span> <span class="number">2240</span> <span class="number">2560</span> <span class="number">1080</span> <span class="number">1083</span> <span class="number">1088</span> <span class="number">1119</span> -hsync +xsync</span><br><span class="line"><span class="attribute">xrandr</span> --addmode Virtual-<span class="number">1</span> <span class="string">&quot;1920x1080_58.00&quot;</span></span><br><span class="line"><span class="attribute">xrandr</span> --output Virtua-<span class="number">1</span> --mode <span class="string">&quot;1920x1080_58.00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start DWM</span></span><br><span class="line"><span class="attribute">exec</span> dwm</span><br></pre></td></tr></table></figure><h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3><p>安装字体</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S noto-<span class="built_in">fonts</span>-cjk</span><br><span class="line">sudo pacman -S Source <span class="built_in">Code</span> Pro</span><br><span class="line">sudo pacman -S wqy-zenhei</span><br></pre></td></tr></table></figure><p>字体修改都在源码中修改，修改完成后重新构建安装，完成修改</p><h3 id="fcitx5输入法安装"><a href="#fcitx5输入法安装" class="headerlink" title="fcitx5输入法安装"></a>fcitx5输入法安装</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -S fcitx<span class="number">5</span>-im fcitx<span class="number">5</span>-rime fcitx<span class="number">5</span>-chewing fcitx<span class="number">5</span>-chinese-addons fcitx<span class="number">5</span>-material-color fcitx<span class="number">5</span>-configtool</span><br></pre></td></tr></table></figure><p>添加环境变量到 ~.xinitrc</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fcitx5</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GTK_IM_MODULE</span>=fcitx5</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">QT_IM_MODULE</span>=fcitx5</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">XMODIFIERS</span>=@im=fcitx5</span><br></pre></td></tr></table></figure><p>添加pinyin输入法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcitx5-configtool</span><br></pre></td></tr></table></figure><p>为dwm添加托盘显示补丁systray<br>在官网patches下找到systray下载最新的补丁程序<br>将补丁程序放在dwm源码根目录下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#patch &lt; 补丁名</span></span><br><span class="line"><span class="attribute">patch</span> &lt; dwm-systray-<span class="number">6</span>.<span class="number">2</span>.diff</span><br></pre></td></tr></table></figure><h3 id="rime输入法安装"><a href="#rime输入法安装" class="headerlink" title="rime输入法安装"></a>rime输入法安装</h3><p>基于fcitx5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcitx5-rime</span><br></pre></td></tr></table></figure><p>基于ibus</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ibus-rime</span></span><br></pre></td></tr></table></figure><h2 id="添加ArchlinuxCN源"><a href="#添加ArchlinuxCN源" class="headerlink" title="添加ArchlinuxCN源"></a>添加ArchlinuxCN源</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo nvim <span class="regexp">/etc/</span>pacman.conf                          <span class="comment"># 添加源到配置文件</span></span><br><span class="line"><span class="comment"># [archlinuxcn]</span></span><br><span class="line"><span class="comment"># SigLevel = Optional TrustAll</span></span><br><span class="line"><span class="comment"># Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span></span><br><span class="line"></span><br><span class="line">sudo pacman -Sy                                     <span class="comment"># 更新源</span></span><br><span class="line">sudo pacman -S archlinuxcn-keyring                  <span class="comment"># 导入GPG key</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1aE411g7Fy?from=search&seid=17589355508219710505">参考</a><br><a href="https://github.com/denstiny/Gnglas/tree/master/my_i3">参考</a><br><a href="https://github.com/Wjinlei">参考-Wjinlei</a><br><a href="https://github.com/matteoZgh">参考-matteoZgh</a><br><a href="https://www.nerdfonts.com/cheat-sheet">参考-nerdfonts</a><br><a href="https://fontawesome.com/cheatsheet">fontawesome</a></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch </tag>
            
            <tag> i3 </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu</title>
      <link href="2020/10/11/%E7%AD%86%E8%A8%98/linux/Ubuntu%E5%A3%81%E7%BA%B8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2/"/>
      <url>2020/10/11/%E7%AD%86%E8%A8%98/linux/Ubuntu%E5%A3%81%E7%BA%B8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="Ubuntu下批量壁纸自动更新的方法"><a href="#Ubuntu下批量壁纸自动更新的方法" class="headerlink" title="Ubuntu下批量壁纸自动更新的方法"></a>Ubuntu下批量壁纸自动更新的方法</h3><p>要在ubuntu上实现壁纸的动态更换，首先要记住两个路径下的文件<br><code>/usr/share/backgrounds</code> 这里是系统存放壁纸和壁纸动态更换脚本的地方,脚本在contest下，以.xml结尾的就是控制播放的脚本了;</p><p><code>/usr/share/gnome-background-properties</code> 这里的.xml和/usr/share/backgrounds/contest/下的mxl不同;这里的.xml文件是实现壁纸在系统设置中呈现，并加载动态更换脚本的;</p><p>/usr/share/backgrounds/contest/groovy.xml文件原始内容如下(仅用做参考和备份)，不对这个文件做修改</p><h3 id="下载壁纸"><a href="#下载壁纸" class="headerlink" title="下载壁纸"></a>下载壁纸</h3><p>直接贴<a href="https://www.zhihu.com/question/32762402">大佬分享的帖子</a>🐶</p><h3 id="Python批量下载壁纸"><a href="#Python批量下载壁纸" class="headerlink" title="Python批量下载壁纸"></a>Python批量下载壁纸</h3><p>待续….</p><h3 id="生成控制更换xml文件脚本"><a href="#生成控制更换xml文件脚本" class="headerlink" title="生成控制更换xml文件脚本"></a>生成控制更换xml文件脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">path=/mnt/User/Users/Administrator/Pictures/wallpaper-01</span><br><span class="line">files=`ls -U ./ | grep <span class="string">&#x27;[np]g$&#x27;</span>`</span><br><span class="line">last_file=<span class="string">&#x27;empty&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;background&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;  &lt;starttime&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;    &lt;year&gt;2020&lt;/year&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;    &lt;month&gt;11&lt;/month&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;    &lt;day&gt;4&lt;/day&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;    &lt;hour&gt;00&lt;/hour&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;    &lt;minute&gt;00&lt;/minute&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;    &lt;second&gt;00&lt;/second&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;  &lt;/starttime&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;  &lt;!-- This animation will start at midnight. --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> current_file <span class="keyword">in</span> <span class="variable">$files</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$last_file</span> == <span class="string">&#x27;empty&#x27;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        last_file=<span class="variable">$current_file</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;  &lt;static&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;    &lt;duration&gt;600.0&lt;/duration&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&quot;    &lt;file&gt;<span class="variable">$path</span>/<span class="variable">$last_file</span>&lt;/file&gt;&quot;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;  &lt;/static&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;  &lt;transition&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;    &lt;duration&gt;5.0&lt;/duration&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&quot;    &lt;from&gt;<span class="variable">$path</span>/<span class="variable">$last_file</span>&lt;/from&gt;&quot;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&quot;    &lt;to&gt;<span class="variable">$path</span>/<span class="variable">$current_file</span>&lt;/to&gt;&quot;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;  &lt;/transition&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;  &lt;static&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;    &lt;duration&gt;600.0&lt;/duration&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&quot;    &lt;file&gt;<span class="variable">$path</span>/<span class="variable">$current_file</span>&lt;/file&gt;&quot;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;  &lt;/static&gt;&#x27;</span></span><br><span class="line">        last_file=<span class="variable">$current_file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/background&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方法说明</span></span><br><span class="line"><span class="comment"># 新建一个文件.xml在图片目录下</span></span><br><span class="line"><span class="comment"># 执行这个脚本 ./backgrounds.sh&gt;xxx.xml 完整图片目录的填写</span></span><br></pre></td></tr></table></figure><h3 id="生成系统壁纸显示列表xml文件脚本"><a href="#生成系统壁纸显示列表xml文件脚本" class="headerlink" title="生成系统壁纸显示列表xml文件脚本"></a>生成系统壁纸显示列表xml文件脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">path = `<span class="built_in">pwd</span>`     <span class="comment"># 设置操作文件的目录地址，这里将图片放在了/usr/share/backgrounds下的Black文件夹里</span></span><br><span class="line"></span><br><span class="line">files=`ls -U ./ | grep <span class="string">&#x27;[np]g$&#x27;</span>`                <span class="comment"># 匹配以pg和ng结尾的文件</span></span><br><span class="line">last_file=<span class="string">&#x27;empty&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;!DOCTYPE wallpapers SYSTEM &quot;gnome-wp-list.dtd&quot;&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;wallpapers&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27; &lt;wallpaper deleted=&quot;false&quot;&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;   &lt;name&gt;Ubuntu 20.10 Community Wallpapers&lt;/name&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;   &lt;filename&gt;&#x27;</span>`<span class="built_in">pwd</span>`<span class="string">&#x27;/xxx.xml&lt;/filename&gt;&#x27;</span>  <span class="comment"># 这个文件指向控制文件xml</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;   &lt;options&gt;zoom&lt;/options&gt;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27; &lt;/wallpaper&gt;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> current_file <span class="keyword">in</span> <span class="variable">$files</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$last_file</span> == <span class="string">&#x27;empty&#x27;</span>]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        last_file=<span class="variable">$current_file</span></span><br><span class="line">        file_name=<span class="variable">$&#123;last_file##*/&#125;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27; &lt;wallpaper&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&quot;   &lt;name&gt;<span class="variable">$&#123;last_file%.*&#125;</span>&lt;/name&gt;&quot;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;   &lt;name xml:lang=&quot;zh_CN&quot;&gt;Ubuntu&lt;/name&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&quot;   &lt;filename&gt;`pwd`/<span class="variable">$last_file</span>&lt;/filename&gt;&quot;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;   &lt;options&gt;zoom&lt;/options&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;   &lt;pcolor&gt;#000000&lt;/pcolor&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;   &lt;scolor&gt;#000000&lt;/scolor&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27;   &lt;shade_type&gt;solid&lt;/shade_type&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">echo</span>    <span class="string">&#x27; &lt;/wallpaper&gt;&#x27;</span></span><br><span class="line">        last_file=<span class="variable">$current_file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;/wallpapers&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方法 `sudo ./test.sh&gt;test.xml` 格式: sudo 脚本路径 &gt; 生成xml路径</span></span><br><span class="line"><span class="comment"># sudo ./black-wallpapers.sh&gt;/usr/share/gnome-background-properties/black-wallpapers.xml</span></span><br></pre></td></tr></table></figure><p>[参考]</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro安装</title>
      <link href="2020/10/11/%E7%AD%86%E8%A8%98/linux/i3wm/"/>
      <url>2020/10/11/%E7%AD%86%E8%A8%98/linux/i3wm/</url>
      
        <content type="html"><![CDATA[<h2 id="系统安装配置"><a href="#系统安装配置" class="headerlink" title="系统安装配置"></a>系统安装配置</h2><p>1.更新国内软件源</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo pacman-mirrors -m rank -c China</span></span><br></pre></td></tr></table></figure><p>2.配置archlinuxcn</p><p>添加以下内容到 /etc/pacman.conf文件最后</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[archlinuxcn]</span></span><br><span class="line"><span class="attr">SigLevel</span> = Optional TrustedOnly</span><br><span class="line"><span class="attr">Server</span> = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>3.更新系统并安装密钥</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syyu &amp;&amp; sudo pacman -S archlinuxcn-keyring</span><br><span class="line"><span class="meta">#sudo pacman -Sy</span></span><br><span class="line"><span class="meta">#sudo pacman -Syyu</span></span><br></pre></td></tr></table></figure><h2 id="Fcitx5安装与配置-中文输入法"><a href="#Fcitx5安装与配置-中文输入法" class="headerlink" title="Fcitx5安装与配置(中文输入法)"></a>Fcitx5安装与配置(中文输入法)</h2><h3 id="安装，以下代码二选一-不折腾推荐第一种"><a href="#安装，以下代码二选一-不折腾推荐第一种" class="headerlink" title="安装，以下代码二选一(不折腾推荐第一种)"></a>安装，以下代码二选一(不折腾推荐第一种)</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -S fcitx<span class="number">5</span> fcitx<span class="number">5</span>-chewing fcitx<span class="number">5</span>-chinese-addons fcitx<span class="number">5</span>-configtool fcitx<span class="number">5</span>-gtk fcitx<span class="number">5</span>-material-color fcitx<span class="number">5</span>-qt fcitx<span class="number">5</span>-pinyin-moegirl fcitx<span class="number">5</span>-pinyin-zhwiki</span><br><span class="line"><span class="comment"># 省事版</span></span><br><span class="line"><span class="attribute">sudo</span> pacman -S fcitx<span class="number">5</span>-git fcitx<span class="number">5</span>-chewing fcitx<span class="number">5</span>-chinese-addons-git fcitx<span class="number">5</span>-gtk-git fcitx<span class="number">5</span>-material-color fcitx<span class="number">5</span>-qt<span class="number">4</span>-git fcitx<span class="number">5</span>-pinyin-moegirl fcitx<span class="number">5</span>-pinyin-zhwiki fcitx<span class="number">5</span>-configtool-git fcitx<span class="number">5</span>-lua-git</span><br><span class="line"><span class="comment"># git 折腾版</span></span><br></pre></td></tr></table></figure><p>上面两端中带-git的最好别混用，混用会使一些不能正常的使用(…..)</p><h4 id="配置fcitx5"><a href="#配置fcitx5" class="headerlink" title="配置fcitx5"></a>配置fcitx5</h4><p>在 ~/.xprofile 文件内添加以下内容(如果该文件不存在，则使用 touch ~/.xprofile 创建)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">WINEARCE</span>=win32               # 来自网络大佬，可以解决终端无法输入文字的问题</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GTK_IM_MODULE</span>=fcitx5</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">QT_IM_MODULE</span>=fcitx5</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">XMODIFIERS</span>=<span class="string">&quot;@im=fcitx5&quot;</span></span><br></pre></td></tr></table></figure><h4 id="字体安装"><a href="#字体安装" class="headerlink" title="字体安装"></a>字体安装</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S noto-<span class="built_in">fonts</span>-cjk adobe-source-han-sans-cn-<span class="built_in">fonts</span> adobe-source-han-serif-cn-<span class="built_in">fonts</span> adobe-source-<span class="built_in">code</span>-pro-<span class="built_in">fonts</span></span><br><span class="line">sudo pacman -S ttf-font-icons ttf-font-awesome</span><br><span class="line">sudo pacman -S powerline powerline-<span class="built_in">fonts</span> powerline-vim</span><br><span class="line"><span class="meta"># 第一行系统中文支持字体</span></span><br><span class="line"><span class="meta"># 第二行i3bar图标支持字体</span></span><br><span class="line"><span class="meta"># 第三行zsh图标支持字体</span></span><br></pre></td></tr></table></figure><h4 id="配置系统字体"><a href="#配置系统字体" class="headerlink" title="配置系统字体"></a>配置系统字体</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano ~<span class="regexp">/.config/</span>fontconfig/fonts.conf</span><br></pre></td></tr></table></figure><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy google-chrome       <span class="comment"># 谷歌浏览器</span></span><br><span class="line">sudo pacman -S typora               <span class="comment"># 笔记神器</span></span><br><span class="line">sudo pacman -S keepassxc            <span class="comment"># 密码管理软件</span></span><br><span class="line">sudo pacman -S netease-<span class="keyword">cloud-music </span> <span class="comment"># 网易云音乐</span></span><br><span class="line">sudo pacman -S <span class="keyword">screenkey </span>           <span class="comment"># 一个可以将当前执行按键打印到屏幕上人的软件(平时用不到)</span></span><br><span class="line">sudo pacman -S kdenlive             <span class="comment"># 开源的视频剪辑软件</span></span><br><span class="line">sudo pacman -S gimp                 <span class="comment"># 一个可以制作矢量图的绘图软件</span></span><br><span class="line">sudo pacman -S libreoffice          <span class="comment"># offoce 有些人的刚需</span></span><br><span class="line">sudo pacman -S vlc                  <span class="comment"># 强大的视频播放器</span></span><br><span class="line">sudo pacman -S virtualbox           <span class="comment"># 虚拟机使用爱好者</span></span><br><span class="line">sudo pacman -S deepin.com.qq.im     <span class="comment"># deepin的qq,前提是前面配置了archlinuxcn</span></span><br><span class="line">sudo pacman -S electronic-wechat    <span class="comment"># linux微信</span></span><br><span class="line">sudo pacman -S qbittorrent          <span class="comment"># 下载工具软件</span></span><br><span class="line">sudo pacman -S transmission-qt      <span class="comment"># 下载工具软件transmission-gtk</span></span><br><span class="line">sudo pacman -S ranger               <span class="comment"># 文件管理器</span></span><br><span class="line">sudo pacman -S steam                <span class="comment"># 游戏</span></span><br><span class="line">sudo pacman -S fzf                  <span class="comment"># 终端搜索文件</span></span><br></pre></td></tr></table></figure><h2 id="硬盘挂载"><a href="#硬盘挂载" class="headerlink" title="硬盘挂载"></a>硬盘挂载</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">blkid </span>                         <span class="comment"># 获取磁盘uuid磁盘类型等信息</span></span><br></pre></td></tr></table></figure><p>将得到的信息按照以下格式,添加/修改 /etc/fstab文件进行磁盘的挂载</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;file system&gt;             &lt;mount point&gt;  &lt;type&gt;  &lt;options&gt;  &lt;dump&gt;  &lt;pass&gt;</span></span><br><span class="line"><span class="attribute">UUID</span>=b<span class="number">351246</span>c-<span class="number">0652</span>-<span class="number">430</span>e-<span class="number">98</span>ab-<span class="number">3</span>d<span class="number">65</span>d<span class="number">53981</span>fc /              ext<span class="number">4</span>    defaults,noatime <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">UUID</span>=<span class="number">0</span>b<span class="number">616041</span>-f<span class="number">450</span>-<span class="number">44</span>ea-af<span class="number">6</span>e-<span class="number">95</span>d<span class="number">027</span>f<span class="number">8</span>da<span class="number">7</span>b /opt           ext<span class="number">4</span>    defaults,noatime <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">UUID</span>=<span class="number">8</span>ceec<span class="number">14</span>d-<span class="number">3</span>ee<span class="number">1</span>-<span class="number">48</span>cb-<span class="number">9679</span>-<span class="number">58</span>d<span class="number">843793</span>b<span class="number">5</span>a /home          ext<span class="number">4</span>    defaults,noatime <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 以上这些挂载到 / 、 /opt 、/home 的盘千万别动</span></span><br></pre></td></tr></table></figure><p>使用磁盘管理用具获取要挂载磁盘的uuid或者使用以下代码获取指定盘的uuid</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l                    <span class="comment"># 获取磁盘列表(sudo)</span></span><br><span class="line">mount <span class="regexp">/dev/</span>sda1 <span class="regexp">/mnt/</span>pc01   <span class="comment"># 挂载硬盘sda1到/mnt/pc01</span></span><br><span class="line">ls -l <span class="regexp">/dev/</span>disk<span class="regexp">/by-uuid     # ls -l 磁盘路径/</span>byuuid 获取磁盘的uuid(ls -l 磁盘路径,可获得更多的使用方法)</span><br></pre></td></tr></table></figure><p>把获得的磁盘参数写到 /etc/fstab 的最后，格式如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">UUID</span>=<span class="number">0</span>A<span class="number">9</span>AD<span class="number">66165</span>F<span class="number">33762</span> /mnt/project ntfs defaults <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">UUID</span>=<span class="number">462</span>E<span class="number">0</span>E<span class="number">842</span>E<span class="number">0</span>E<span class="number">6</span>D<span class="number">6</span>D /mnt/assets ntfs defaults <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">UUID</span>=<span class="number">8909</span>b<span class="number">9</span>af-a<span class="number">192</span>-<span class="number">4539</span>-a<span class="number">5</span>e<span class="number">9</span>-<span class="number">12</span>d<span class="number">3</span>d<span class="number">4</span>d<span class="number">1857</span>e /mnt/work ntfs defaults <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="I3安装与配置"><a href="#I3安装与配置" class="headerlink" title="I3安装与配置"></a>I3安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -S i3   <span class="comment"># 直接回车(我全都要)</span></span><br></pre></td></tr></table></figure><p>使用命令终端安装,配置文件位置一般在 $HOME/.config/i3/config，如果使用包管理器安装可能会在$HOME/.i3/config ;实际位置会因为使用的发行版不同而略有出入。</p><h4 id="插件与配置"><a href="#插件与配置" class="headerlink" title="插件与配置"></a>插件与配置</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S i3status polybar ranger tmux variety rofi compton    <span class="comment"># picom  compton</span></span><br><span class="line">sudo pacman -S highlight atool w3m poppler mediainfo                <span class="comment"># ranger实用插件</span></span><br><span class="line">exec_always <span class="params">--no-startup-id</span> xranr <span class="params">--output</span> HDMI-0 <span class="params">--mode</span> 1920x1080 <span class="comment">#每次重载i3设置屏幕HDMI-0的分辨率</span></span><br><span class="line">exec_always <span class="params">--no-startup-id</span> $HOME/<span class="string">.config/polybar/launch.sh</span> <span class="comment">#启动polybar</span></span><br><span class="line">exec_always <span class="params">--no-startup-id</span> fcitx5 <span class="comment">#启动输入法</span></span><br><span class="line">exec <span class="params">--no-startup-id</span> variety <span class="comment">#启动variety壁纸插件</span></span><br><span class="line">exec <span class="params">--no-startup-id</span> rofi <span class="comment">#启动rofi程序启动器</span></span><br></pre></td></tr></table></figure><h4 id="variety-reh壁纸软件"><a href="#variety-reh壁纸软件" class="headerlink" title="variety/reh壁纸软件"></a>variety/reh壁纸软件</h4><p>安装任意一个，前者设置比较简单，后者可以代码自定义，也许拓展性更强吧</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">exec_always</span> --<span class="comment">no</span><span class="literal">-</span><span class="comment">startup</span><span class="literal">-</span><span class="comment">id</span> <span class="comment">feh</span> --<span class="comment">randomize</span> --<span class="comment">bg</span><span class="literal">-</span><span class="comment">fill</span> <span class="comment">~/图片/*</span></span><br></pre></td></tr></table></figure><h4 id="rofi程序启动器"><a href="#rofi程序启动器" class="headerlink" title="rofi程序启动器"></a>rofi程序启动器</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S rofi rofi-script             <span class="comment"># 安装</span></span><br><span class="line">mkdir -p ~<span class="regexp">/.config/</span>rofi                     <span class="comment"># 创建配置文件</span></span><br><span class="line">rofi -dump-config &gt; ~<span class="regexp">/.config/</span>rofi/config   <span class="comment"># 生成配置文件</span></span><br></pre></td></tr></table></figure><p>然后在~.config/i3/config里添加下面的启动配置代码</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym $mod+d <span class="built_in">exec</span> rofi -<span class="keyword">show</span> <span class="keyword">run</span> -theme Arc-Dark <span class="meta">#所有支持的主题在  路径下</span></span><br></pre></td></tr></table></figure><h4 id="ranger-文件管理软件"><a href="#ranger-文件管理软件" class="headerlink" title="ranger 文件管理软件"></a>ranger 文件管理软件</h4><p>功能丰富，用法快捷键较多，需要熟练</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ranger --<span class="keyword">copy</span><span class="bash">-config=all  <span class="comment">#生成配置文件</span></span></span><br></pre></td></tr></table></figure><p>它的常用插件：highlight 代码高亮、atool存档预览、w3m html文件预览、poppler pdf文件预览、mediainfo 多媒体文件预览</p><h4 id="alacritty-终端"><a href="#alacritty-终端" class="headerlink" title="alacritty 终端"></a>alacritty 终端</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bindsym $mod+<span class="keyword">Return</span> exec alacritty  <span class="meta"># 注释掉i3配置文件里原本的终端启动添加这一句</span></span><br><span class="line">new_window <span class="number">1</span>pixel                   <span class="meta"># 设置新建窗口的边框为1像素，无边框设置</span></span><br></pre></td></tr></table></figure><h4 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h4><h4 id="picom-程序透明"><a href="#picom-程序透明" class="headerlink" title="picom 程序透明"></a>picom 程序透明</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S picom                        <span class="comment"># 安装</span></span><br><span class="line">cp <span class="regexp">/etc/</span>xdg<span class="regexp">/picom.conf ~/</span>.config/           <span class="comment"># 复制默认的配置文件</span></span><br><span class="line">sudo chown  ~<span class="regexp">/.config/</span>picom.conf            <span class="comment"># 赋予修改权限</span></span><br><span class="line">exec_always --no-startup-id picom           <span class="comment"># 添加到~/.config/i3/config</span></span><br></pre></td></tr></table></figure><p>修改~/.config/picom.conf配置文件<br><a href="https://wiki.archlinux.org/index.php/Picom_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#">picom wiki</a></p><h4 id="pacmixer-音频音量控制"><a href="#pacmixer-音频音量控制" class="headerlink" title="pacmixer 音频音量控制"></a>pacmixer 音频音量控制</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -S pacmixer</span></span><br></pre></td></tr></table></figure><h4 id="安装lxappearance美化系统主题图标"><a href="#安装lxappearance美化系统主题图标" class="headerlink" title="安装lxappearance美化系统主题图标"></a>安装lxappearance美化系统主题图标</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -S lxappearance             <span class="comment"># 安装</span></span><br><span class="line">lxappearance                            <span class="comment"># 执行该指令进行配置</span></span><br></pre></td></tr></table></figure><h4 id="polybar-dock自定义软件"><a href="#polybar-dock自定义软件" class="headerlink" title="polybar dock自定义软件"></a>polybar dock自定义软件</h4><p>时混的强大，但是配置相对麻烦</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S polybar                                  <span class="comment"># 安装</span></span><br><span class="line">mkdir ~<span class="regexp">/.config/</span>polybar                                 <span class="comment"># 创建配置文件夹</span></span><br><span class="line">cp <span class="regexp">/usr/</span>share<span class="regexp">/doc/</span>polybar<span class="regexp">/config ~/</span>.config<span class="regexp">/polybar/</span>     <span class="comment"># 复制官方配置为自己的配置</span></span><br></pre></td></tr></table></figure><p>创建一个启动配置文件launch.sh并写下以下内容，<strong>sudo chmod +x ~/.config/polybar/launch.sh</strong> 赋予执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭若有打开的polybar</span></span><br><span class="line">killall -q polybar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待已经打开的polybar关闭</span></span><br><span class="line"><span class="keyword">while</span> pgrep -u <span class="variable">$UID</span> -x polybar &gt;/dev/null; <span class="keyword">do</span> sleep 1; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行bar1，bar2 可以一次定制多个bar</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;light&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    polybar -c <span class="variable">$HOME</span>/.config/polybar/light-config nord-top &amp;</span><br><span class="line">    polybar -c <span class="variable">$HOME</span>/.config/polybar/light-config nord-down &amp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    polybar -c <span class="variable">$HOME</span>/.config/polybar/dark-config nord-top &amp;</span><br><span class="line">    polybar -c <span class="variable">$HOME</span>/.config/polybar/dark-config nord-down &amp;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Bars launched...&quot;</span></span><br></pre></td></tr></table></figure><p>添加i3运行执行配置 ，将以下内容添加到~/.config/i3/config</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec_always --no-startup-id <span class="variable">$HOME</span><span class="regexp">/.config/</span>polybar/launch.sh</span><br></pre></td></tr></table></figure><h3 id="fish-终端美化"><a href="#fish-终端美化" class="headerlink" title="fish 终端美化"></a>fish 终端美化</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -S fish                     <span class="comment"># 安装fish</span></span><br><span class="line">fish_config                             <span class="comment"># 配置fish</span></span><br></pre></td></tr></table></figure><h2 id="I3特定功能配置方法总结"><a href="#I3特定功能配置方法总结" class="headerlink" title="I3特定功能配置方法总结"></a>I3特定功能配置方法总结</h2><h3 id="终端pacman高亮"><a href="#终端pacman高亮" class="headerlink" title="终端pacman高亮"></a>终端pacman高亮</h3><p>/etc/pacman.conf 中将color解除注释</p><h3 id="屏幕整体显示大小缩放"><a href="#屏幕整体显示大小缩放" class="headerlink" title="屏幕整体显示大小缩放"></a>屏幕整体显示大小缩放</h3><p>编辑~/.Xresources文件添加以下内容</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Xft.dpi:</span><span class="number">150</span>                             <span class="meta"># 数字越大桌面字体整体缩放越大</span></span><br></pre></td></tr></table></figure><h3 id="xorg修改linux系统键位"><a href="#xorg修改linux系统键位" class="headerlink" title="xorg修改linux系统键位"></a>xorg修改linux系统键位</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg                     <span class="comment"># 键位修改程序</span></span><br><span class="line">xmodmap -pke &gt; ~<span class="string">/.xmodmap</span>               <span class="comment"># 将xmodmap当前的键位信息打印输出到.xmodmap文件内</span></span><br><span class="line">xev                                     <span class="comment"># 终端执行该指令，会出现一个新的窗口，当按下键盘时，终端会显示到按键对应的keycode编号</span></span><br></pre></td></tr></table></figure><p>如下所示，想要将keycode编号为110的键与keycode编号为111的键调换位置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">keycode</span> <span class="number">110</span> = F<span class="number">11</span> F<span class="number">11</span> F<span class="number">11</span></span><br><span class="line"><span class="attribute">keycode</span> <span class="number">111</span> = F<span class="number">08</span> F<span class="number">08</span> F<span class="number">08</span></span><br><span class="line"><span class="attribute">keycode</span> <span class="number">110</span> = F<span class="number">08</span> F<span class="number">08</span> F<span class="number">08</span></span><br><span class="line"><span class="attribute">keycode</span> <span class="number">111</span> = F<span class="number">11</span> F<span class="number">11</span> F<span class="number">11</span></span><br></pre></td></tr></table></figure><p>参数调换完成后在.xmodmap文件的最前面添加以下内容(清除要修改的键位)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">clear</span> F<span class="number">11</span></span><br><span class="line"><span class="attribute">clear</span> F<span class="number">08</span></span><br></pre></td></tr></table></figure><p>然后再在.xmodmap文件的最后面添加以下内容(添加要修改的键位)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add</span> F<span class="number">11</span> = F<span class="number">08</span></span><br><span class="line"><span class="attribute">add</span> F<span class="number">08</span> = F<span class="number">11</span></span><br></pre></td></tr></table></figure><p>保存退出，ok完成键位的修改</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmodmap ~<span class="string">/.xmodmap</span>              <span class="comment"># 刷新键位修改</span></span><br></pre></td></tr></table></figure><h3 id="i3延时执行指令"><a href="#i3延时执行指令" class="headerlink" title="i3延时执行指令"></a>i3延时执行指令</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exec_always  #这个修饰符开始的命令会在i3刷新时跟随刷新</span></span><br><span class="line"><span class="attribute">exec_always</span> sleep <span class="number">1</span>; fcitx<span class="number">5</span>     # sleep <span class="number">1</span>; 延迟<span class="number">1</span>秒启动 fcitx<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="i3设置程序快捷键"><a href="#i3设置程序快捷键" class="headerlink" title="i3设置程序快捷键"></a>i3设置程序快捷键</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym $mod+d <span class="built_in">exec</span> rofi -<span class="keyword">show</span> <span class="keyword">run</span> -theme Arc-Dark  <span class="meta"># bindsym 快捷键组合 exec 程序名(或者完整路径) 后面还可添加其他一些对这个程序运行的一个修饰指令</span></span><br></pre></td></tr></table></figure><h3 id="i3杀死程序-进程"><a href="#i3杀死程序-进程" class="headerlink" title="i3杀死程序/进程"></a>i3杀死程序/进程</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec_always kill firefox</span><br><span class="line">exec_always killall firefox</span><br></pre></td></tr></table></figure><h3 id="i3-gaps设置窗口边缘间隙"><a href="#i3-gaps设置窗口边缘间隙" class="headerlink" title="i3-gaps设置窗口边缘间隙"></a>i3-gaps设置窗口边缘间隙</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -S i<span class="number">3</span>-gaps          # 如果终端安装i<span class="number">3</span>时全部安装了i<span class="number">3</span>就不用单独安装;如果没有也可以单独安装</span><br><span class="line"><span class="attribute">gaps</span> inner <span class="number">10</span>                   # 添加到~/.config/i<span class="number">3</span>/config  实现窗口间隙为<span class="number">10</span>个像素</span><br></pre></td></tr></table></figure><h2 id="Ranger-基本的使用"><a href="#Ranger-基本的使用" class="headerlink" title="Ranger 基本的使用"></a>Ranger 基本的使用</h2><h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ranger                                   <span class="comment"># 安装ranger</span></span><br><span class="line">sudo pacman -S highlight atool w3m poppler mediainfo    <span class="comment"># 常用插件安装</span></span><br><span class="line">ranger --<span class="keyword">copy</span><span class="bash">-config=all                                <span class="comment"># 生成配置文件~/.config/ranger/</span></span></span><br></pre></td></tr></table></figure><p>配置文件在~/.config/ranger/ 下<br>rc.conf 快捷键配置<br>commands.py 配置可以通过 ：来执行的程序<br>rifile.conf 指定不同文件类型的打开程序</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>按键</th><th>说明</th><th>按键</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>选择打开文件方式打开文件</td><td>[ ]</td><td>移动父级光标</td></tr><tr><td>/?</td><td>搜索文件</td><td>Q</td><td>退出目录</td></tr><tr><td>Shift+S</td><td>退出到当前操作文件位置</td><td>yp</td><td>复制当前选中文件路径</td></tr><tr><td>H</td><td>后退</td><td>yy</td><td>复制</td></tr><tr><td>L</td><td>前进</td><td>dd</td><td>剪切</td></tr><tr><td>gg</td><td>跳到顶端</td><td>pp</td><td>粘贴</td></tr><tr><td>G</td><td>跳到底端</td><td>delete</td><td>删除</td></tr><tr><td>gh</td><td>go home</td><td>cw</td><td>重命名</td></tr><tr><td>gn</td><td>新建标签</td><td>A</td><td>在当前名字的基础上重命名</td></tr><tr><td>f</td><td>查找</td><td>I</td><td>与A类似,光标在名字最前面</td></tr><tr><td>/</td><td>搜索</td><td>Ctrl+f</td><td>向下翻页</td></tr><tr><td>g</td><td>快速进入目录</td><td>Ctrl+b</td><td>向上翻页</td></tr><tr><td>m</td><td>新建书签</td><td>on/ob</td><td>根据文件名排序</td></tr><tr><td>`</td><td>打开书签</td><td>oc</td><td>根据文件权限修改时间排序</td></tr><tr><td>um</td><td>删除书签</td><td>os</td><td>根据大小排序</td></tr><tr><td>gn/C-n</td><td>新建标签</td><td>ot</td><td>根据类型排序</td></tr><tr><td>TAB/S-TAB</td><td>切换标签</td><td>oa</td><td>访问/使用时间排序</td></tr><tr><td>A-Rignt,A-Left</td><td>切换标签</td><td>om</td><td>根据文件修改时间排序</td></tr><tr><td>gc/C-w</td><td>关闭标签</td><td>Ctrl + /Ctrl -</td><td>缩放显示大小</td></tr></tbody></table><h3 id="参考帮助"><a href="#参考帮助" class="headerlink" title="参考帮助"></a>参考帮助</h3><ul><li><a href="https://wiki.archlinux.org/index.php/Ranger_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">RenderWiKi</a>查看更多使用技巧</li><li><a href="https://www.bilibili.com/video/BV1b4411R7ck">TheCW</a>bilibili讲解视频</li></ul><h2 id="Manjaro-杂七杂八"><a href="#Manjaro-杂七杂八" class="headerlink" title="Manjaro 杂七杂八"></a>Manjaro 杂七杂八</h2><h3 id="火狐配置报错无法打开-使用以下命令重新配置-这样做你之前对浏览器的设置就没了"><a href="#火狐配置报错无法打开-使用以下命令重新配置-这样做你之前对浏览器的设置就没了" class="headerlink" title="火狐配置报错无法打开,使用以下命令重新配置(这样做你之前对浏览器的设置就没了)"></a>火狐配置报错无法打开,使用以下命令重新配置(这样做你之前对浏览器的设置就没了)</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">firefox -profilemanager</span></span><br></pre></td></tr></table></figure><h3 id="查看显示器"><a href="#查看显示器" class="headerlink" title="查看显示器"></a>查看显示器</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xrandr</span><br><span class="line"><span class="meta">#DVI-D-1</span></span><br><span class="line"><span class="meta">#HDMI-1</span></span><br></pre></td></tr></table></figure><h3 id="配置显示器显示顺序-多显示器"><a href="#配置显示器显示顺序-多显示器" class="headerlink" title="配置显示器显示顺序(多显示器)"></a>配置显示器显示顺序(多显示器)</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">exec</span> --<span class="comment">no</span><span class="literal">-</span><span class="comment">startup</span><span class="literal">-</span><span class="comment">id</span> <span class="comment">xrandr</span> --<span class="comment">output</span> <span class="comment">HDMI</span><span class="literal">-</span><span class="comment">0</span> --<span class="comment">left</span><span class="literal">-</span><span class="comment">of</span> <span class="comment">DVI</span><span class="literal">-</span><span class="comment">D</span><span class="literal">-</span><span class="comment">0</span> --<span class="comment">auto</span></span><br></pre></td></tr></table></figure><p>可以在~/.xinitrc中配置，也可以在～/.config/i3/config 中配置推荐使用后者，这样做就算配置出错也不会导致图形界面无法进入</p><h2 id="显卡安装-参考"><a href="#显卡安装-参考" class="headerlink" title="显卡安装(参考)"></a>显卡安装(参考)</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inxi -G                                                     <span class="comment"># 查看显卡硬件</span></span><br><span class="line">mhwd                                                        <span class="comment"># 查看安装驱动列表</span></span><br><span class="line">sudo pacman -S virtualgl lib32-virtualgl lib32-primus primus<span class="comment"># 安装依赖</span></span><br><span class="line">sudo systemctl enable bumblebeed                            <span class="comment"># 开机自启动bumblebeed服务</span></span><br><span class="line">sudo gpasswd -a $<span class="keyword">USER</span> <span class="title">bumblebee</span>                             <span class="comment"># 将用户添加到bumblebee组</span></span><br><span class="line">screenfetch                                                 <span class="comment"># 打印系统信息</span></span><br><span class="line">nvidia-smi                                                  <span class="comment"># 查看显卡驱动信息</span></span><br><span class="line">sudo pacman -S mesa-demos                                   <span class="comment"># 安装测试工具</span></span><br><span class="line">glxgears <span class="literal">-inf</span>o                                              <span class="comment"># 集成显卡性能</span></span><br><span class="line">optirun glxgears <span class="literal">-inf</span>o                                      <span class="comment"># 独立显卡性能</span></span><br><span class="line"><span class="comment">#最终翻车，诶怪自己功力不够深厚</span></span><br></pre></td></tr></table></figure><p>显卡的安装水很深，功力不足不建议尝试，使用官方的就很安逸</p><h2 id="Manjaro-Gcc-版本修改（失败）"><a href="#Manjaro-Gcc-版本修改（失败）" class="headerlink" title="Manjaro Gcc 版本修改（失败）"></a>Manjaro Gcc 版本修改（失败）</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman <span class="literal">-Ss</span> gcc                         <span class="comment"># 查看可安装的版本</span></span><br><span class="line">sudo pacman <span class="literal">-S</span> gcc8 gcc8<span class="literal">-fortran</span> gcc8<span class="literal">-libs</span>  <span class="comment"># 安装gcc8</span></span><br><span class="line"><span class="built_in">cd</span> /usr/bin/</span><br><span class="line"><span class="built_in">ls</span> <span class="literal">-al</span> gcc*                                 <span class="comment"># 查看gcc8有没有安装成功</span></span><br><span class="line">sudo <span class="built_in">mv</span> gcc gcc_back                        <span class="comment"># 备份gcc</span></span><br><span class="line">sudo <span class="built_in">cp</span> gcc<span class="literal">-8</span> gcc                           <span class="comment"># 复制gcc-8为默认gcc</span></span><br><span class="line">gcc <span class="literal">-v</span>                                      <span class="comment"># 成功</span></span><br></pre></td></tr></table></figure><p>小白操作</p><h2 id="Manjaro-I3-安装Houdini"><a href="#Manjaro-I3-安装Houdini" class="headerlink" title="Manjaro I3 安装Houdini"></a>Manjaro I3 安装Houdini</h2><h3 id="库安装"><a href="#库安装" class="headerlink" title="库安装"></a>库安装</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -S libXss lib<span class="number">32</span>-libxss          # Manjaro i<span class="number">3</span> 我查看的时候已经安装好了一<span class="number">3</span> 我查看的时候已经安装好了一个</span><br><span class="line"><span class="attribute">sudo</span> pacman -S glu lib<span class="number">32</span>-glu libgssglue     # 有些是Manjaro已经安装了的就不用再安装了</span><br><span class="line"><span class="attribute">sudo</span> pacman -S libnsl lib<span class="number">32</span>-libnsl          #</span><br></pre></td></tr></table></figure><h3 id="GCC版本"><a href="#GCC版本" class="headerlink" title="GCC版本"></a>GCC版本</h3><p>我已经从最新降到gcc8了</p><h3 id="Houdini-安装"><a href="#Houdini-安装" class="headerlink" title="Houdini 安装"></a>Houdini 安装</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo su                 # 先获得管理员权限</span><br><span class="line">./houdini.install       # 安装 一路y&gt;&gt;&gt;y&gt;&gt;&gt;y&gt;&gt;y&gt;&gt;&gt;yes&gt;&gt;&gt;yes直至完成安装，期间可能会遇到的问题</span><br><span class="line"><span class="meta"># 问题一：安装成功，但是提示包损坏，没有完全安装;</span></span><br><span class="line"><span class="meta"># 可能的原因：缺少依赖包，或者依赖包的版本过高，可以将上面提到的库的旧版本装一下</span></span><br><span class="line"><span class="meta"># 问题二：安装失败或者无法安装;</span></span><br><span class="line"><span class="meta"># 可能的原因：gcc版本太新，降低版本即可;</span></span><br></pre></td></tr></table></figure><p>你懂的准备sesinetd服务程序(linux版和谐的)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/sesinetd stop                              <span class="comment"># 停止服务</span></span><br><span class="line">sudo mv <span class="regexp">/usr/</span>lib<span class="regexp">/sesi/</span>sesinetd <span class="regexp">/usr/</span>lib<span class="regexp">/sesi/</span>sesinetd_old   <span class="comment"># 备份</span></span><br><span class="line">sudo cp sesinetd <span class="regexp">/usr/</span>lib<span class="regexp">/sesi/</span>                             <span class="comment"># 复制替换</span></span><br><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/sesinetd start                             <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><p>运行</p><h2 id="IP配置-以下是垃圾"><a href="#IP配置-以下是垃圾" class="headerlink" title="IP配置(以下是垃圾)"></a>IP配置(以下是垃圾)</h2><h3 id="XJB折腾"><a href="#XJB折腾" class="headerlink" title="XJB折腾"></a>XJB折腾</h3><p>浏览器输入IP进行搜索获取本计算机ip</p><ul><li>171.107.24.49 ip</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nano</span> /etc/rc.conf                   <span class="comment"># 编辑配置文件</span></span><br><span class="line">interface=eth0                      <span class="comment"># 网卡名称</span></span><br><span class="line">address=<span class="number">192.168.21.170</span>              <span class="comment"># IP地址</span></span><br><span class="line">netmask=<span class="number">255.255.255.0</span>               <span class="comment"># 子网掩码</span></span><br><span class="line">broadcast=<span class="number">192.168.21.255</span>            <span class="comment"># 这个是广播地址，根据IP地址和子网掩码计算得到</span></span><br><span class="line">gateway=<span class="number">192.168.21.2</span>                <span class="comment"># 网关</span></span><br><span class="line">nano /etc/resolv.conf <span class="comment">#编辑配置文件</span></span><br><span class="line">nameserver <span class="number">8.8.8.8</span></span><br><span class="line">nameserver <span class="number">8.8.4.4</span></span><br><span class="line">ctrl+o <span class="comment">#保存</span></span><br><span class="line">ctrl+x <span class="comment">#退出</span></span><br></pre></td></tr></table></figure><p>开始</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ip addr                             <span class="comment"># 查看网卡如果安装了net-tools可以使用ifconfig</span></span><br><span class="line"><span class="comment"># enp5s0</span></span><br><span class="line"><span class="comment"># enp0s31f6</span></span><br><span class="line">sudo systemctl disable --now systemd-network.service</span><br><span class="line">code <span class="regexp">/etc/</span>systemd<span class="regexp">/network/</span>enp5s0.network</span><br><span class="line">sudo systemctl enable --now systemd-network.service</span><br></pre></td></tr></table></figure><h3 id="安逸的方法"><a href="#安逸的方法" class="headerlink" title="安逸的方法"></a>安逸的方法</h3><p>直接安装dhcpcs</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dhcpcd</span><br><span class="line">sudo<span class="built_in"> ip </span>link <span class="builtin-name">set</span> <span class="string">&quot;网卡名&quot;</span> up</span><br><span class="line">sudo dhcpcd &amp;</span><br></pre></td></tr></table></figure><p>開機執行<br>编辑 ~/.xinitrc 文件，在最後添加</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin</span></span><br><span class="line">exec ip link set <span class="string">&quot;网卡名&quot;</span> up</span><br><span class="line">exec dhcpcd</span><br></pre></td></tr></table></figure><p>或者寫成一個腳本，在~/.xinitrc中启动</p><h2 id="I3美化-优化"><a href="#I3美化-优化" class="headerlink" title="I3美化/优化"></a>I3美化/优化</h2>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i3 </tag>
            
            <tag> 安装 </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShellScript III</title>
      <link href="2020/10/07/%E7%AD%86%E8%A8%98/shell/ShellScript-III/"/>
      <url>2020/10/07/%E7%AD%86%E8%A8%98/shell/ShellScript-III/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>shell函数的本质是一段可以反复使用的脚本代码，这段代码被提前编写好了，放在指定的位置，当用户需要使用时直接调用即可</p><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>函数定义的格式如下:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 带参数函数定义</span></span><br><span class="line"><span class="attribute">function</span> funname[()]</span><br><span class="line">&#123;</span><br><span class="line">    commands</span><br><span class="line">    [retun value]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不带参数函数定义</span></span><br><span class="line">funname[()]</span><br><span class="line">&#123;</span><br><span class="line">    commands</span><br><span class="line">    [retun value]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>function 是shell的关键字，专门用来定义函数；</li><li>name 是函数名；</li><li>commands 是函数执行代码，可以是一行或者多行；</li><li>return value 表示函数的返回值，其中return是shell的关键字，专门用在函数中返回一个值；这一部分可写可不写；</li><li>由{}包含的部分称为函数体，调用一个函数实际上就是执行这个函数的函数体中的代码；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">first</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;my first function!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">first</span><br><span class="line"><span class="comment"># 直接调用 返回 &quot;my first function!&quot;</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">firstReturn</span></span>()&#123;</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;请输入第一个数值: &quot;</span> num1</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;请输入第二个数值: &quot;</span> num2</span><br><span class="line">    <span class="built_in">return</span> $((<span class="variable">$num1</span>*<span class="variable">$num2</span>))</span><br><span class="line">&#125;</span><br><span class="line">firsRetun</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;两数的乘积为 $? &quot;</span></span><br></pre></td></tr></table></figure><p>函数的优势</p><ul><li>方便多次调用，减少代码量使脚本更加简洁轻量；</li><li>方便修改，当需要对脚本进行维护时，调用函数的部分只需要修改函数脚本即可；</li><li>将函数写进文本，在写其他脚本时可直接调用已经写过的脚本；</li></ul><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><h4 id="不带参数的函数"><a href="#不带参数的函数" class="headerlink" title="不带参数的函数"></a>不带参数的函数</h4><p>在调用不带参数的函数时，直接输入函数名即可调用函数；<br>执行函数时，函数名前的关键字function和函数名后面的()均不需要带；<br>函数的定义必须要在执行的程序前定义和加载；</p><h4 id="带参数的函数"><a href="#带参数的函数" class="headerlink" title="带参数的函数"></a>带参数的函数</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">functionName</span> arg<span class="number">1</span> agr<span class="number">2</span></span><br><span class="line"><span class="comment"># 函数名 参数1 参数2</span></span><br></pre></td></tr></table></figure><ul><li>shell 中的位置参数(1/2/3/….？/$@)均可以作为函数的参数进行传递；</li><li>$0比较特殊，仍然是代表父脚本的名称；</li><li>此时父脚本的参数会临时被函数的参数所掩盖或隐藏</li><li>函数的参数变量是在函数内进行定义的</li></ul><h4 id="执行函数总结"><a href="#执行函数总结" class="headerlink" title="执行函数总结"></a>执行函数总结</h4><ul><li>shell各种程序的执行顺序为: 系统别名&gt;&gt;函数&gt;&gt;系统命名&gt;&gt;可执行文件等；</li><li>函数执行时，会和调用它的脚本共享变量，也可以为函数设定局部变量及特殊位置参数；</li><li>在shell函数里面，return和exit功能类似，区别时return是退出函数，exit是退出脚本；</li><li>return语句会返回一个值给调用函数的程序，exit则会返回一个值给执行当前脚本的shell；</li><li>如果将函数单独存放为一个文件，在加载时需要使用source或.进行加载；</li><li>在函数内部一般使用local定义局部变量，仅在函数体内有效</li></ul><h4 id="调用函数-1"><a href="#调用函数-1" class="headerlink" title="调用函数"></a>调用函数</h4><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShellScript II</title>
      <link href="2020/10/06/%E7%AD%86%E8%A8%98/shell/ShellScript-II/"/>
      <url>2020/10/06/%E7%AD%86%E8%A8%98/shell/ShellScript-II/</url>
      
        <content type="html"><![CDATA[<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>shell的通配符(元字符)表示的不是本意。</p><p>常见的通配符</p><table><thead><tr><th>字符</th><th>含义</th><th>实例</th></tr></thead><tbody><tr><td>*</td><td>匹配0或多个任意字符</td><td>a*b ,a与b之间可以是任意长度的字符，包括0个；比如ab、acb、acdvb等</td></tr><tr><td>？</td><td>匹配任意一个字符</td><td>a?b ,a和b之间必须要有一个字符，该字符可以时任意字符；比如acb、avb、aab等</td></tr><tr><td>[list]</td><td>匹配list中任意单个字符</td><td>a[sdc]b ,a与b之间必须要有一个字符；例如asb、adb、acb</td></tr><tr><td>[!list]</td><td>匹配除了list这几个字符以外的任意单个字符</td><td>a[!a-z]b ,a和b之间必须存在一个字符,且该字符不能是小写字母；例如aAb、aBb、aCb等</td></tr><tr><td>[c1-c2]</td><td>匹配c1到c2之间的任意单个字符</td><td>a[0-2]b ,a与b之间必须但也只能存在一个字符，该字符只能是数字；例如a0b、a1b、a2b</td></tr><tr><td>{string1,string2,….}</td><td>匹配string1、string2，….中任意一个字符串</td><td>q{abc,cdv,sfd}v ,a与v之间必须也只能存在{}中的其中一个字符；例如qabcv、qcdvv、qsfdv</td></tr></tbody></table><h2 id="脚本规范"><a href="#脚本规范" class="headerlink" title="脚本规范"></a>脚本规范</h2><ol><li><p>解释器环境配置</p><p>在编写解释型语言时，大多数时候要在脚本开头指定执行脚本的解释器路径；这样做是为了脚本在执行时可以找到执行脚本的解释器；如果没有写，脚本会使用系统默认的解释器来运行或者报错；</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#！<span class="regexp">/bin/</span>bash</span><br><span class="line">echo <span class="string">&quot;hello world&quot;</span></span><br><span class="line"># 第一句就是告诉脚本要使用<span class="regexp">/bin/</span>下的bash来运行当前脚本</span><br></pre></td></tr></table></figure><p>在linux中为了避免用户在系统安装或脚本环境配置过程中没有将解释器安装在默认的路径上；可以使用env来搜索指定目录下相应的解释器；且这种写法的适应性相对较强，所以使用得比较频繁；</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#！/bin/env bash</span></span><br><span class="line">echo <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta"># 推荐使用这种适用性较强的写法</span></span><br><span class="line">cat /etc/shells</span><br><span class="line"><span class="meta"># 查看系统支持的解释器</span></span><br></pre></td></tr></table></figure></li><li><p>脚本注释</p><p>对于写代码的程序员来说，在读没有注释的脚本就是一种折磨；工整完善的注释可以让其他人了解代码作者书写代码时的思路，可以更好更快的理解代码的意图和脚本的实现过程；当你长时间没有接触后再次阅读也可以快速的进行继续开发，提升工作效率；<br>脚本的注释一般包括：shebang(第一行的解释器指定)，脚本的参数，脚本的用途，脚本的注意事项，脚本的写作作者、时间、版权等，各个函数的说明注释，一些较为复杂的单行命令注释</p></li><li><p>参数规范</p><p>这一点很重要，因为在代码的运行过程中难免会出现报错等杂七杂八的问题，规范的书写方式可以更好的检查代码，方便纠错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="variable">$#</span> != <span class="number">2</span> ]];then</span><br><span class="line">    echo <span class="string">&quot;Parameter incorrect&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>变量</p><p>变量的使用时很常见的，一般会将变量的定义放在脚本的开头(脚本正文开头与shebang之间)，方便管理和修改；</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path=<span class="string">&#x27;home/main/.config&#x27;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$path</span></span></span><br></pre></td></tr></table></figure></li><li><p>缩进</p><p>正确的缩进可以使代码的可读性更强，让其他人更容易读懂作者的代码；而且缩进也可以使代码的观感更好，如果将所有的代码都写成一条一条的那也太无趣了些；</p><p>常见的缩进方法主要有“soft tab”和“hard tab”两种：</p><ul><li>soft tab就是使用n个空格进行缩进(n通常为2、4或8)</li><li>hard tab指定是真是的‘\t’字符12</li></ul></li><li><p>命名标准</p><p>命名的规范包括一下几点：</p><ul><li>文件名规范，文件名通常要使用小写，不要使用中文，避免乱码等不必要的错误风险；以.sh结尾，方便识别</li><li>变量名要有含义，注意拼写不要出错</li><li>统一命名的风格，写shell通常使用小写加下划线</li></ul></li><li><p>编码统一</p><p>写脚本的时候尽量使用UTF-8编码，这样脚本内的注释就可以支持中了；不过在写注释以及打log的时候尽量使用英文，毕竟有些机器上可能没有安装对中文的支持，这会导致打出的log可能是乱码；</p></li><li><p>日志回显</p><p>日志可以方便程序员对代码的纠错，特别是在大型项目或多人协同完成的项目中尤其重要；日志还可以回显一些提示，方便用户对脚本运行状态的了解和掌控；还可以为日志回显添加一些特效、色彩、表情等提高用户体验；</p></li><li><p>移除密码</p><p>不要在代码中暴露密码等重要信息，特别是在使用github等公共和开放的代码托管网站的时候；</p></li><li><p>太长分行<br>在代码的编写时，过长的代码会影响代码的执行效率和代码的阅读体验；如果遇到代码过长且无法避免时，可以使用\号来对代码进行分行；</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/configure-prefix=/u</span>sr-sbin-path=<span class="regexp">/usr/</span>sbin<span class="regexp">/nginx-conf-path=/</span>etc<span class="regexp">/nginx/</span>nginx.conf</span><br><span class="line"><span class="comment"># 可以写成</span></span><br><span class="line">.<span class="regexp">/configure-prefix=/u</span>sr\</span><br><span class="line">-sbin-path=<span class="regexp">/usr/</span>sbin/</span><br><span class="line">nginx-conf-path=/etc\</span><br><span class="line"><span class="regexp">/nginx/</span>nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>代码效率</p><p>在代码编写时不要在单行中使用过多的管道来编写脚本，太长的代码影响代码的运行效率和代码的可读性；<br>可以将代码分成多行代码来编写，这样可使得代码更加易读；</p></li><li><p>路径严谨<br>在很多情况下脚本需要获取当前脚本所在的路径，然后以这个路径为基准来查找需要的其他文件位置；通常会使用pwd来获取当前的脚本路径；</p><p>不过以上获取当前脚本路径的方法并不严谨，pwd获取的是当前shell的执行路径，而是不是当前脚本的路径；</p><p>正确的写法应该是</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">script_dir=$(cd $(<span class="keyword">dirname</span> $0) &amp;&amp; <span class="keyword">pwd</span>)</span><br><span class="line">script_dir=$(<span class="keyword">dirname</span> $(readlink -f $0)) <span class="number">12</span></span><br></pre></td></tr></table></figure><p>cd进入当前脚本的目录然后在使用pwd或者直接获取当前脚本的所在路径</p></li><li><p>代码简洁</p></li><li><p>新写法</p></li><li><p>其他</p><ul><li>路径尽量保持绝对路径，不容易出错，如果非要使用，最好使用./来修饰；</li><li>优先使用bash的变量替代awk sed，这样更加简洁；</li><li>简单的if尽量使用&amp;&amp; ||，写成单行；比如 <code>[[x&gt;2]] &amp;&amp; echo x</code></li><li>当export变量时，尽量加上子脚本的namespace，保持变量不冲突</li><li>会使用trap捕获信号，并接收到终止信号时执行一些收尾工作</li><li>使用mktemp生成临时文件或文件夹</li><li>利用/dev/null过滤不友好的输出信息</li><li>会利用命令的返回值判断命令的执行情况</li><li>使用文件时要判断文件是否存在，否则做好异常处理</li><li>不要处理ls后的数据(比如 ls-l | awk’{print $8}’)</li><li>ls的结果非常的不确定，并且与平台有关</li><li>读取文件时不要使用for loop而要使用while read</li></ul></li></ol><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>shell脚本的语法调试，使用bash的相关参数进行调试;</p><p>bash [参数] 文件名.sh</p><ul><li>-n 不执行script，仅查询语法错误；</li><li>-v 在执行script之前，先将script内容显示到终端</li><li>-x 将使用的脚本内容输入到终端，该参数经常被使用</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bash </span>-n <span class="keyword">script.sh</span></span><br><span class="line"><span class="keyword">bash </span>-x <span class="keyword">script.sh</span></span><br><span class="line"><span class="keyword">bash </span>-v <span class="keyword">script.sh</span></span><br></pre></td></tr></table></figure><h2 id="脚本的运行方式"><a href="#脚本的运行方式" class="headerlink" title="脚本的运行方式"></a>脚本的运行方式</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bash环境执行</span></span><br><span class="line">bash script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录执行</span></span><br><span class="line">chmod +x script.sh</span><br><span class="line">./script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相对路径执行</span></span><br><span class="line">~<span class="regexp">/shell/</span>script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对路径执行</span></span><br><span class="line"><span class="regexp">/home/m</span>ain<span class="regexp">/shell/</span>script.sh</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量通俗的可以理解为用于个固定不变的字符串，来表示或者替代一个可变化的内容；<br>变量又可以分为自定义变量、环境变量、位置变量和预定义变量；</p><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>自定义变量则是程序员自己定义的变量，变量的定义必须要以<code>字母</code>或者<code>下划线</code>开头并且<code>字母区分大小写</code>；</p><p>变量名=变量内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">shell</span>=/usr/bin/bash</span><br><span class="line"><span class="comment"># 定义变量shell等于/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">dir</span>=`pwd`</span><br><span class="line"><span class="comment"># 定义变量dir等于pwd的执行结果</span></span><br><span class="line"></span><br><span class="line">echo <span class="variable">$dir</span></span><br><span class="line">echo <span class="variable">$shell</span></span><br><span class="line"><span class="comment"># 使用$加变量名,来调用定义的变量</span></span><br></pre></td></tr></table></figure><p>引用变量(变量的调用)</p><ul><li>查看变量: echo $变量名</li><li>取消变量: unset 变量名</li><li>作用范围: 仅在当前shell中有效</li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>定义环境变量</p><ul><li>export home_dir=/home/main 定义环境变量</li><li>export blog_dir=/home/main/.blog</li><li>export blog_dir 将变量转换成环境变量</li><li>引用环境变量: 变量名 或 {变量名}</li><li>查看环境变量: echo $变量名</li><li>取消环境变量: unset 变量名</li><li>作用范围在当前shell和子shell中起作用</li></ul><h3 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h3><p>在linux执行脚本命令过程中会使用到多个参数，可以使用系统定义的位置变量来表示这些参数；</p><p>其中，$0代表命令行本身，$1代表第一个参数，$2代表第二个参数以此类推；当参数个数大于9个时，就要用{}来将位置参数括起来，例如${10}代表第十个参数，${15}代表第十五个参数；</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> ~<span class="string">/.blog</span> ~<span class="string">/.config</span> ~<span class="string">/Download</span></span><br><span class="line"><span class="comment"># 以这一条命令来说， $0代表ls本身， $1就代表~/.blog, $2就代表~/.config</span></span><br></pre></td></tr></table></figure><p>在shell中可以识别的位置参数变量如下表：<br>|位置参数变量|作用|<br>|:—:|:—:|<br>|$n|n为数字，$0代表命令本身，$1<del>9代表第1</del>9个参数，10及其以上的参数需要大括号包含，例如${10}|<br>|$*|这个变量代表命令行或者脚本中的所有参数,并把所有参数看作是一个整体|<br>|$@|这个变量代表命令行或者脚本中的所有参数，不过$@把每个参数区别对待|<br>|$#|这个命令代表命令行或者脚本中所有参数的个数|</p><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p>预定义变量时shell在一开始时就定义好的变量，这一点和默认的环境变量有点相似；但是预定义变量不能重新定义，用户只能根据shell的定义来使用这些变量。严格来说，位置参数变量也是预定义变量的一种，只是位置参数变量的所用比较统一，所以位置参数变量被单独划分为一类；</p><p>shell中的预定义变量如下表：<br>|预定义变量名|作用|<br>|:—:|:—:|<br>|$?|最后一次执行命令的返回状态，如果这个变量的值为0，则证明上一条命令正确执行；如果这个变量的值为非0(具体是哪个参数由命令决定)，则证明上一条命令执行错误|<br>|$$|当前进程的进程号(PID)|<br>|$!|后台运行的最后一个进程号的(PID)|</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span></span><br><span class="line"><span class="keyword">echo</span> $?</span><br><span class="line"># 如果<span class="keyword">ls</span>正确执行，那么 <span class="keyword">echo</span> $? 就会返回<span class="number">0</span>(当然预定义变量只在linux系统默认的bash中有效，如果使用fish或者zsh等第三方<span class="keyword">shell</span>可能会无效)</span><br></pre></td></tr></table></figure><h3 id="变量的赋值方式"><a href="#变量的赋值方式" class="headerlink" title="变量的赋值方式"></a>变量的赋值方式</h3><h4 id="显式赋值"><a href="#显式赋值" class="headerlink" title="显式赋值"></a>显式赋值</h4><p>变量名=变量值</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ip</span>=<span class="number">198.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">blog_path</span>=/home/main/.blog</span><br></pre></td></tr></table></figure><h4 id="read从键盘读取变量值"><a href="#read从键盘读取变量值" class="headerlink" title="read从键盘读取变量值"></a>read从键盘读取变量值</h4><ul><li>read 变量名</li><li>read -p “提示信息” 变量名</li><li>read -t 5 -p “提示信息” 变量名</li><li>read -n 2 变量名</li></ul><p>read用法: read [-ers] [-a数组] [-d分隔符] [-i缓冲区文字] [-n读取字符数] [-N读取字符数] [-p读取提示符] [-t超时] [-u文件描述] [名称….]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入你的名字&quot;</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br></pre></td></tr></table></figure><p>如上脚本，变量$name需要用户输入，然后脚本再调用这个变量；</p><h3 id="单双引号的区别"><a href="#单双引号的区别" class="headerlink" title="单双引号的区别"></a>单双引号的区别</h3><p>在shell中’’和””起到的效果略有不同；在执行命令过程中，如果使用单引号包含一个变量，那将无法正确的返回这个变量的结果；如下所示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$a&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span>&quot;</span></span><br></pre></td></tr></table></figure><p>可以从结果看出，以单引号’’包围变量的值时，单引号内部是什么就输出什么，即使所包含的内容中含有变量和命令(命令需要``反引包含)也会把它们原样输出；这种情况非常适合定义显示字符串的情况，即不希望解析变量和命令等场景；</p><p>以双引号””包含的变量值时，输出前会先解析双引号内部的变量和命令，再把结果一并输出；为而不是将双引号的内容原样输出；这种情况适用于字符串中附带有变量和命令的脚本，需要将变量和命令先解析后再将结果和字符串一并输出。</p><p>在shell中单引号’’也称强引，双引号称为弱引；</p><h3 id="反引号"><a href="#反引号" class="headerlink" title="反引号``"></a>反引号``</h3><p>当用户定义一个带有命令或变量的变量时，为了让脚本将命令和变量先执行后再将结果用于定义变量；这时需要使用``反引号告诉脚本这是一行命令或者变量;</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span>=`ls ~/.config/fish`</span><br><span class="line"><span class="attr">files</span>=`ls -U ./ | grep <span class="string">&#x27;[np]g$&#x27;</span>`</span><br></pre></td></tr></table></figure><h3 id="变量的删除、替换"><a href="#变量的删除、替换" class="headerlink" title="变量的删除、替换"></a>变量的删除、替换</h3><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">url=https://www.bilibili.com</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;$url&#125;</span></span><br><span class="line"><span class="comment"># 获取变量的长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url&#125;</span></span><br><span class="line"><span class="comment">#  获取变量值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url#*.&#125;</span></span><br><span class="line"><span class="comment"># 从前往后，最短匹配；这里返回bilibili.com</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url##*.&#125;</span></span><br><span class="line"><span class="comment"># 从前往后，最长匹配；这里返回 .com</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url%.*&#125;</span></span><br><span class="line"><span class="comment"># 从后往前，最短匹配；这里返回 https://www.bilibili</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url%%.*&#125;</span></span><br><span class="line"><span class="comment"># 从后往前，最长匹配；这里返回 https://www</span></span><br></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url:6:3&#125;</span></span><br><span class="line"><span class="comment"># 意思是从变量值第6个字符开始(不包含第六个)，打印3个字符；这里返回 //w</span></span><br></pre></td></tr></table></figure><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url/bilibili.com/luomit.xyz&#125;</span></span><br><span class="line"><span class="comment"># 内容的替换 $&#123;变量名/旧内容/新内容&#125;; 这里返回https://www.luomit.xyz</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url/b/B&#125;</span></span><br><span class="line"><span class="comment"># $&#123;变量名/旧内容/新内容&#125;; 这里会替换url中第一个小写b为大写的B</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url//b/B&#125;</span></span><br><span class="line"><span class="comment"># $&#123;变量名//旧内容/新内容&#125;; 这里会将所有的小写b替换为大写的B</span></span><br></pre></td></tr></table></figure><h4 id="i-与-i"><a href="#i-与-i" class="headerlink" title="i++ 与 ++i"></a>i++ 与 ++i</h4><p>两者都会对变量执行递增的一个操作；区别在于前者不影响原始变量，而后者将改变原始变量的值；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">i=1</span><br><span class="line">j=1</span><br><span class="line">x=0</span><br><span class="line">y=0</span><br><span class="line"><span class="built_in">let</span> x=i++</span><br><span class="line"><span class="built_in">let</span> y=++j</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$j</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$x</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$y</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 由结果可以看出，x的值时i一次累加获得的值，后面的累加不在赋予到变量x上；而y的值时j的两次累加的结果；</span></span><br></pre></td></tr></table></figure><blockquote><p>i++ 是先赋值再运算，运算结果不再影响赋值； ++i 先运算再赋值，赋值的结果等于运算结果</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 配置</title>
      <link href="2020/10/05/%E7%AD%86%E8%A8%98/linux/Vim%E9%85%8D%E7%BD%AE/"/>
      <url>2020/10/05/%E7%AD%86%E8%A8%98/linux/Vim%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h2><p>Vim 是一个优秀的终端文本编辑器，可以不使用鼠标，完全键盘操作；对新手不太友好，一旦适应了键盘操作的习惯，可以极大的提高工作效率；且系统占用较小，打开较大的文件也不会有任何压力；</p><p>Vim在启动时会根据配置文件(.vimrc)来配置Vim，因此我们可以通过这个文件来定制适合自己使用习惯的Vim；</p><ul><li>vim的默认配置在 /etc/.vimrc</li><li>vim用户的配置通常位于 ~/.vimrc</li></ul><p>Vim环境变量设置参数</p><table><thead><tr><th>设置参数</th><th>功能描述</th></tr></thead><tbody><tr><td>set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936;set termencoding=utf-8;set encoding=utf-8</td><td>设置编码格式，enconding选项用于缓存的额文本、寄存器、Vim脚本文件等；fileencoding选项是Vim写入文件时采用的编码类型；termencoding选项表示输出到终端时采用的编码类型</td></tr><tr><td>set nu;set num</td><td>nu时number的缩写，所以这两个配置命令效果是一样的；取消行号可以使用set nonu</td></tr><tr><td>set cursorline</td><td>突出显示当前行</td></tr><tr><td>set mouse=a;set selection=execlusive;set selectmode=mounse,key</td><td>Vim默认是不启用鼠标的，可以通过此配置启用鼠标</td></tr><tr><td>set autoindent</td><td>设置自动缩进，即每一行的缩进同上一行相同</td></tr><tr><td>set tabstop=4</td><td>设置Tab键宽度为4个空格</td></tr></tbody></table><p>将上面这些内容写进~/.vimrc中可以让vim启动时加载，避免每次使用都要再次配置</p><h2 id="自用部分配置"><a href="#自用部分配置" class="headerlink" title="自用部分配置"></a>自用部分配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; 设置环境变量</span></span><br><span class="line"><span class="keyword">set</span> showcmd                                     <span class="comment">&quot; Show (partial) command in status line.</span></span><br><span class="line"><span class="keyword">set</span> showmatch                                   <span class="comment">&quot; Show matching brackets.</span></span><br><span class="line"><span class="keyword">set</span> ignorecase                                  <span class="comment">&quot; Do case insensitive matching</span></span><br><span class="line"><span class="keyword">set</span> incsearch                                   <span class="comment">&quot; Incremental search</span></span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span>                                     <span class="comment">&quot; Enable mouse usage (all modes)</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>                                      <span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="keyword">set</span> cursorline                                  <span class="comment">&quot; 高亮当前行</span></span><br><span class="line"><span class="keyword">set</span> textwidth                                   <span class="comment">&quot; 设置行宽,即一行显示多少个字符</span></span><br><span class="line"><span class="keyword">set</span> wrap                                        <span class="comment">&quot; 自动折行</span></span><br><span class="line"><span class="keyword">set</span> linebreak                                   <span class="comment">&quot; 不会在单词中间折行</span></span><br><span class="line"><span class="keyword">set</span> wrapmargin=<span class="number">2</span>                                <span class="comment">&quot; 指定折行处与右边缘之间空出的字符</span></span><br><span class="line"><span class="string">&quot;set spell spelllang=en_us                      &quot;</span> 英语拼写检查</span><br><span class="line"><span class="keyword">set</span> autochdir                                   <span class="comment">&quot; 自动切换文件路径</span></span><br><span class="line"><span class="keyword">set</span> visualbell                                  <span class="comment">&quot; 出错闪屏幕</span></span><br><span class="line"><span class="keyword">set</span> autoread                                    <span class="comment">&quot; 文件改变提示</span></span><br><span class="line"><span class="keyword">set</span> wildmenu</span><br><span class="line"><span class="keyword">set</span> wildmode=longes<span class="variable">t:list</span>,full                  <span class="comment">&quot; tab补全，再次tab依次选择提示</span></span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span>                              <span class="comment">&quot; 设置编码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> backupdir=~/.config/nvim/.backup//  </span><br><span class="line"><span class="keyword">set</span> directory=~/.config/nvim/.swp//</span><br><span class="line"><span class="keyword">set</span> undodir=~/.config/nvim/.<span class="keyword">undo</span>//</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 安装插件 start</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">&#x27;~/.config/nvim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;mattn/emmet-vim&#x27;</span>                          <span class="comment">&quot;插件的github位置</span></span><br><span class="line"><span class="comment">&quot;Plug &#x27;https://github.com/vim-scripts/fcitx.vim.git&#x27;</span></span><br><span class="line"><span class="comment">&quot;Plug &#x27;norcalli/nvim-colorizer.lua&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline-themes&#x27;</span>           <span class="comment">&quot; 状态栏配置</span></span><br><span class="line"><span class="comment">&quot;Plug &#x27;altercation/vim-colors-solarized&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;joshdick/onedark.vim&#x27;</span>                     <span class="comment">&quot; 主题</span></span><br><span class="line">Plug <span class="string">&#x27;junegunn/vim-easy-align&#x27;</span>                  <span class="comment">&quot; 自动对齐</span></span><br><span class="line">Plug <span class="string">&#x27;jiangmiao/auto-pairs&#x27;</span>                     <span class="comment">&quot; 自动引号&amp;括号补全</span></span><br><span class="line">Plug <span class="string">&#x27;luochen1990/rainbow&#x27;</span>                      <span class="comment">&quot; 括号色彩匹配</span></span><br><span class="line">Plug <span class="string">&#x27;preservim/nerdtree&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span>              <span class="comment">&quot; 文件树状结果</span></span><br><span class="line">Plug <span class="string">&#x27;neoclide/coc.nvim&#x27;</span>, &#123;<span class="string">&#x27;branch&#x27;</span>: <span class="string">&#x27;release&#x27;</span>&#125; <span class="comment">&quot; coc补全插件</span></span><br><span class="line">Plug <span class="string">&#x27;zchee/deoplete-jedi&#x27;</span>                      <span class="comment">&quot; python</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdcommenter&#x27;</span>                 <span class="comment">&quot; 注释插件</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/syntastic&#x27;</span>                     <span class="comment">&quot; 语法检查</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"><span class="comment">&quot; 安装插件 End</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 主题颜色</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> background=dark</span><br><span class="line"><span class="keyword">colorscheme</span> onedark</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:onedark_termcolors</span>=<span class="number">256</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_theme</span>=<span class="string">&#x27;onedark&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:lightline</span> = &#123;</span><br><span class="line">  \ <span class="string">&#x27;colorscheme&#x27;</span>: <span class="string">&#x27;onedark&#x27;</span>,</span><br><span class="line">  \ &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; autocmd vimenter * NERDTree                   &quot;</span> 自动开启Nerdtree</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeWinSize</span> = <span class="number">25</span>                      <span class="comment">&quot; 设定 NERDTree 视窗大小</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span>                     <span class="comment">&quot; 开启Nerdtree时自动显示Bookmarks</span></span><br><span class="line"><span class="comment">&quot;打开vim时如果没有文件自动打开NERDTree</span></span><br><span class="line"><span class="comment">&quot; autocmd vimenter * if !argc()|NERDTree|endif</span></span><br><span class="line"><span class="comment">&quot;当NERDTree为剩下的唯一窗口时自动关闭</span></span><br><span class="line"><span class="keyword">autocmd</span> bufenter * <span class="keyword">if</span> (<span class="built_in">winnr</span>(<span class="string">&quot;$&quot;</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">exists</span>(<span class="string">&quot;b:NERDTree&quot;</span>) &amp;&amp; <span class="variable">b:NERDTree</span>.isTabTree()) | q | <span class="keyword">endif</span></span><br><span class="line"><span class="comment">&quot; 设置树的显示图标</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeDirArrowExpandable</span> = <span class="string">&#x27;+&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeDirArrowCollapsible</span> = <span class="string">&#x27;-&#x27;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore = [<span class="string">&#x27;\.pyc$&#x27;</span>]                 <span class="comment">&quot; 过滤所有.pyc文件不显示</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeShowLineNumbers</span>=<span class="number">0</span>                 <span class="comment">&quot; 是否显示行号</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeHidden</span>=<span class="number">0</span>                          <span class="comment">&quot; 不显示隐藏文件</span></span><br><span class="line"><span class="string">&quot;&quot;</span>Making it prettier</span><br><span class="line"><span class="keyword">let</span> NERDTreeMinimalUI = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeDirArrows = <span class="number">1</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;F3&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span>               <span class="comment">&quot; 开启/关闭nerdtree快捷键</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按键配置</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShellScript I</title>
      <link href="2020/10/05/%E7%AD%86%E8%A8%98/shell/ShellScript-I/"/>
      <url>2020/10/05/%E7%AD%86%E8%A8%98/shell/ShellScript-I/</url>
      
        <content type="html"><![CDATA[<p>shell属于解释性高级语言，简单、跨平台能力强<br>shell是linux自带的系统语言</p><h2 id="shell用来做什么"><a href="#shell用来做什么" class="headerlink" title="shell用来做什么"></a>shell用来做什么</h2><p>自动化批量系统初始化程序(系统安装、系统升级、软件安装、时区设置、安全策略等)</p><ol><li><p>自动化部署或者运行程序(系统程序、桌面程序自动运行等)</p></li><li><p>日志分析</p></li><li><p>zabbix监控CPU80%+|-50% Python API AWS/EC2</p></li><li><p>shell特性</p></li><li><p>自动补全<br>在shell输入过程中使用tab键可以获得脚本的提示和补全，加快代码编写效率；bash-completion Ubuntu已自动安装这个bash的自动补全扩展</p></li><li><p>历史命令的记录<br>shell会记录执行过的命令，可以使用上下方向键调用或者使用history命令来查看</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">history             # 查看之前使用的所有命令</span><br><span class="line">history n           # 查看最近的n个命令；这里的n是一个整数，表示查看历史记录数量</span><br><span class="line">history -d n        # 删除历史记录中的第n个命令，将命令从记录中删除</span><br><span class="line"><span class="meta">#!n                  # 执行第n个命令，用来直接执行历史记录中的命令</span></span><br><span class="line"><span class="meta">#!-n                 # 执行历史记录中倒数第n条命令</span></span><br><span class="line"><span class="meta">#!!                  # 执行历史记录中最后一条命令</span></span><br><span class="line"><span class="meta">#!cd                 # 执行历史记录中最近已cd开头的shell命令</span></span><br><span class="line">history -c          # 清除历史记录</span><br></pre></td></tr></table></figure></li><li><p>别名功能<br>alias命令，别名的好处就是可以把很长的指令简化缩写，用来提升工作效率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span>                                   <span class="comment"># 查看当前系统的所有别名</span></span><br><span class="line"><span class="built_in">alias</span> blog_edit=<span class="string">&#x27;code ~/.blog/_post&#x27;</span>    <span class="comment"># 用编辑器打开博客文件夹</span></span><br><span class="line"><span class="built_in">unalias</span> blog_edit                       <span class="comment"># 取消这个blog_edit别名</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>这些如需要永久生效需要将他们写入到~/.bashrc配置文件中</p></blockquote><h2 id="bash的初始化"><a href="#bash的初始化" class="headerlink" title="bash的初始化"></a>bash的初始化</h2><p>bahs环境变量文件的加载</p><ol><li>/etc/profile 配置文件</li><li>/etc/bashrc 系统配置</li><li>~/.profile 用户配置</li><li>~/.bash_login 登录时加载</li><li>~/.bash_profile 用户配置</li><li>~/.bashrc 用户配置</li><li>~/.bash_logout 登出时加载</li></ol><ul><li>在linux系统启动时，bash会去加载环境配置文件，首先会加载全局配置文件再加载用户配置文件</li><li>在图形化界面登录时，会先读取/etc/profile再读取~/.profile;如果后者和前者的配置存在差异，后者会覆盖前者的配置</li></ul><h2 id="bash的特性"><a href="#bash的特性" class="headerlink" title="bash的特性"></a>bash的特性</h2><h3 id="bash快捷键"><a href="#bash快捷键" class="headerlink" title="bash快捷键"></a>bash快捷键</h3><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+A</td><td>光标移动到开头</td></tr><tr><td>Ctrl+E</td><td>光标移动到结尾</td></tr><tr><td>Ctrl+C</td><td>强制终止命令</td></tr><tr><td>Ctrl+L</td><td>清屏</td></tr><tr><td>Ctrl+U</td><td>删除或剪切光标之前的命令</td></tr><tr><td>Ctrl+K</td><td>删除或见前光标之后的命令</td></tr><tr><td>Ctrl+Y</td><td>粘贴Ctrl+K或Ctrl+U剪切的内容</td></tr><tr><td>Ctrl+R</td><td>在历史命令中搜索</td></tr><tr><td>Ctrl+D</td><td>退出当前终端</td></tr><tr><td>Ctrl+Z</td><td>暂停并放入后台</td></tr><tr><td>Ctrl+S</td><td>暂停屏幕输出</td></tr><tr><td>Ctrl+Q</td><td>恢复屏幕输出</td></tr></tbody></table><h3 id="bash常见的几个作业命令"><a href="#bash常见的几个作业命令" class="headerlink" title="bash常见的几个作业命令"></a>bash常见的几个作业命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &amp;           <span class="comment"># 执行命令后面加 &amp; ，让这个命令在后台运行</span></span><br><span class="line">                    <span class="comment"># Ctrl+Z 暂停并放入后台</span></span><br><span class="line"><span class="built_in">jobs</span>                <span class="comment"># 查看后台作业状态</span></span><br><span class="line"><span class="built_in">fg</span> %n               <span class="comment"># 将后台作业n切换到前台</span></span><br><span class="line"><span class="built_in">bg</span> %n               <span class="comment"># 将前台作业n切换到后台</span></span><br><span class="line"><span class="built_in">kill</span> %n             <span class="comment"># 将作业n移除</span></span><br><span class="line"><span class="built_in">kill</span> -9 %n          <span class="comment"># 将作业n强制移除</span></span><br></pre></td></tr></table></figure><blockquote><p>注意这里的n不是pid进程id；这里的n时当前终端工作脚本程序的编号；这个编号从1开始分配；当一个工作完成或者移除后后，工作编号也会发生改变</p></blockquote><h2 id="bash输出重定向"><a href="#bash输出重定向" class="headerlink" title="bash输出重定向"></a>bash输出重定向</h2><table><thead><tr><th>类型</th><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>标准输出重定向</td><td>command&gt;file</td><td>以覆盖的方式,把command的正确输出结果输出到file文件中</td></tr><tr><td></td><td>command&gt;&gt;file</td><td>以追加的方式，把command的正确输出结果输出到file文件中</td></tr><tr><td>标准错误输出重定向</td><td>command 2&gt;file</td><td>以覆盖的方式,把command的错误输出结果输出到file文件中</td></tr><tr><td></td><td>command 2&gt;&gt;file</td><td>以覆盖的方式,把command的错误输出结果输出到file文件中</td></tr><tr><td>正确输出和错误输出同时保存</td><td>command&gt;file 2&gt;&amp;1</td><td>以覆盖的方式,把command的正确输出结果和错误输出结果输出到file文件中</td></tr><tr><td></td><td>command&gt;&gt;file 2&gt;&amp;1</td><td>以追加的方式,把command的正确输出结果和错误输出结果输出到file文件中</td></tr><tr><td>分别输出到不同文件</td><td>command&gt;file1 2&gt;file2</td><td>以覆盖的方式,把command的正确输出结果输出到file1文件中；把错误输出结果输出到file2文件中</td></tr><tr><td></td><td>command&gt;&gt;file1 2&gt;&gt;file2</td><td>以追加的方式,把command的正确输出结果输出到file1文件中；把错误输出结果输出到file2文件中</td></tr><tr><td></td><td>command&gt;file 2&gt;file</td><td>[不推荐]这两种写法会导致file会被打开两次,引起资源竞争，所以stdout和stderr会相互覆盖</td></tr><tr><td></td><td>command&gt;&gt;file 2&gt;&gt;file</td><td>[不推荐]</td></tr><tr><td></td><td>command &amp;&gt;&gt;file</td><td>[推荐]全部以追加的方式重定向到file文件中</td></tr></tbody></table><blockquote><p>输出重定向中, &gt;代表以覆盖的方式, &gt;&gt;代表以追加的方式；<br>输出重定向的额完整写法时fd&gt;file,其中fd表示文件描述符，如果不写，默认为1，也就是标准输出文件；<br>当文件描述符为1时，一般省略不写，如上表所示；当然也可以将 command&gt;file 写作 command 1&gt;file,但这样略显繁琐;<br>当文件描述符大于1时，比如2，就必须写上;<br>需要注意的时fd和&gt;之间不能有空个，否则shell会解析失败；&gt;和file之间的空格可有可无，但是为了避免出错，习惯性保持一致&gt;两边都不加空格;<br>/dev/null 可以把不想显示的内容输入到这个文件里(相当于垃圾回收站)</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sl &amp;&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br></pre></td></tr></table></figure><h2 id="bash输入重定向"><a href="#bash输入重定向" class="headerlink" title="bash输入重定向"></a>bash输入重定向</h2><p>输入重定向就是改变输入的方向，不使用键盘作为命令输入的来源，而是使用文件作为命令的输入来源。</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>command&lt;file</td><td>将文件file作为command的输入</td></tr><tr><td>command&lt;&lt;END</td><td>从标准输入(键盘输入)中读取数据，直到读取到END字符才停止(分解符,可以时任意的字符串，用户可自定义的)。</td></tr><tr><td><del>file1 command file2</del></td><td><del>将file1作为command的输入，并将command的结果输出到file2中。</del></td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cat</span> readme.txt                              <span class="comment"># 打印预览文件</span></span><br><span class="line">wc -l readme.txt                            <span class="comment"># 输入重定向(统计文件行数)</span></span><br></pre></td></tr></table></figure><p>总结:</p><ol><li>/dev/null 表示空的设备文件，无穷的大小，进入的文件不可再回收</li><li>0表示stdin标准输入</li><li>1表示stdout标准输出</li><li>2表示stderr标准错误</li><li>&gt;默认标准输出重定向，与 1&gt; 相同</li><li>2&gt;&amp;1意思是把 标准错误输出 重定向到 标准输出</li><li>&amp;file意思是把 标准输出 和 标准错误输出 都重定向到file中</li><li>&gt;&amp;file意思是把 标准输出 和 标准错误输出 都重定向到file中</li></ol><h2 id="shell中的特殊字符"><a href="#shell中的特殊字符" class="headerlink" title="shell中的特殊字符"></a>shell中的特殊字符</h2><h3 id="分号，连续运行多个命令"><a href="#分号，连续运行多个命令" class="headerlink" title="; 分号，连续运行多个命令"></a>; 分号，连续运行多个命令</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat readme.txt;redame.txt&gt;&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="管道-正则表达式中表示或者"><a href="#管道-正则表达式中表示或者" class="headerlink" title="| 管道,正则表达式中表示或者"></a>| 管道,正则表达式中表示或者</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;shell基础&quot;</span> |egrep <span class="string">&#x27;(e|基)&#x27;</span>&#123;<span class="number">2</span>&#125;             # 表示匹配 <span class="keyword">e</span> 或者 基 字符</span><br><span class="line">ifconfig|<span class="keyword">grep</span> eth0                             # 表示ifconfig查处来的信息过滤出eth0这一行</span><br><span class="line"><span class="keyword">cat</span> inputName.<span class="keyword">sh</span>|<span class="keyword">grep</span> <span class="string">&#x27;$name&#x27;</span>&gt;about.txt        # 过滤inputNmae.<span class="keyword">sh</span>中带 $name 的行,并显示(<span class="keyword">cat</span>)和重定向(&gt;)到about.txt</span><br></pre></td></tr></table></figure><h3 id="amp-将命令放到后台执行"><a href="#amp-将命令放到后台执行" class="headerlink" title="&amp; 将命令放到后台执行"></a>&amp; 将命令放到后台执行</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqld_safe --usr=mysql &amp;                      # 将mysql放到后台执行</span><br><span class="line">ifconfig &amp;&gt;<span class="regexp">/dev/</span><span class="keyword">null</span>                           # 将ifconfig标准输出和标准错误输出重定向到<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure><h3 id="amp-amp-前面命令返回值为0才执行后面的命令"><a href="#amp-amp-前面命令返回值为0才执行后面的命令" class="headerlink" title="&amp;&amp; 前面命令返回值为0才执行后面的命令"></a>&amp;&amp; 前面命令返回值为0才执行后面的命令</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> &amp;&amp; <span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>                                # 执行<span class="keyword">ls</span>结束后，返回 ok</span><br></pre></td></tr></table></figure><h3 id="前面的命令返回值为0的时候才执行后面的命令"><a href="#前面的命令返回值为0的时候才执行后面的命令" class="headerlink" title="|| 前面的命令返回值为0的时候才执行后面的命令"></a>|| 前面的命令返回值为0的时候才执行后面的命令</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lls || <span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>                               # lls 不是<span class="keyword">shell</span>命令，执行结果为<span class="number">0</span>，输出 ok</span><br><span class="line"><span class="keyword">ls</span> || <span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>                                # <span class="keyword">ls</span> 是<span class="keyword">shell</span>的命令，执行结果为真,不在执行||后面的命令</span><br></pre></td></tr></table></figure><h3 id="号-用来表示内容为注释"><a href="#号-用来表示内容为注释" class="headerlink" title="# 号,用来表示内容为注释"></a># 号,用来表示内容为注释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#a&#125;</span>                                 <span class="comment"># 返回变量a的长度</span></span><br><span class="line"><span class="comment"># $&#123;#变量名&#125;表示变量的长度</span></span><br><span class="line"><span class="comment"># $# 表示位置参数的个数</span></span><br></pre></td></tr></table></figure><h3 id="！-惊叹号-将命令或者条件表达式返回值取反"><a href="#！-惊叹号-将命令或者条件表达式返回值取反" class="headerlink" title="！ 惊叹号 将命令或者条件表达式返回值取反"></a>！ 惊叹号 将命令或者条件表达式返回值取反</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ![1&lt;2];<span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&#x27;ok&#x27;</span>;<span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">&#x27;no&#x27;</span>;<span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>不知道是书写规范问题还是什么，执行结果返回找不到那个文件和目录</p><h3 id="美元符号，取变量的值；在正则表达式中表示行尾"><a href="#美元符号，取变量的值；在正则表达式中表示行尾" class="headerlink" title="$ 美元符号，取变量的值；在正则表达式中表示行尾"></a>$ 美元符号，取变量的值；在正则表达式中表示行尾</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span>                                            <span class="comment"># 定义变量a</span></span><br><span class="line">echo <span class="variable">$a</span>                                         <span class="comment"># 查看变量a</span></span><br><span class="line"></span><br><span class="line">egrep <span class="string">&#x27;:$&#x27;</span> <span class="regexp">/etc/i</span>nittab                         <span class="comment"># 打印 /etc/inittab 中以 : 结尾的行</span></span><br><span class="line">egrep <span class="string">&#x27;hello$&#x27;</span> file                             <span class="comment"># 打印 file 文件中以 hello 结尾的行</span></span><br></pre></td></tr></table></figure><h3 id="gt-大于号，输出重定向"><a href="#gt-大于号，输出重定向" class="headerlink" title="&gt; 大于号，输出重定向"></a>&gt; 大于号，输出重定向</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;添加新的内容&#x27;</span>&gt;test.txt                      <span class="comment"># 将 添加新的内容 字符串以覆盖的方式添加到 test.txt 文件中</span></span><br></pre></td></tr></table></figure><h3 id="lt-小于号，输入重定向，条件测试中的小于号"><a href="#lt-小于号，输入重定向，条件测试中的小于号" class="headerlink" title="&lt; 小于号，输入重定向，条件测试中的小于号"></a>&lt; 小于号，输入重定向，条件测试中的小于号</h3><h3 id="等于号，变量赋值"><a href="#等于号，变量赋值" class="headerlink" title="= 等于号，变量赋值"></a>= 等于号，变量赋值</h3><p>条件测试中的等号(数值比较中的 == )</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a=15</span>                                            <span class="comment"># 变量a赋值</span></span><br><span class="line">[<span class="attr">a=b]</span>                                           <span class="comment"># 判断变量a是否等于变量b(条件测试)</span></span><br><span class="line">((<span class="attr">a==20))</span>                                       <span class="comment"># 判断变量a是否等于变量b(数值比较)</span></span><br></pre></td></tr></table></figure><h3 id="加号"><a href="#加号" class="headerlink" title="+ 加号"></a>+ 加号</h3><p>算术运算符中的加号(1+3)<br>正则表达式中表示一个或者多个前面的字符(a+bc 表示a和bc之间有1个字符)</p><h3 id="gt-gt-输出重定向追加"><a href="#gt-gt-输出重定向追加" class="headerlink" title="&gt;&gt; 输出重定向追加"></a>&gt;&gt; 输出重定向追加</h3><h3 id="lt-lt-输入重定向追加"><a href="#lt-lt-输入重定向追加" class="headerlink" title="&lt;&lt; 输入重定向追加"></a>&lt;&lt; 输入重定向追加</h3><h3 id="减号"><a href="#减号" class="headerlink" title="- 减号"></a>- 减号</h3><p>运算符中的减号<br>命令的选项( ls -l )<br>上一次的工作目录( cd - 前提是先要在上一个目录进行变量设置 set OLDPWD 否则会提示OLDPWD变量未设定)<br>通配符和正则表达式中表示范围 [a-z]</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf - /home <span class="string">| tar -xvf -</span></span><br><span class="line"><span class="meta"># 表示输出或输入流，将前面的结果通过管道传递给后面作为对象进行操作</span></span><br></pre></td></tr></table></figure><p>表示输出或输入流,将前面的输出 ，通过管道交给后面的命令，前面的压缩，后面的解压</p><h3 id="‘’-单引号"><a href="#‘’-单引号" class="headerlink" title="‘’ 单引号"></a>‘’ 单引号</h3><p>解决赋值空格的问题(a=’1 2’)<br>阻止shell替换</p><h3 id="“”-双引号"><a href="#“”-双引号" class="headerlink" title="“” 双引号"></a>“” 双引号</h3><p>和单引号一样的作用<br>阻止shell部分字符替换，对$ ! 等无效</p><h3 id="反引号-相当于"><a href="#反引号-相当于" class="headerlink" title="`` 反引号 相当于$()"></a>`` 反引号 相当于$()</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span>=`ls`                                      <span class="comment"># 命令行替换，设置变量a为shell命令ls</span></span><br></pre></td></tr></table></figure><h3 id="百分号"><a href="#百分号" class="headerlink" title="% 百分号"></a>% 百分号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $((<span class="number">100</span>%<span class="number">10</span>))                            <span class="comment"># 算术运算中的模运算</span></span><br></pre></td></tr></table></figure><p>vi中替换操作中表示所有行(末行模式下，替换所有前面加%)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%s<span class="regexp">/D/</span>d 表示将文本中的所有的D替换为d</span><br></pre></td></tr></table></figure><h3 id="单圆括号"><a href="#单圆括号" class="headerlink" title="()单圆括号"></a>()单圆括号</h3><p>在子shell中执行命令，会继承父shell的变量.</p><h2 id="命令的排序"><a href="#命令的排序" class="headerlink" title="命令的排序"></a>命令的排序</h2><ol><li>&amp;&amp; || 具有逻辑判断的</li><li>; (分号) 不具备逻辑判断，只用作链接两个命令的字符</li></ol>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houdini 外部编辑器安装配置</title>
      <link href="2020/03/30/%E7%AD%86%E8%A8%98/houdini/Houdini%20Python%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>2020/03/30/%E7%AD%86%E8%A8%98/houdini/Houdini%20Python%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Python环境配置"><a href="#Python环境配置" class="headerlink" title="Python环境配置"></a>Python环境配置</h1><h2 id="Houdini-Expr-Editor"><a href="#Houdini-Expr-Editor" class="headerlink" title="Houdini Expr Editor"></a>Houdini Expr Editor</h2><p><a href="http://cgtoolbox.com/">http://cgtoolbox.com/</a> 下载并安装Houdini Expr Editor</p><p><strong>安装方法</strong></br><br>将下载文件解压到houdini plugins文件内，然后在env环境变量中添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HOUDINI_PATH</span> = <span class="string">&quot;/home/luomit/Sidefx_plugins/HoudiniExprEditor_v1_3_3/;&amp;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p><a href="https://code.visualstudio.com/">下载</a><br>安装vscode编辑器</p><p><strong>配置插件</strong></br><br><strong>vscode-icons</strong>    #在vscode中的文件会根据不同格式显示为不同的文件图标</br><br><strong>Bracket Pair Colorizer</strong>  #括号会根据对来分配随即颜色用于区分括号</br><br><strong>Highlight Matching Tag</strong>  #高亮选中括号的另一端</br><br><strong>Auto Rename Tag</strong> #HTML自动匹配标签</br><br><strong>Path Intellisense</strong>   #智能路径提示</br><br><strong>Material Theme</strong>  #vscode皮肤主题</br><br><strong>Auto Import</strong> #代码补全</br><br><strong>Indent-Rainbow</strong>  #对其颜色背景，根据缩进不同赋予不同颜色背景</br><br><strong>Prettier</strong>    #代码格式化，美化你的代码书写格式</br><br><strong>Sublime Text Keymap and Settings Importer</strong>   #sublime text 快捷键</br><br><strong>WakaTime</strong>    #记录的的代码时光</br><br><strong>Code Runner</strong> #代码运行</p><h2 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h2><p><a href="https://www.sublimetext.com/3">下载</a> 安装Sublime Text 3编辑器</p><ul><li><p>安装包管理</br><br>安装完成后Ctrl +Shift + P 键入Install Package Control安装包管理器</p></li><li><p>安装软件</br><br>等待安装完毕后Ctrl +Shift + P 键入Install 就会有一项Package Control:Install Package的选项点击它，等待它再次弹出窗口时键入想要安装的插件名即可</p></li><li><p>常用插件</br></p></li></ul><p><strong>ConvertToUTF8</strong></br><br><strong>SublimeTmpl</strong></br><br><strong>A File Icon</strong></br><br><strong>Localization</strong></br><br><strong>SublimeTmpl</strong></br><br><strong>VEX</strong></br><br><strong>BracketHighlighter</strong></br><br><strong>Material Theme</strong></br><br><strong>Alignment</strong></br><br><strong>AutoFileName</strong></br><br><strong>SideBar</strong></br><br><strong>WakaTime</strong></br></p><h2 id="Houdini-Python"><a href="#Houdini-Python" class="headerlink" title="Houdini Python"></a>Houdini Python</h2><p>Edit &gt; Preferences &gt; Set External Experssions Editor &gt; Double Click(双击)<br>选择vscode程序;</br>Ubuntu19使用<code>whereis &quot;软件名&quot;</code>查找软件安装路径如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">luomit@luomit&gt;&gt;&gt; whereis code      </span><br><span class="line">code: &#x2F;snap&#x2F;bin&#x2F;code.url-handler &#x2F;snap&#x2F;bin&#x2F;code</span><br></pre></td></tr></table></figure><h1 id="Pyqt5-安装与配置"><a href="#Pyqt5-安装与配置" class="headerlink" title="Pyqt5 安装与配置"></a>Pyqt5 安装与配置</h1><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>查看pip3的版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pip3</span> -v</span><br></pre></td></tr></table></figure><p>若是返回<br>command not found: pip<br>则执行下面一行代码安装pip3</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install python3-pip</span><br></pre></td></tr></table></figure><h2 id="pyqt5"><a href="#pyqt5" class="headerlink" title="pyqt5"></a>pyqt5</h2><p>使用pip3安装pyqt5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyqt5</span><br></pre></td></tr></table></figure><p>安装其他的工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pyqt5  </span><br><span class="line">sudo apt-get install pyqt5-dev-tools</span><br><span class="line">sudo apt-get install qttools5-dev-tools</span><br></pre></td></tr></table></figure><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>使用终端运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qtchooser -run-tool=designer -qt=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>或者修改配置文件/usr/lib/x86_64-linux-gnu/qt-default/qtchooser/default.conf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/x86_64-linux-gnu/qt5/<span class="built_in">bin</span></span><br><span class="line">/usr/lib/x86_64-linux-gnu</span><br></pre></td></tr></table></figure><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>检验是否正确安装,创建一个uic.py的文件，内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">child = subprocess.Popen([<span class="string">&#x27;pyuic5&#x27;</span> ,<span class="string">&#x27;-x&#x27;</span>,sys.argv[<span class="number">1</span>]],stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(child.communicate()[<span class="number">0</span>],encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/36757752/how-to-install-pyqt5-in-python-3-ubuntu-14-04"><strong>参考</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime text </tag>
            
            <tag> houdini </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houdini python开发</title>
      <link href="2020/03/30/%E7%AD%86%E8%A8%98/houdini/houdini%20python%E5%BC%80%E5%8F%91/"/>
      <url>2020/03/30/%E7%AD%86%E8%A8%98/houdini/houdini%20python%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h4 id="节点创建"><a href="#节点创建" class="headerlink" title="节点创建"></a>节点创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hou.pwd().createNode(<span class="string">&quot;sphere&quot;</span>,name=<span class="string">&quot;球体&quot;</span>)  </span><br><span class="line"><span class="comment"># hou.pwd()表示当前窗口所在工作路径 creatNode(节点原名，name=“设置新的名字”)    </span></span><br><span class="line">hou.cd(<span class="string">&quot;/obj&quot;</span>) </span><br><span class="line"><span class="comment"># hou.cd() 移动当前窗口工作路径到指定的新路径上</span></span><br></pre></td></tr></table></figure><h4 id="节点删除"><a href="#节点删除" class="headerlink" title="节点删除"></a>节点删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node = hou.node(<span class="string">&quot;/obj/man/box1&quot;</span>)</span><br><span class="line">node.destroy()</span><br><span class="line"><span class="comment"># 先指定node为一个节点，再使用.destroy()来删除这个节点</span></span><br><span class="line">hou.node(<span class="string">&quot;cname&quot;</span>).destroy()</span><br><span class="line"><span class="comment"># 可以直接指定，直接删除</span></span><br></pre></td></tr></table></figure><h4 id="节点连线"><a href="#节点连线" class="headerlink" title="节点连线"></a>节点连线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hou.node(<span class="string">&quot;merge1&quot;</span>).setFirstInput(hou.node(<span class="string">&quot;sphere1&quot;</span>))</span><br><span class="line">hou.node(<span class="string">&quot;merge1&quot;</span>).setNextInput(hou.node(<span class="string">&quot;box1&quot;</span>))</span><br><span class="line"><span class="comment"># 假如我在geo1节点内创建了merge1、box1、sphere1三个节点，想要连接这三个节点</span></span><br><span class="line"><span class="comment"># 首先确认当前窗口所在路径hou.pwd(),hou.cd(&quot;/geo1&quot;) 然后移动到geo1内</span></span><br><span class="line"><span class="comment"># 再使用上面两行代码进行依次连接节点</span></span><br><span class="line"><span class="comment"># setFirstInput设置地一个输入端接入连线，setNextInput设置下一个输入端连线</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有一样隐隐约约</span><br></pre></td></tr></table></figure><h4 id="断开节点"><a href="#断开节点" class="headerlink" title="断开节点"></a>断开节点</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mer</span> = hou.node(<span class="string">&quot;merge1&quot;</span>)</span><br><span class="line"><span class="attribute">mer</span>.setInput(<span class="number">0</span>,None)</span><br><span class="line"><span class="comment"># 设置merge1节点第一号输入端为None(断开)</span></span><br></pre></td></tr></table></figure><h4 id="父与子"><a href="#父与子" class="headerlink" title="父与子"></a>父与子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hou.parent(<span class="string">&quot;merge1&quot;</span>)</span><br><span class="line"><span class="comment"># 返回当前节点merge1的父级节点</span></span><br><span class="line">hou.node(<span class="string">&quot;.&quot;</span>).children()</span><br><span class="line"><span class="comment"># 返回当前节点下的所有节点</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenColorIO</title>
      <link href="2020/03/28/%E7%AD%86%E8%A8%98/houdini/OpenColorIO-Configuration/"/>
      <url>2020/03/28/%E7%AD%86%E8%A8%98/houdini/OpenColorIO-Configuration/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p><a href="https://www.bilibili.com/video/BV1Yb411E7fY">视频教程</a><br><a href="https://github.com/imageworks/OpenColorIO-Configs">下载</a></p><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="Houdini"><a href="#Houdini" class="headerlink" title="Houdini"></a>Houdini</h2><p>在文档中添加config.ocio的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OCIO &#x3D; &quot;D:\User\luomit\Documets\OpenColorIO-Configs-master\aces_1.0.3\config.ocio&quot;</span><br></pre></td></tr></table></figure><h2 id="Maya"><a href="#Maya" class="headerlink" title="Maya"></a>Maya</h2><p>在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Windows &gt; Setting&#x2F;Preferences &gt; Preferences &gt; ColorManagement &gt; OCIO Config Path</span><br></pre></td></tr></table></figure><p>指定config.ocio的路径并启用Use OCIO Configuration</p><h2 id="Nuke"><a href="#Nuke" class="headerlink" title="Nuke"></a>Nuke</h2><ul><li><p>临时设置<br>S键调出工程设置，在Color栏设置Color Management为OCIO<br>就可以在项目中使用opencolorio</p></li><li><p>永久设置<br>Edit &gt; Preferences &gt; Project Defaults &gt; Color Managment<br>选择aces色彩空间点击OK保存即可</p></li></ul><h1 id="OpenColor基本工作流程"><a href="#OpenColor基本工作流程" class="headerlink" title="OpenColor基本工作流程"></a>OpenColor基本工作流程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s&#x3D;&gt;start: 基础素材色彩空间处理</span><br><span class="line">o&#x3D;&gt;output: 输出到CG工作流程中</span><br><span class="line">i&#x3D;&gt;input: 导入CG渲染图像合成处理</span><br><span class="line">c&#x3D;&gt;convert: 转换为SRGB或其他适用的色彩空间格式</span><br><span class="line">e&#x3D;&gt;end: 转换为SRGB或其他适用的色彩空间格式</span><br><span class="line"></span><br><span class="line">s-&gt;o-&gt;i-&gt;c-&gt;e</span><br></pre></td></tr></table></figure><h2 id="Nuke中的基础节点流"><a href="#Nuke中的基础节点流" class="headerlink" title="Nuke中的基础节点流"></a>Nuke中的基础节点流</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">set cut_paste_input [stack 0]</span><br><span class="line">version 11.3 v5</span><br><span class="line">Read &#123;</span><br><span class="line"> inputs 0</span><br><span class="line"> file_type png</span><br><span class="line"> file F:&#x2F;Houdini&#x2F;Tree_Cloud&#x2F;model&#x2F;tree&#x2F;palm&#x2F;Sample_Palm&#x2F;Bark&#x2F;Palmetto_bark_2.png</span><br><span class="line"> format &quot;1024 4096 0 0 1024 4096 1 &quot;</span><br><span class="line"> origset true</span><br><span class="line"> name Read7</span><br><span class="line"> label 渲染素材</span><br><span class="line"> selected true</span><br><span class="line"> xpos 586</span><br><span class="line"> ypos 325</span><br><span class="line">&#125;</span><br><span class="line">OCIOColorSpace &#123;</span><br><span class="line"> in_colorspace &quot;ACES - ACEScg&quot;</span><br><span class="line"> out_colorspace &quot;Utility - sRGB - Texture&quot;</span><br><span class="line"> name OCIOColorSpace3</span><br><span class="line"> selected true</span><br><span class="line"> xpos 748</span><br><span class="line"> ypos 361</span><br><span class="line">&#125;</span><br><span class="line">Write &#123;</span><br><span class="line"> file_type png</span><br><span class="line"> checkHashOnRead false</span><br><span class="line"> name Write2</span><br><span class="line"> label 渲染输出</span><br><span class="line"> selected true</span><br><span class="line"> xpos 906</span><br><span class="line"> ypos 355</span><br><span class="line">&#125;</span><br><span class="line">Read &#123;</span><br><span class="line"> inputs 0</span><br><span class="line"> file_type png</span><br><span class="line"> file F:&#x2F;Houdini&#x2F;Tree_Cloud&#x2F;model&#x2F;tree&#x2F;palm&#x2F;Sample_Palm&#x2F;Bark&#x2F;Palmetto_bark_2.png</span><br><span class="line"> format &quot;1024 4096 0 0 1024 4096 1 &quot;</span><br><span class="line"> origset true</span><br><span class="line"> colorspace sRGB</span><br><span class="line"> name Read2</span><br><span class="line"> label 普通纹理</span><br><span class="line"> selected true</span><br><span class="line"> xpos 65</span><br><span class="line"> ypos 312</span><br><span class="line">&#125;</span><br><span class="line">OCIOColorSpace &#123;</span><br><span class="line"> in_colorspace &quot;Utility - sRGB - Texture&quot;</span><br><span class="line"> out_colorspace &quot;ACES - ACEScg&quot;</span><br><span class="line"> name OCIOColorSpace2</span><br><span class="line"> selected true</span><br><span class="line"> xpos 222</span><br><span class="line"> ypos 355</span><br><span class="line">&#125;</span><br><span class="line">Write &#123;</span><br><span class="line"> file_type exr</span><br><span class="line"> first_part none</span><br><span class="line"> name Write1</span><br><span class="line"> label 输出纹理到制作</span><br><span class="line"> selected true</span><br><span class="line"> xpos 384</span><br><span class="line"> ypos 349</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Houdini-amp-Maya"><a href="#Houdini-amp-Maya" class="headerlink" title="Houdini&amp;Maya"></a>Houdini&amp;Maya</h2><p>从Nuke中导入处理好的原始素材；纹理贴图、HDRI等进行CG创作输出ACES色彩空间的图像文件；</p><p><a href="https://blog.csdn.net/qq_31001889/article/details/86625317">Hexo流程图</a><br>hexo使用流程图需要安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> opencolorio </tag>
            
            <tag> color </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonPJManegement</title>
      <link href="2020/03/17/%E7%AD%86%E8%A8%98/houdini/PythonPJMane/"/>
      <url>2020/03/17/%E7%AD%86%E8%A8%98/houdini/PythonPJMane/</url>
      
        <content type="html"><![CDATA[<h2 id="创建基础框架"><a href="#创建基础框架" class="headerlink" title="创建基础框架"></a>创建基础框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hutil.Qt <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">proj = hou.getenv(<span class="string">&#x27;JOB&#x27;</span>)+<span class="string">&#x27;/&#x27;</span></span><br><span class="line"><span class="comment">#使用hou.getenv获取当前工程的环境变量属性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openScene</span>(<span class="params">item</span>):</span></span><br><span class="line">    hipFile = proj + item.data()</span><br><span class="line">    hou.hipFile.load(hipFile)</span><br><span class="line">    <span class="comment">#print hipFile</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onCreateInterface</span>():</span></span><br><span class="line">    widget = QtWidgets.QLabel(proj)</span><br><span class="line">    listwidget = QtWidgets.QListWidget()</span><br><span class="line">    <span class="comment">#print &#x27;\n&#x27; &quot;ProjectPath(&quot; + proj +&#x27;)&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(proj):</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">&quot;.hip&quot;</span>):</span><br><span class="line">            listwidget.addItem(file)</span><br><span class="line">            </span><br><span class="line">    <span class="comment">#将按钮链接到函数上执行打开文件的指令</span></span><br><span class="line">    listwidget.doubleClicked.connect(openScene)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> listwidget</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> project </tag>
            
            <tag> manage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houdini安装与配置</title>
      <link href="2020/03/06/%E7%AD%86%E8%A8%98/houdini/Houdini%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>2020/03/06/%E7%AD%86%E8%A8%98/houdini/Houdini%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网<a href="https://www.sidefx.com/download/">下载</a><br>也可以从国内各大CG论坛及素材网站下载如：<br><a href="https://filecr.com/windows/houdini-fx/">filecr.com</a>不科学上网不度盘直接下载速度快<br><a href="https://www.vfxforce.cn/">VFXFORCE</a><br><a href="http://qny.ccvfx.cn/">CCVFX</a><br><a href="https://c4dsky.com/">书生CG资源站</a><br>…<br>官网下载流程演示<a href="https://www.sidefx.com/download/">https://www.sidefx.com/download/</a> 选这一种登录方式登录，如果你一种账号都没有就注册一个也是很快的。<br>登录以后选择Get下的Downlode如下图<br><img src="/img/H_downlode.jpg"><br>然后直接点击Downlode下载，网页会根据你当前所使用的系统来下载当前最新稳定版本的软件；如果要下载指定版本可以滑到最下方可看见PRODUCTION BUILDSD点击选择你要下载的版本即可。<br><img src="/img/H_downlode1.jpg"><br><img src="/img/H_downlode2.jpg"></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>windous的安装网上很多也很简单<br>[百度]<a href="https://jingyan.baidu.com/article/495ba841f5d02738b30ede23.html">https://jingyan.baidu.com/article/495ba841f5d02738b30ede23.html</a></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>根据上面的方法下载好后应该是以tag.gz结尾的压缩包如houdini-17.5.460-linux_x86_64_gcc6.3.tga.gz;<br>解压到一个位置得到的文件如下所示<br><img src="/img/H_linux.png"><br>然后使用终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /下载/houdini-17.5.460-linux_x86_64_gcc6.3/</span><br><span class="line">sudo ./houdini.install</span><br></pre></td></tr></table></figure><p>终端会出现一系列的提示默认yes即可<br>待续….</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="外部编辑器配置"><a href="#外部编辑器配置" class="headerlink" title="外部编辑器配置"></a>外部编辑器配置</h2><p>参考本博客”<a href="https://luomit.xyz/2020/03/30/Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">Python环境配置</a>“</p><h2 id="houdini文档的配置-Windows"><a href="#houdini文档的配置-Windows" class="headerlink" title="houdini文档的配置(Windows)"></a>houdini文档的配置(Windows)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># ---------------- &amp;&amp; Plug-ni PATH &amp;&amp; -------------------</span><br><span class="line">#自定义插件目录</span><br><span class="line">MEHOU &#x3D; D:\Users\luomit\Documents\houdini18.0\plug-in</span><br><span class="line"></span><br><span class="line">MOPS &#x3D; $MEHOU&#x2F;MOPS-master</span><br><span class="line">DM &#x3D; $MEHOU&#x2F;DM-v1.5.25</span><br><span class="line">HDRI &#x3D; $MEHOU&#x2F;Hdri-Link-for-Houdini-master</span><br><span class="line">OPX &#x3D; $MEHOU&#x2F;optix</span><br><span class="line"></span><br><span class="line">ARNOLD &#x3D; C:\arnold\htoa\htoa-5.1.0_r9289183_houdini-$&#123;HOUDINI_VERSION&#125;\htoa-5.1.0_r9289183_houdini-$&#123;HOUDINI_VERSION&#125;</span><br><span class="line">GAMETOOL &#x3D; $MEHOU&#x2F;SideFX_GameDevToolset_Houdini17.5_1.232</span><br><span class="line">EDITOR &#x3D; &quot;C:\Users\luomit\AppData\Local\Programs\Microsoft VS Code\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">#PDG_IMAGEMAGICK &#x3D; &quot;C:\luomitPC\ImageMagick-7.0.9-Q16\magick.exe&quot;</span><br><span class="line">#PDG_FFMPEG &#x3D; &quot;C:\Program Files\ffmpeg-20200227-9b22254-win64-static\bin\ffmpeg.exe&quot;</span><br><span class="line">---------------- &amp;&amp; Plug-ni PATH &amp;&amp; -------------------</span><br><span class="line"></span><br><span class="line"># --------------------- &amp;&amp; PATH &amp;&amp; -----------------------</span><br><span class="line">HOUDINI_PATH &#x3D; &quot;$HOUDINI_PATH;$GAMETOOL;$ARNOLD;$REDSHIFT;$MOPS;&amp;&quot;</span><br><span class="line">PATH &#x3D; &quot;$PATH;$EDITOR;$GAMETOOL&#x2F;bin;$ARNOLD&#x2F;scripts&#x2F;bin;$REDSHIFTPATH&quot;</span><br><span class="line"># --------------------- &amp;&amp; PATH &amp;&amp; -----------------------</span><br><span class="line"></span><br><span class="line">HOUDINI_BUFFERDSAVE&#x3D;1</span><br><span class="line">HOUDINI_UISCALE&#x3D;120</span><br><span class="line">HOUDINI_EXTERNAL_HELP_BROWSER&#x3D;1</span><br><span class="line">HOUDINI_USE_HFS_PYTHON&#x3D;1</span><br><span class="line">HOUDINI_DOS_ERROR&#x3D;2</span><br></pre></td></tr></table></figure><h2 id="houdini文档的配置-Linux"><a href="#houdini文档的配置-Linux" class="headerlink" title="houdini文档的配置(Linux)"></a>houdini文档的配置(Linux)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># ---------------- &amp;&amp; Plug-ni PATH &amp;&amp; -------------------</span><br><span class="line">#自定义插件目录</span><br><span class="line">MEHOU &#x3D; D:\Users\luomit\Documents\houdini18.0\plug-in</span><br><span class="line"></span><br><span class="line">MOPS &#x3D; $MEHOU&#x2F;MOPS-master</span><br><span class="line">DM &#x3D; $MEHOU&#x2F;DM-v1.5.25</span><br><span class="line">HDRI &#x3D; $MEHOU&#x2F;Hdri-Link-for-Houdini-master</span><br><span class="line">OPX &#x3D; $MEHOU&#x2F;optix</span><br><span class="line"></span><br><span class="line">ARNOLD &#x3D; C:\arnold\htoa\htoa-5.1.0_r9289183_houdini-$&#123;HOUDINI_VERSION&#125;\htoa-5.1.0_r9289183_houdini-$&#123;HOUDINI_VERSION&#125;</span><br><span class="line"></span><br><span class="line">GAMETOOL &#x3D; $MEHOU&#x2F;SideFX_GameDevToolset_Houdini17.5_1.232</span><br><span class="line"></span><br><span class="line"># --------------------- &amp;&amp; PATH &amp;&amp; -----------------------</span><br><span class="line">HOUDINI_PATH &#x3D; &quot;$HOUDINI_PATH:$GAMETOOL:$ARNOLD:$REDSHIFT:$MOPS:&amp;&quot;</span><br><span class="line">PATH &#x3D; &quot;$PATH:$EDITOR:$GAMETOOL&#x2F;bin:$ARNOLD&#x2F;scripts&#x2F;bin:$REDSHIFTPATH&quot;</span><br><span class="line"># --------------------- &amp;&amp; PATH &amp;&amp; -----------------------</span><br><span class="line"></span><br><span class="line">HOUDINI_BUFFERDSAVE&#x3D;1</span><br><span class="line">HOUDINI_UISCALE&#x3D;120</span><br><span class="line">HOUDINI_EXTERNAL_HELP_BROWSER&#x3D;1</span><br><span class="line">HOUDINI_USE_HFS_PYTHON&#x3D;1</span><br><span class="line">HOUDINI_DOS_ERROR&#x3D;2</span><br></pre></td></tr></table></figure><h2 id="常用插件的配置"><a href="#常用插件的配置" class="headerlink" title="常用插件的配置"></a>常用插件的配置</h2><p><code>Arnold</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH &#x3D; &quot;Arnold目录&#x2F;scripts&#x2F;bin;$PATH&quot;</span><br><span class="line">HOUDINI_PATH &#x3D; &quot;Arnold目录;&amp;</span><br></pre></td></tr></table></figure><p><code>Redshift</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HOUDINI_DSO_ERROR &#x3D; 2</span><br><span class="line">PATH &#x3D; &quot;C:&#x2F;ProgramData&#x2F;Redshift&#x2F;bin;$PATH&quot;</span><br><span class="line">HOUDINI_PATH &#x3D; &quot;C:&#x2F;ProgramData&#x2F;Redshift&#x2F;Plugins&#x2F;Houdini&#x2F;16.5.268;&amp;&quot;</span><br></pre></td></tr></table></figure><p><code>Deadline</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HOUDINI_PATH &#x3D; &quot;$HOUDINI_PATH;C:&#x2F;Users&#x2F;Administrator&#x2F;AppData&#x2F;Local&#x2F;Thinkbox&#x2F;Deadline10&#x2F;submitters&#x2F;HoudiniSubmitter;&amp;&quot;</span><br><span class="line">HOUDINI_MENU_PATH &#x3D; &quot;$HOUDINI_MENU_PATH;C:&#x2F;Users&#x2F;Administrator&#x2F;AppData&#x2F;Local&#x2F;Thinkbox&#x2F;Deadline10&#x2F;submitters&#x2F;HoudiniSubmitter;&amp;&quot;</span><br></pre></td></tr></table></figure><p><code>Qlib</code><br>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/qLab/qLib.git</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QLIB &#x3D; &quot;$MEHOU\qLib-master\&quot;</span><br><span class="line">QOTL&#x3D; &quot;$QLIB&#x2F;otls&quot;</span><br><span class="line">HOUDINI_OTLSCAN_PATH &#x3D; &quot;$QOTL&#x2F;base;$QOTL&#x2F;future;$QOTL&#x2F;experimental;$HOUDINI_OTLSCAN_PATH;&amp;&quot;</span><br><span class="line">HOUDINI_PATH &#x3D; &quot;$QLIB;&amp;&quot;</span><br></pre></td></tr></table></figure><p><code>GameDevelopment</code><br>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/sideeffects/GameDevelopmentToolset.git</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HOUDINI_PATH &#x3D; C:\Users\Luiz\Documents\GameDevelopmentToolset;&amp;</span><br><span class="line">PATH &#x3D; C:\Users\Luiz\Documents\GameDevelopmentToolset\bin;$PATH</span><br></pre></td></tr></table></figure><h2 id="关于h18复制粘贴报错"><a href="#关于h18复制粘贴报错" class="headerlink" title="关于h18复制粘贴报错"></a>关于h18复制粘贴报错</h2><p>在某群有群友上传这里做个备份，需要的朋友自取</br><br><a href="https://luomit.lanzous.com/ic5g78d">文件下载</a><br>将两个dll复制到安装目录下替换即可</p><p>未完…</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="2020/02/25/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>2020/02/25/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h1><p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML(标准通用标记语言的一个应用)<br>或XML(便准通用标记语言的一个子集)等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配<br>合各种脚本语言动态的对网页各元素进行格式化。CSS能够对网页中元素位置的排版进行像素级精确控制，<br>支持几乎所有的字体号样式，拥有对网页对象模型样式编辑的能力。</p><h1 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h1><h2 id="css语法说明"><a href="#css语法说明" class="headerlink" title="css语法说明"></a>css语法说明</h2><p>每个CSS样式由两部分组成，即选择符和声明，而声名又分为属性和属性值两部分；<br>属性需放在花括号中，属性与属性值用冒号隔开，每条声明用分号结束；<br>当一个声名中有多个属性和属性值时，属性和属性不分先后顺序；<br>在书写样式的过程中，空格、换行等操作不影响显示；<br>例如：idv{width:200px; height:200px; background:red;}</p><h2 id="样式的建立和使用方法"><a href="#样式的建立和使用方法" class="headerlink" title="样式的建立和使用方法"></a>样式的建立和使用方法</h2><p>内部样式表、外部样式表和内联样式表</p><p><code>内部样式表(嵌套到页面中)</code><br>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    css语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：使用style标记创建样式时，最好将该标记写在<head></head>内；</p><p><code>外部样式表</code><br>外部样式表的两种方式<br>a.外部样式表的创建<br>b.外部样式表的导入</p><p>方法一:<br>    语法:<link rel="stylesheet" type="text/css" href="目标文件的路径及目标文件全称"/><br>    说明：使用link元素导入外部样式表时，需要将该元素写在文档头部，即<head></head>内；<br>    rel：用于定义文档关联，表示关联样式表； type：定义文档类型；</p><p>方法二：<br>    语法：<br>    <style type="text/css"><br>        @import url(“目标文件的路径以及文件名全称”)；<br>    </style><br>    说明：@和import之间没有空格，url和小括号之间也没有空格；括号内加双引号，结尾必须以分号结束；</p><p>link和import的区别<br>(1)来源不同：link属于html标签，而@import完全是CSS提供的一种方式。link标签除了可以加载CSS外，还可以做很多其他的事情，比如定义RSS，定义rel连接属性，@import只能加载CSS；<br>(2)加载顺序：当一个网页在加载时(就是被浏览者浏览的时候)，link引入的CSS会与html内容同时被加载，而@import引用的CSS会等到html内容全部加载完成再加载；这就导致页面在一开始加载时丢失样式，内容混乱；<br>(3)兼容性：@import时CSS2.1提出的，所以老的浏览器不支持，@import只在IE5以上版本的浏览器才能识别，而link标签没有这个问题；<br>(4)dom控制样式：当使用JavaScript控制dom去改变样式时，只能使用link标签来引用CSS，因为@import不支持dom的样式控制方法；</p><p><code>内联样式表(表行间样式，内行样式，嵌入式样式)</code><br>语法：&lt;标签 style=”属性:属性值;属性:属性值;”&gt;&lt;/标签&gt;<br>例如：<div style="width:100px;height:500px;"></div></p><p><code>样式表的优先级</code><br>内联样式表在页面中优先级高于内部样式表和外部样式表;外部样式表和内部样式表的优先级取决于两者在页面中书写的先后顺序；</p><h1 id="CSS选择器-选择符"><a href="#CSS选择器-选择符" class="headerlink" title="CSS选择器(选择符)"></a>CSS选择器(选择符)</h1><p>选择符的定义：<br>    选择符表示要定义的对象，可以是元素本身，也可以是一类元素或者制定名称的元素。<br>常用的选择符有十多种类型，id选择符，class选择符，通配符，群组选择符，包含选择符，伪类选择符，伪对象选择符。</p><h2 id="元素选择符-类型选择符-标签选择符-element选择器"><a href="#元素选择符-类型选择符-标签选择符-element选择器" class="headerlink" title="元素选择符/类型选择符/标签选择符(element选择器)"></a>元素选择符/类型选择符/标签选择符(element选择器)</h2><p>语法：元素名称{属性:属性值;}<br>类型选择符是根据html语言中的标记来直接定义</p><p>说明：<br>    a.元素选择符就是以文档语言对象类型作为选择符，即使用结构中元素名称作为选择符；例如body、div、p、img、strong、span等。<br>    b.所有的页面元素都可以作为选择符；<br>用法：<br>    (1)如果想改变某个元素的默认样式时，可以使用类型选择符；(如：改变一个p段落样式)<br>    (2)当想要统一文档某个元素的显示效果时，可以使用类型选择符；(改变文档所有p段落样式)</p><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>语法：#id名{属性:属性值;}<br>说明：<br>(1)当我们使用id选择符时，应该为每个元素定义一个id属性；如：<div id="top"></div><br>(2)id选择器的语法格式是”#”加上自定义的id名；如：#box{width:300px;height:500px;}<br>(3)取名时要取英文名，不能取关键字：(所有的标记和属性都是关键字)<br>(4)一个id名称只能对应文档中一个具体的元素对象，因为id只能定义页面中某一个唯一的元素对象。<br>(5)最大的用处：创建网页的外部结构</p><h2 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h2><p>语法：.class名{属性:属性值;}<br>说明：<br>    当我们使用类型选择符时，应该先为每一个元素定义一个类名称，类选择符的语法格式如：<div class="top"></div><br>用法：<br>    class选择符更适合定义一种类型样式；</p><h2 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h2><p>语法：选择符1,选择符2,选择符3….{属性:属性值;}<br>说明：当有多个选择符应用相同的样式时，可以将选择符用”,”分隔的方式，合并为一组<br>实例：.top,#nav,p{width:100px;}</p><h2 id="包含选择器"><a href="#包含选择器" class="headerlink" title="包含选择器"></a>包含选择器</h2><p>语法：选择符1(父) 选择符2(子){属性:属性值;}<br>说明：选择符1和选择符2用空格隔开，含义就是选择符1包含所有选择符2；<br>实例：div ul li{height:25px;}</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>语法：*{属性:属性值;}<br>说明：通配选择符的写法是”*”,其含义是所有元素<br>用法：常用来重置样式</p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>a:link{color:red;}      <code>未访问的连接状态</code><br>a:visited{color:green;} <code>已访问的连接状态</code><br>a:hover{color:blue;}    <code>鼠标滑过时的连接状态</code><br>a:avtive{color:yellow;} <code>鼠标点击时的连接状态</code><br>说明：<br>    (1)当这四类超链接伪类选择符联合使用时，应注意他们的顺序，正常的顺序为：a,a:link,a:visited,a:hover,a:active,错误的顺序有时会使超链接的样式失效；<br>    (2)为了简化代码，可以把伪类选择符中相同的声名提出来放在a选择符中；例如：a{color:red;} a:hover{color:green;}表示超链接的三种状态都相同，只有鼠标划过变化颜色。</p><p>常用于超链接</p><h2 id="转载符的权重"><a href="#转载符的权重" class="headerlink" title="转载符的权重"></a>转载符的权重</h2><p>css中用四位数表示权重，权重的表达法方式如：0,0,0,0<br>类型选择符的权重为0001 a p div span form … 1<br>class选择符的权重为0010 .class 10<br>id选择符的权重为0100 # 100<br>子选择符的权重为0000<br>属性选择符的权重为0010<br>伪类选择符的权重为0010<br>伪元素选择符的权重为0010<br>包含选择符的权重：为包含选择符的权重之和<br>内联样式的权重为1000<br>继承样式的权重为1000<br>注：如果权重相同时，则执行后写的样式；</p><h2 id="html与css的注释"><a href="#html与css的注释" class="headerlink" title="html与css的注释"></a>html与css的注释</h2><p>html的注释<!--注释的内容--><br>css的注释/<em>–注释的内容–</em>/</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5基础入门</title>
      <link href="2020/02/24/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/HTML5/"/>
      <url>2020/02/24/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/HTML5/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML的基本格式"><a href="#HTML的基本格式" class="headerlink" title="HTML的基本格式"></a>HTML的基本格式</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>                 <span class="comment">&lt;!---命名文档类型HTML5---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>                <span class="comment">&lt;!---说明我们写的是标记语言HTML文档---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>                          <span class="comment">&lt;!---头部文件(描述区)---&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>      <span class="comment">&lt;!---编码格式utf-8、gb2312、gbk---&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>        <span class="comment">&lt;!---网页标题---&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>                          <span class="comment">&lt;!---命网页主体---&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5的基本语法"><a href="#HTML5的基本语法" class="headerlink" title="HTML5的基本语法"></a>HTML5的基本语法</h1><h2 id="HTML5标记的语法"><a href="#HTML5标记的语法" class="headerlink" title="HTML5标记的语法"></a>HTML5标记的语法</h2><p><code>常规标记</code></p><p>&lt;标记名称 属性1名=”属性1值” 属性2名=”属性2值” ……&gt;&lt;/标记名称&gt;</p><p><code>空标记</code></p><p>&lt;标记名称 属性1名=”属性1值”/&gt;<br>标记有两种形式，我们分别称它们为单标记和双标记或者空标记和普通标记;<br>说明：<br>    (1)写在&lt;&gt;括号里的第一个单词，叫做标记，也叫标签，也称做元素；<br>    (2)标记和属性用空格隔开，属性和属性值用等号相连接，属性值必须用双引号括起来；<br>    (3)一个标记可以有多个属性，属性和属性之间用空格隔开，属性不分先后顺序；<br>    (4)空标记是指没有结束标签的标记，必须使用”/“来关闭，例如:<hr/>;</p><h2 id="HTML5常用标签"><a href="#HTML5常用标签" class="headerlink" title="HTML5常用标签"></a>HTML5常用标签</h2><p><code>标题标签</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标题标签共有六级，一级字体最大；</p><p><code>字体标签</code></p><P></P>段落标签，标识一个段落(默认情况下段落与段落之间有段间距)<p><i></i>  <em></em><br>这两个标签都是使字体倾斜，一般情况下推荐使用<em></em>标签</p><p><b></b>  <strong></strong><br>设置文本加粗效果的标签，一般情况下推荐使用<strong></strong>标签，语义明确</p><p><u></u><br>设置文本下划线的标签</p><br/>空标签，换行标签<hr/>空标签，水平线标签<p><code>字符实体(转义字符)</code></p><!--&nbsp;--><p>空格</p><!--&gt;--><p>&gt;右尖括号</p><!--&lt;--><p>&lt;左尖括号</p><!--&copy;--><p>备案中图标</p><h1 id="HTML5列表"><a href="#HTML5列表" class="headerlink" title="HTML5列表"></a>HTML5列表</h1><p>HTML中有三种列表，分别是：无序列表，有序列表，自定义列表</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表的属性<br>(1)type 规定列表中的列表项目的项目符号的类型<br>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;I&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1 数字的有序列表默认有(1，2，3，4)<br>a 字母顺序的有序列表有(a,b,c,d)<br>A 大写字母的有序列表有(A,B,C,D)<br>i 罗马数字小写(i,ii,iii,iv)IV<br>I 罗马数字大写(I，II，III，)</p><p>(2)start 属性规定有序列表的开始点<br>语法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>     <span class="comment">&lt;!---definition description 定义描述---&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5超链接和图像"><a href="#HTML5超链接和图像" class="headerlink" title="HTML5超链接和图像"></a>HTML5超链接和图像</h1><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>语法：<br><a href="https://luomit.xyz" title="我的博客"> 链接文本或图片</a><br><a href="#">空连接</a></p><p>说明：<br>href部分中url后边跟的是链接页面的地址(包含文件名) title属性，当加入title属性是鼠标指针在这个对象上会显示title的内容；<br>target 属性定义了打开链接的目标窗口；<br>_blank 在新的浏览器标签页上打开一个新的窗口(保留原始页面)；<br>_self 在当前浏览器标签页打开新的跳转窗口，此为默认；</p><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>语法：<br><img src="图片路径" border="边框" alt="图片替代文本" title="图片标题" width="图片的宽度" heigth="图片的高度"/></p><p>说明：<br>属性src表示图片的来源(图像的存放路径)；<br>border属性标识了图像的面框；<br>width和height设定图像在页面上显示的宽高；<br>title这是当鼠标悬停在图片上时要显示的信息；<br>alt当图片不能正确显示的时候，可以用作提示的信息给用的属性，这样用户体验也许会好些；</p><h1 id="文件的相对路径与绝对路径"><a href="#文件的相对路径与绝对路径" class="headerlink" title="文件的相对路径与绝对路径"></a>文件的相对路径与绝对路径</h1><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>相对路径的写法：<br>(同级)当文件目录与目标目录在同一文件夹下时，直接书写文件名+文件后缀<br>(上级找下级)当当前文件夹和目标文件所处的文件夹在同一路径下时，目标文件夹名/目标文件全称+目标文件后缀<br>(下级找上级)当当前文件所处的文件夹和目标文件在同一目录时，使用../将当前文件跳转到上一级别目录同级文职再+目标文件名+目标文件后缀；例如../images/a01.jpg</p><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>例如:<br><img sec="D:/OneDrive - JJXY/luomitBlog/Github/cdn/img/cover/001jpg"></p><h1 id="HTML5常用元素"><a href="#HTML5常用元素" class="headerlink" title="HTML5常用元素"></a>HTML5常用元素</h1><h2 id="快标签"><a href="#快标签" class="headerlink" title="快标签"></a>快标签</h2><p>语法：<br><dic></div><br>说明：<br>没有具体含义，统称为快标签，用来设置文档区域，是文档布局常用对象</p><p>语法：<br><span></span><br>说明：<br>文本结点标签，可以是某一段文字或是某一个字</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><!--注释信息等--><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p>说明:<br>注：一对tr表示一行；一对td表示一个单元格(一列)</p><p>表的相关属性：<br>(1)width=”表格的宽度”<br>(2)height=”表格的高度”<br>(3)border=”表格的边框”<br>(4)bordercolor=”边框色”<br>(5)cellspacing=”单元格与单元格的间距”<br>(6)cellpadding=”单元格与内容的距离”<br>(7)aligh=”表格的对其方式”  取值：”left”、”center”、”right” (valigh=”垂直对齐”、top、buttom、middle)<br>(8)合并单元格属性:(td)     合并列：colspan”所有要合并的单元格列数”  合并行：rowspan=”所有要合并单元格的行数”</p><h2 id="表单元素与属性"><a href="#表单元素与属性" class="headerlink" title="表单元素与属性"></a>表单元素与属性</h2><p>表单的作用：<br>用来收集用户的信息</p><p><code>表单框</code></p><p><from name="表单名称" method="post/get" action="路径"></form></p><p><code>表单控件</code></p><input type=""/>语法：<input type="" name="" value="" size="" maxlenght="" />说明：`input：`表即可创建按钮、文本输入框、选择框等各种类型的输入字段`name：`属性标识表单域的名称`type：`属性标识表单控件的类型，大概有十多种`value：`属性定义表单域的默认值，其他属性根据type的不同而有所变化`maxlength`：控制最多输入的字符数`size：`控制框的宽度(以字符为单位)<p>(1)文本框<input type="text" value="默认值"/><br>(2)密码框<input type="password"/><br>(3)提交按钮<input type="submit" value="按钮内容"/><br>(4)重置按钮<input type="reset" value="按钮内容"/><br>(5)空按钮<input type="button" value="按钮内容"/><br>(6)单选按钮组<br><input type="radio" name="ral" /><br><input type="radio" name="ral" checked="checked"/>默认选中<br>(7)复选框组<br><input type="checkbox" name=""/><input type="checkbox" name="" disabled="disabled"><br>disabled=”disabled”(禁用) checked=”checked”(默认启用)</p><p><code>下拉菜单</code></p><p>语法：<br><select><br>    <option>下拉选项1</option><br>    <option>下拉选项2</option><br></select><br>表单域多行文本定义</p><p>语法：<br><textarea name="" cols="" rows="" style="resize:none"></textarea><br>说明：<br>多行文本，row属性和cols属性用来设置文本输入窗口的高度和宽度，单位是字符<br>阻止浏览器对窗口的拖到设置：{resize=none;}(这是css属性)</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houdini Solaris 基础</title>
      <link href="2020/02/22/%E7%AD%86%E8%A8%98/houdini/Solaris%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
      <url>2020/02/22/%E7%AD%86%E8%A8%98/houdini/Solaris%E5%9F%BA%E7%A1%80(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="USD基础知识即Solaris流程框架概述"><a href="#USD基础知识即Solaris流程框架概述" class="headerlink" title="USD基础知识即Solaris流程框架概述"></a>USD基础知识即Solaris流程框架概述</h2><p>USD是Universal Scene Description的缩写，译通用场景描述；是皮克斯开发的一个文件格式。<br>USD的优点:</p><ul><li>树状分层描述场景数据，结构清晰，管理方便灵活。</li><li>分层(Layer)组织数据，强大的数据合成机制，实现非破坏性编辑。</li><li>多层嵌套引用机制，实现轻量化存储，场景载入效率极高。</li><li>基于Hydra渲染架构，实现大量集合体场景的高效预览。</li></ul><p>Solaris是Houdini新增的新模块，是houdini为USD所提供的工具和支持的统称。<br>Solaris模块在houdini中的主要工作层级是LOP(Light Operator);在LOP层级中，Stage指代当前正在操作的整个场景。<br>USD基础知识点:</p><ul><li>USD中对象的基本单位是Primitive(不同与SOP中的Primitive,这里的一个Primitive通常指代一个对象)</li><li>USD文件的两种编码格式<ul><li>二进制格式<font color=yellow>.usd(.usdc)</font>(体积小,方便调用)</li><li>文本格式<font color=yellow>.usda</font>(有层级结构，方便使用文本编辑器打开查看)</li></ul></li></ul><h2 id="Solaris模块基础操作讲解"><a href="#Solaris模块基础操作讲解" class="headerlink" title="Solaris模块基础操作讲解"></a>Solaris模块基础操作讲解</h2><p>Solaris在houdini中可以在Network层级和sop层级创建，也可以直接在Network View切换到Solaris，在Network和sop中创建时它的名字为LOP Network。<br>在Solaris中资产的创建和导入有多种方式:</p><ul><li> SOP Import 节点导入sop层级创建的资产(SOP Path指定sop路径；Primitive Path指定导入对象在场景中的位置路径…)</li><li> Scene Import 节点导入方式和SOP Import类似，但是也有不同之处…</li><li> SOP Create 该节点相当于在Solaris创建了一个SOP Network，然后在里面创建资产</li><li> 也可以直接创建一些简单的几何体对象，如Sphere、Box等(直接创建的对象都是usd对象，不可编辑集合体顶点)</li></ul><p><font color=yellow>Scene Graph Path</font>大纲、场景树状结构图<br><font color=yellow>Primitive Type</font>对象类型<br><font color=yellow>Primitive Kind</font>类别、性质、组、单位<br><font color=yellow>Primitive Path</font>只是更改当前对象在SceneGraphPath(场景树状结构层级)中的位置;这个路径不能为空，也不能直接是<code>/</code>根(通俗讲SceneGraphPath相当于村地图，Primitive Path应该是指定从村口去到你家路线，途中可能会经过邻居家)<br><font color=yellow>Import Path Prefix</font>指定导入模型对象在Scene Graph Path中的路径;与Primitive Path都是用来指定路径，但是Primitive Path会叠加在Import path prefix前并且会替换调import path prefix指定路径的最顶层(如primpath指定的是/mail,importpath指定的是/box/acc，最终得到的是/mail/acc的路径),所以这项参数至少设置两层以上才有作用<br><font color=yellow>SOP Path Attribute</font>用来指定导入对象最里面那一层的名字，默认是根据name属性设置，如果没有nane属性且导入的不是sphere primitive那名字就是mesh_0；如果导入的sphere primtive，那名字就是sphere_0;导入的如果是体积且没有name属性，那名字就是field_0<br><font color=yellow>Make Instanceable</font>在需要复制大量对象是启用可以提高运行效率    </p><table><thead><tr><th align="center">选项</th><th align="center">实例</th><th align="center">子层级Kind</th></tr></thead><tbody><tr><td align="center">Assembly</td><td align="center">BookShelf<br><font color=gray>Shelf</br>BookA</br>……</br>BookZ</font></td><td align="center">Assemble<br>Group<br>Component</td></tr><tr><td align="center">Group</td><td align="center">Cups<br><font color=gray>Cup0</br>Cup1</br>……</br>Cup10</font></td><td align="center">Assembly</br>Group</br>Component</td></tr><tr><td align="center">Component</td><td align="center">Shelf / BookA / Cup1</td><td align="center">SubComponent</td></tr><tr><td align="center">SubComponent</td><td align="center">BookA<br><font color=gray>Book_Mesh</br></font>Cup0<font color=gray></br>Cup_Body</br>Cup_Liq</font></td><td align="center"></td></tr></tbody></table><p>Configureprimitive 设置指定路径对象的Kind<br>在场景中，Kind不去设置不会影响场景的有效性，但是规范的kind层级可以在复杂场景进行遍历计算时有着良好的运行效率(不包含灯光材质)；</p><p>Inlineusd 可以通过写usd脚本创建usd文件，或者粘贴usd脚本实现usd的重建(导入)<br>Sublayer 从硬盘导入usd文件或从场景(连线)导入(一个或多个)文件，在导入多个文件时，如果导入的usd的SceneGraphPath相同，就会根据SublayerPosition来选择覆盖<br>Reference 从硬盘导入usd文件或从场景(连线)导入(一个或多个)文件，并且可以修改导入文件的PrimitivePath、Kind等参数    </p><p>以下问题将在下一解课中详细解释:</p><ul><li>该如何理解层的概念？层在实际制作中的意义是什么？</li><li>数据合成机制是如何运作的？Sublayer和reference有哪些具体区别？</li><li>激活层(Active Layer)是什么意思？</li><li>展平层(Flattem Layers)是什么意思？</li><li>层的输出路径有什么作用？如何设置输出路径？</li><li>输出节点的Save Style参数有什么作用？</li></ul><h2 id="层与数据合成机制深入探究"><a href="#层与数据合成机制深入探究" class="headerlink" title="层与数据合成机制深入探究"></a>层与数据合成机制深入探究</h2><p>USD-ROP 分层输出机制分析</p><h1 id="实操演练"><a href="#实操演练" class="headerlink" title="实操演练"></a>实操演练</h1><h2 id="创建USD资产"><a href="#创建USD资产" class="headerlink" title="创建USD资产"></a>创建USD资产</h2><p>sopimport从sop导入资产数据，如果资产数据带有name属性，就会在SceneGraphPath中根据name分成多个Primitive;<br>sopimport资产通常占用较大的存储空间，可以在sopimport下的LayerSavePath中指定该层的存储路径;<br>PrimitivePath在设定时注意上下层级之间最好不要有重名，不然会在其他节点上出现报错，甚至节点网络无法工作;<br><font color=yellow>在USD资产创建时，如果使用到Prune对上游资产进行操作时，操作的对象不能勾选MakeInstanceable</font><br>在为资产创建变体时，variantblok_end的PrimitivePath要设置到主体个层级上，这样就不会产生多余的SceneGraphPath层了。<br>在usd资产导出前检查整理SceneGraphPath里的层级和属性，使用configureprimitive为资产设置合理的Kind，使用ConfigureLayer为需要单独设置保存路径的资产设置保存路径。<br><font color=blue>总结:</font>    </p><ul><li>模型的处理，需要注意的时模型在创建usd资产过程中需不需要制作变体，模型有没有组信息(name)，没有就添加；模型是否在世界坐标中心，这个视具体情况而定，通常要把物体设置到世界坐标中心(matchsize);    </li><li>在stage内引入sop资产时，通常会勾选Load As Reference(导入物体通常较大,单独设置保存独立的usd文件)有利于资产的管理和调用;    </li><li>在设置变体时，需要注意变体的PrimtivePath一定要设置合理，不然会导致调用变体时查找不到变体集的路径;    </li><li>材质和灯光通常也会单独输出(configurelayer设置单独的存储路径)，根据具体项目进行调整;</li></ul><h2 id="装配USD资产"><a href="#装配USD资产" class="headerlink" title="装配USD资产"></a>装配USD资产</h2><p>stagemanager 用来搭建场景,可以方便快速的在场景白方资产文件;</p><h2 id="Layout场景搭建"><a href="#Layout场景搭建" class="headerlink" title="Layout场景搭建"></a>Layout场景搭建</h2><h2 id="分镜资产制作"><a href="#分镜资产制作" class="headerlink" title="分镜资产制作"></a>分镜资产制作</h2><h2 id="简单动画制作"><a href="#简单动画制作" class="headerlink" title="简单动画制作"></a>简单动画制作</h2><h2 id="特效制作"><a href="#特效制作" class="headerlink" title="特效制作"></a>特效制作</h2><h2 id="灯光和渲染"><a href="#灯光和渲染" class="headerlink" title="灯光和渲染"></a>灯光和渲染</h2>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> usd </tag>
            
            <tag> Solaris </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuke 基础</title>
      <link href="2020/02/22/%E7%AD%86%E8%A8%98/nuke/Nuke11/"/>
      <url>2020/02/22/%E7%AD%86%E8%A8%98/nuke/Nuke11/</url>
      
        <content type="html"><![CDATA[<h2 id="Nuke的基本操作"><a href="#Nuke的基本操作" class="headerlink" title="Nuke的基本操作"></a>Nuke的基本操作</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuke </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuke 技巧</title>
      <link href="2020/02/22/%E7%AD%86%E8%A8%98/nuke/Nuke%E6%8A%80%E8%83%BD(%E4%B8%80)/"/>
      <url>2020/02/22/%E7%AD%86%E8%A8%98/nuke/Nuke%E6%8A%80%E8%83%BD(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="nuke中的扭曲效果-能量、热浪、波纹"><a href="#nuke中的扭曲效果-能量、热浪、波纹" class="headerlink" title="nuke中的扭曲效果(能量、热浪、波纹)"></a>nuke中的扭曲效果(能量、热浪、波纹)</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> cut_paste_input <span class="comment">[stack 0]</span></span><br><span class="line">version <span class="comment">12.1 v1</span></span><br><span class="line">push <span class="comment">0</span></span><br><span class="line">push <span class="comment">$cut_paste_input</span></span><br><span class="line">Group <span class="comment">&#123;</span></span><br><span class="line"> inputs <span class="comment">2</span></span><br><span class="line"> name <span class="comment">User-IDistort</span></span><br><span class="line"> selected <span class="comment">true</span></span><br><span class="line"> xpos <span class="comment">862</span></span><br><span class="line"> ypos <span class="comment">-117</span></span><br><span class="line"> addUserKnob <span class="comment">&#123;20 User&#125;</span></span><br><span class="line"> addUserKnob <span class="comment">&#123;41 uv_scale l</span> <span class="comment">&quot;UV scale&quot;</span> <span class="comment">T IDistort1.uv_scale&#125;</span></span><br><span class="line"> addUserKnob <span class="comment">&#123;41 size l</span> <span class="comment">&quot;Blur size&quot;</span> <span class="comment">t</span> <span class="comment">&quot;Blur Size&quot;</span> <span class="comment">T Blur4.size&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"> Input <span class="comment">&#123;</span></span><br><span class="line">  inputs <span class="comment">0</span></span><br><span class="line">  name <span class="comment">Channal</span></span><br><span class="line">  note_font_color <span class="comment">0xc6653bff</span></span><br><span class="line">  xpos <span class="comment">209</span></span><br><span class="line">  ypos <span class="comment">206</span></span><br><span class="line"> &#125;</span><br><span class="line"> Blur <span class="comment">&#123;</span></span><br><span class="line">  size <span class="comment">9.2</span></span><br><span class="line">  name <span class="comment">Blur4</span></span><br><span class="line">  xpos <span class="comment">209</span></span><br><span class="line">  ypos <span class="comment">246</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">set</span> <span class="comment">Na9f42a20 [stack 0]</span></span><br><span class="line"> Emboss <span class="comment">&#123;</span></span><br><span class="line">  Angle <span class="comment">90</span></span><br><span class="line">  name <span class="comment">Emboss2</span></span><br><span class="line">  xpos <span class="comment">348</span></span><br><span class="line">  ypos <span class="comment">341</span></span><br><span class="line"> &#125;</span><br><span class="line">push <span class="comment">$Na9f42a20</span></span><br><span class="line"> Emboss <span class="comment">&#123;</span></span><br><span class="line">  name <span class="comment">Emboss1</span></span><br><span class="line">  xpos <span class="comment">209</span></span><br><span class="line">  ypos <span class="comment">337</span></span><br><span class="line"> &#125;</span><br><span class="line"> Merge2 <span class="comment">&#123;</span></span><br><span class="line">  inputs <span class="comment">2</span></span><br><span class="line">  operation <span class="comment">plus</span></span><br><span class="line">  Achannels <span class="comment">&#123;rgba.red -rgba.green -rgba.blue rgba.alpha&#125;</span></span><br><span class="line">  Bchannels <span class="comment">&#123;-rgba.red rgba.green -rgba.blue rgba.alpha&#125;</span></span><br><span class="line">  output <span class="comment">&#123;rgba.red rgba.green -rgba.blue rgba.alpha&#125;</span></span><br><span class="line">  name <span class="comment">Merge4</span></span><br><span class="line">  xpos <span class="comment">209</span></span><br><span class="line">  ypos <span class="comment">441</span></span><br><span class="line"> &#125;</span><br><span class="line"> Grade <span class="comment">&#123;</span></span><br><span class="line">  channels <span class="comment">&#123;rgba.red rgba.green -rgba.blue none&#125;</span></span><br><span class="line">  blackpoint <span class="comment">0.5</span></span><br><span class="line">  whitepoint <span class="comment">0.5</span></span><br><span class="line">  black <span class="comment">0.06</span></span><br><span class="line">  black_clamp <span class="comment">false</span></span><br><span class="line">  name <span class="comment">Grade1</span></span><br><span class="line">  xpos <span class="comment">209</span></span><br><span class="line">  ypos <span class="comment">518</span></span><br><span class="line"> &#125;</span><br><span class="line"> Input <span class="comment">&#123;</span></span><br><span class="line">  inputs <span class="comment">0</span></span><br><span class="line">  name <span class="comment">Source</span></span><br><span class="line">  note_font_color <span class="comment">0x80a33fff</span></span><br><span class="line">  xpos <span class="comment">11</span></span><br><span class="line">  ypos <span class="comment">472</span></span><br><span class="line">  number <span class="comment">1</span></span><br><span class="line"> &#125;</span><br><span class="line"> Copy <span class="comment">&#123;</span></span><br><span class="line">  inputs <span class="comment">2</span></span><br><span class="line">  from0 <span class="comment">rgba.red</span></span><br><span class="line">  to0 <span class="comment">forward.u</span></span><br><span class="line">  from1 <span class="comment">rgba.green</span></span><br><span class="line">  to1 <span class="comment">forward.v</span></span><br><span class="line">  name <span class="comment">Copy1</span></span><br><span class="line">  xpos <span class="comment">11</span></span><br><span class="line">  ypos <span class="comment">512</span></span><br><span class="line"> &#125;</span><br><span class="line"> IDistort <span class="comment">&#123;</span></span><br><span class="line">  uv <span class="comment">forward</span></span><br><span class="line">  uv_scale <span class="comment">3.6</span></span><br><span class="line">  name <span class="comment">IDistort1</span></span><br><span class="line">  xpos <span class="comment">11</span></span><br><span class="line">  ypos <span class="comment">605</span></span><br><span class="line"> &#125;</span><br><span class="line"> Output <span class="comment">&#123;</span></span><br><span class="line">  name <span class="comment">Output1</span></span><br><span class="line">  xpos <span class="comment">11</span></span><br><span class="line">  ypos <span class="comment">693</span></span><br><span class="line"> &#125;</span><br><span class="line">end_group</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV13x411o7j3?from=search&seid=17013609913886916459">教程链接</a></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuke </tag>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04 Linux初识</title>
      <link href="2020/02/22/%E7%AD%86%E8%A8%98/linux/Ubuntu20.04Linux%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/02/22/%E7%AD%86%E8%A8%98/linux/Ubuntu20.04Linux%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>=====<br>进阶轨迹</p><hr><h2 id="Ubuntu简述"><a href="#Ubuntu简述" class="headerlink" title="Ubuntu简述"></a>Ubuntu简述</h2><p>Ubuntu是常见的三大操作系统Windows、Mac、Linux中，linux的其中一个发行版；linux系统有着种类繁杂的发行版，其中RedHet、CentOS、Ubuntu、Debian、Deepin(国人开发)等。<br>Linux主要应用于服务器操作系统，它相对与Windows更加的稳定和安全。</p><h3 id="系统文件结构"><a href="#系统文件结构" class="headerlink" title="系统文件结构"></a>系统文件结构</h3><p>linux 系统文件结构为目录树结构，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">/home/vfx</span><br><span class="line">/root</span><br><span class="line">/<span class="built_in">bin</span></span><br><span class="line">/mnt</span><br><span class="line">/etc</span><br></pre></td></tr></table></figure><font color=#fsd532 face="楷体">/   根目录，类似与windows的C盘，linux的/根目录包含其他所有的目录，是其他目录的父级。    /home/vfx   用户文件夹,在home下每当创建一个用户，都会创建一个用户文件夹，当前用户是fx。    /root   管理员文件夹，每个系统都有一个管理员，该用户拥有当前系统的最高权限。    ......    </font>    <font color=red>linux文件的权限机制有利与保护系统的安全，避免用户的误操作。对于普通用户来说，能够操作和修改的文件仅限于当前用户的文件，管理员则可以管理包括系统文件在内的所有文件。</font><h2 id="常用的命令-cd-ls-cp-rm-tar"><a href="#常用的命令-cd-ls-cp-rm-tar" class="headerlink" title="常用的命令 cd ls cp rm tar"></a>常用的命令 cd ls cp rm tar</h2><h3 id="ls-list的缩写，列出目录下的所有项-包括文件和文件夹"><a href="#ls-list的缩写，列出目录下的所有项-包括文件和文件夹" class="headerlink" title="ls,list的缩写，列出目录下的所有项(包括文件和文件夹)"></a>ls,list的缩写，列出目录下的所有项(包括文件和文件夹)</h3><p>例：列出home下fx用户的所有项</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls <span class="regexp">/home/</span>vfx</span><br></pre></td></tr></table></figure><blockquote><p>模板  图片  下载  桌面    snap<br>公共的    视频  文档  音乐  Documents </p></blockquote><p>tips:<br>    在linux终端操作时可以使用Tab来补全未写全的命令，使用上下健来获取操作命令历史。</p><h3 id="pwd-即print-working-directory显示打印当前的工作目录。"><a href="#pwd-即print-working-directory显示打印当前的工作目录。" class="headerlink" title="pwd,即print working directory显示打印当前的工作目录。"></a>pwd,即print working directory显示打印当前的工作目录。</h3><h3 id="cd-切换目录，切换或改变当前操作执行在系统目录中的位置。"><a href="#cd-切换目录，切换或改变当前操作执行在系统目录中的位置。" class="headerlink" title="cd 切换目录，切换或改变当前操作执行在系统目录中的位置。"></a>cd 切换目录，切换或改变当前操作执行在系统目录中的位置。</h3><p>例:切换到home下的vfx目录下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/vfx</span><br></pre></td></tr></table></figure><p>tips:<br>    linux的几个特殊的目录：<br>    ～ 代表当前用户的主目录<br>    . 代表当前目录<br>    .. 代表上一级目录<br>    cd ～  切换到主目录<br>    cd ~/home 切换到主目录下home目录下<br>    cd ../maxman 切换到上一级目录下一个名字叫maxman子目录下    </p><h3 id="mkdir-make-directory创建目录-文件夹"><a href="#mkdir-make-directory创建目录-文件夹" class="headerlink" title="mkdir,make directory创建目录(文件夹)"></a>mkdir,make directory创建目录(文件夹)</h3><p>例：创建一个名字为python的文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir python</span><br></pre></td></tr></table></figure><p>例：在home下创建一个名字为maxman的文件夹</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/maxman</span><br></pre></td></tr></table></figure><p>创建多层文件夹（一次性创建多个层级嵌套的文件目录树） -p</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /<span class="keyword">new</span>/max/man</span><br></pre></td></tr></table></figure><h3 id="rm-即remove删除文件或者目录"><a href="#rm-即remove删除文件或者目录" class="headerlink" title="rm,即remove删除文件或者目录"></a>rm,即remove删除文件或者目录</h3><p>例：删除maxman目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf maxman</span><br></pre></td></tr></table></figure><blockquote><p>这里的r表示recursive递归删除，f便是force强制删除（谨慎使用）</p></blockquote><h3 id="cp-即copy复制文件或目录"><a href="#cp-即copy复制文件或目录" class="headerlink" title="cp,即copy复制文件或目录"></a>cp,即copy复制文件或目录</h3><p>例：复制maxman到用户目录下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rf maxman /home/vfx</span><br></pre></td></tr></table></figure><h3 id="mv-即move移动文件或目录-重命名"><a href="#mv-即move移动文件或目录-重命名" class="headerlink" title="mv,即move移动文件或目录(重命名)"></a>mv,即move移动文件或目录(重命名)</h3><p>例:重命名maxman为houdini</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv maxman houdini</span><br></pre></td></tr></table></figure><blockquote><p>这是manman目录就会变为houdini，如果houdini已经存在，则自动变为houdini1或者houdini…</p></blockquote><h3 id="tar-即tape-archive档案打包、创建档案包"><a href="#tar-即tape-archive档案打包、创建档案包" class="headerlink" title="tar,即tape archive档案打包、创建档案包"></a>tar,即tape archive档案打包、创建档案包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf maxman.tar maxman</span><br></pre></td></tr></table></figure><blockquote><p>-cvf打包，其中c表示create创建档案，v表示verbose显示详情，f表示文件<br>也可以一次打包多个文件”tar -cvf xxx.tar file0 file1 file2”</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf maxman.tar -C /home/manman</span><br></pre></td></tr></table></figure><blockquote><p>-xvf解包，其中-C(大写)用来指定解包后文件要存放的地址，不指定默认解包到当前目录下</p></blockquote><p><b>归档并压缩</b>    </p><blockquote><p><code>-cfx -xvf</code> 只是对文件目录进行打包和解包，没有对文件进行压缩；<br><code>-czvf -xzvf</code> 则是在打包或解包时同时对文件进行压缩和解压缩处理；<br>通常所见到的*<font color=red>.tar.gz</font>格式就是压缩打包形式</p></blockquote><h3 id="ln-软链接，即windows下的”快捷方式”"><a href="#ln-软链接，即windows下的”快捷方式”" class="headerlink" title="ln 软链接，即windows下的”快捷方式”"></a>ln 软链接，即windows下的”快捷方式”</h3><p>使用ln命令(link)来创建软链接<br><code>ln -s source link</code><br>其中,-s表示soft软链接(默认为硬)    </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s maxman <span class="regexp">/home/</span>vfx<span class="regexp">/桌面/m</span>anman</span><br></pre></td></tr></table></figure><blockquote><p>连接maxman到桌面的maxman</p></blockquote><h2 id="文本编辑器-vi-gedit"><a href="#文本编辑器-vi-gedit" class="headerlink" title="文本编辑器 vi gedit"></a>文本编辑器 vi gedit</h2><p>vi/vim,是一个基于控制台的文本编辑器，vim是vi的升级版<br>gedit，是一个基于GUI的文本编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim name.txt <span class="comment">#打开name.txt文件，如果该文件存在则打开编辑，如果不存在则创建后打开</span></span><br></pre></td></tr></table></figure><p>如果系统上没有vim,可以使用”sudo apt install vim”安装    </p><h3 id="vim的基本用法"><a href="#vim的基本用法" class="headerlink" title="vim的基本用法"></a>vim的基本用法</h3><p>模式的切换<br>编辑模式Insert Mode 按键盘i键进入<br>命令模式Command Mode 按键盘ESC键进入<br>保存和退出命令<br><font color=yellow>:wq</font> 保存并推出<br><font color=yellow>:q</font> 退出<br><font color=yellow>:q!</font> 强制退出<br><font color=yellow>:qw!</font> 强制保存退出  </p><h3 id="vim的更多用法"><a href="#vim的更多用法" class="headerlink" title="vim的更多用法"></a>vim的<a href="https://www.runoob.com/linux/linux-vim.html">更多用法</a></h3><p>vim 是一个全键盘操作的文本编辑器，工作效率比较底，掌握基本的用法即可，如果需要了解更多复杂的操作可以到网络上临时搜索用法即可    </p><blockquote><p>本人推荐使用vscode简单、强大、漂亮</p></blockquote><h2 id="用户及权限系统-chmod"><a href="#用户及权限系统-chmod" class="headerlink" title="用户及权限系统 chmod"></a>用户及权限系统 chmod</h2><h3 id="Ubuntu用户管理"><a href="#Ubuntu用户管理" class="headerlink" title="Ubuntu用户管理"></a>Ubuntu用户管理</h3><p>添加用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo useradd -m username</span></span><br></pre></td></tr></table></figure><blockquote><p>sudo表示使用管理员的身份执行操作，-m表示在/home下添加用户目录<br>删除用户</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo userdel username</span></span><br></pre></td></tr></table></figure><p>修改用户密码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo passwd username</span></span><br></pre></td></tr></table></figure><blockquote><p>除了管理员，还有特殊用户和普通用户的区别，区别在于特殊用户可以在命令前加sudo来暂时使用管理员权限，普通用户则不可以；能使用sudo权限的用户为sudoer</p></blockquote><h3 id="超级管理员"><a href="#超级管理员" class="headerlink" title="超级管理员"></a>超级管理员</h3><p>首次使用root用户需要设置管理员密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>切换到root用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">su root</span></span><br></pre></td></tr></table></figure><blockquote><p>su表示switch user    </p></blockquote><p>退出管理员权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="文件的权限"><a href="#文件的权限" class="headerlink" title="文件的权限"></a>文件的权限</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><blockquote><p><font color=red>-</font><font color=yellow>rwx</font><font color=gred>rwx</font><font color=blue>rwx</font><br>  <font color=red>d</font><font color=yellow>rwx</font><font color=gred>rwx</font><font color=blue>r-x</font><br>使用ls -l 可以列出文件的权限信息，列出的字符中前面的十个字符第一个(红色)表示文件类型，-表示文件，d表示目录，l表示链接；然后剩下的九个三个为一组分别表示<font color=yellow>当前用户</font>的权限、<font color=gred>同组用户</font>对该文件的权限、<font color=blue>其他用户</font>对该文件的权限；<br>r表示可读，w表示可写，x表示可执行，每一组都用rwx来表示权限，-表示权限禁止；<br>rxw可读可写可执行 rx-可读可写不可执行 r–可读不可写不可执行 —不可读不可写不可执行</p></blockquote><h3 id="文件权限的修改"><a href="#文件权限的修改" class="headerlink" title="文件权限的修改"></a>文件权限的修改</h3><p>chmod,即change file mode 修改文件的访问权限<br>比如，一个文件想让其他用户可写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod o+w file</span><br></pre></td></tr></table></figure><blockquote><p>其中，o表示其他人；+w表示增写write权限；-w表示除去写入write权限</br><br>a表示所有人；u表示当前用户；如果w前不指定对象，则表示应用与当前用户及其所在组用户的权限</p></blockquote><h3 id="修改文件的属主"><a href="#修改文件的属主" class="headerlink" title="修改文件的属主"></a>修改文件的属主</h3><p>chown，即change owner修改文件的属性<br>一般来说，每个用户都只对自己的文件进行操作，很少使用到这个命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R vfx /opt/maxman</span><br></pre></td></tr></table></figure><blockquote><p>将/opt/maxman目录（-R及其子目录）的属主改为vfx用户</p></blockquote><h2 id="shell脚本入门-sh"><a href="#shell脚本入门-sh" class="headerlink" title="shell脚本入门 .sh"></a>shell脚本入门 .sh</h2><p>脚本Script，一种解释执行的程序。<br>Linux下常见的三种脚本程序<br>-shell脚本 *.sh<br>-Pell脚本 *.pl<br>-Python脚本 *.py</p><p>shell脚本，是linux自带的脚本语言，类似与windows下的dos批处理脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">echo &quot;hello,world&quot;</span><br></pre></td></tr></table></figure><blockquote><p>一个简单的打印hello world的shell脚本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x hello.sh</span><br></pre></td></tr></table></figure><blockquote><p>添加执行权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.sh</span><br></pre></td></tr></table></figure><blockquote><p>执行shell脚本</p></blockquote><p><code>书写shel脚本时第一行要声明(#!/bin/sh)解释器,要拥有执行权限才可执行</code></p><h2 id="shell中的变量"><a href="#shell中的变量" class="headerlink" title="shell中的变量"></a>shell中的变量</h2><p>典型的环境变量，PATH，JAVA_HOME</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">OUTDIR=/opt     #定义变量</span><br><span class="line">echo&quot;output to : $&#123;OUTDIR&#125;&quot;     #使用变量</span><br><span class="line">ls $&#123;OUTDIR&#125; </span><br></pre></td></tr></table></figure><blockquote><p>定义变量NAME=alue等号的左右两侧不要有空格<br>使用${NAME}来调用变量，如果有定界符，则可以简写为$NAME,例如 echo ${NAME}/build<br>常用命令 exho打印 ls列出目录 cd跳转位置 cp复制文件目录<br>if逻辑判断 while循环逻辑</p></blockquote><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export OUTDIR=/opt  #环境变量的定义</span><br><span class="line">echo $&#123;OUTDIR&#125;  #显示环境变量</span><br><span class="line">printenv    #显示当前系统的所有环境变量</span><br></pre></td></tr></table></figure><p><code>在命令行中定义的环境变量，只有对当前shell终端有效；当终端关闭、重启后消失；</code></p><h3 id="用户环境变量"><a href="#用户环境变量" class="headerlink" title="用户环境变量"></a>用户环境变量</h3><p><code>tips:使用&quot;ls -a&quot;可以查看当前目录下的所有文件(包括隐藏文件)</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.profile    #打开.profile用户隐藏文件件</span><br><span class="line">export PLUGIN_PATH=/opt/houdini_plugin   #添加自定义变量到.profile内</span><br><span class="line">echo $PLUGIN_PATH   #注销或重启系统后生效</span><br></pre></td></tr></table></figure><blockquote><p>通过.profile添加的环境变量，对当前用户有效，每个有户都有自己的.profile文件；有的linux系统中使用的是.bash_profile文件</p></blockquote><h3 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h3><blockquote><p>系统环境变量定义在”/etc/profile”文件中，在这里定义的环境变量对当前系统下的所有用户有效</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/profile     <span class="comment">#一般不会直接修改/etc/profile,而是在/etc/profile.d创建一个自定义的脚本</span></span><br><span class="line">sudo gedit /etc/profile.d   <span class="comment">#添加自定义全局变量到/etc/profile.d目录下</span></span><br><span class="line">sudo gedit /etc/profile.d/new.sh    <span class="comment">#创建一个名字为new.sh的脚本，在上面添加自定义全局变量export PATH=/opt/hfs18.5.358 </span></span><br></pre></td></tr></table></figure><p><font color=yellow face=仿宋>注销重启后生效</font></p><h3 id="linux中的PATH环境变量"><a href="#linux中的PATH环境变量" class="headerlink" title="linux中的PATH环境变量"></a>linux中的PATH环境变量</h3><p>PATH，最常见的一个环境变量，用于描述可执行程序的搜索路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>   <span class="comment">#显示当前系统PATH环境变量</span></span><br></pre></td></tr></table></figure><blockquote><p>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin<br>每个路径用冒号隔开</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">export PATH=$PATH:/opt/houdini_plugin   </span><br></pre></td></tr></table></figure><p>这里<font color=yellow>$PATH</font>引入当前已有的变量，不引入会覆盖之前的PATH<br>sbin目录下的为超级管理员root才可以执行的程序<br>/usr/下是系统自带的程序<br>/usr/local/下是用户安装的程序    </p><h3 id="ubuntu中手动配置网络"><a href="#ubuntu中手动配置网络" class="headerlink" title="ubuntu中手动配置网络"></a>ubuntu中手动配置网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig    <span class="comment">#查看当前网络配置，默认系统没有安装”sudo apt install net-tools“</span></span><br></pre></td></tr></table></figure><p>ifconfig会列出当前系统所有的网络接口及接口的状态信息，其中if表示interface网络接口;第一行冒号前面的字符就是网络接口的名字   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig xxxx up   <span class="comment">#开启网络接口</span></span><br><span class="line">sudo ifconfig xxxx down <span class="comment">#关闭网络接口</span></span><br></pre></td></tr></table></figure><h2 id="常见的服务器-vsftpd"><a href="#常见的服务器-vsftpd" class="headerlink" title="常见的服务器 vsftpd"></a>常见的服务器 vsftpd</h2><p>在部署网站等需要使用到云服务器操作时，都会将本地的文件上传到云服务器上，这时就需要使用网络传输的方式将文件部署到云端。<br>网络传输一般有FTP、SFTP两种方式。</p><h3 id="FTP服务器"><a href="#FTP服务器" class="headerlink" title="FTP服务器"></a>FTP服务器</h3><p>客户端 FileZilla(Windows)<br>服务器 vsftpd(Ubuntu)<br>略……</p><h3 id="SFTP服务器"><a href="#SFTP服务器" class="headerlink" title="SFTP服务器"></a>SFTP服务器</h3><p>使用Xshll远程登陆<br>使用Xftp传输文件<br>略……</p><h2 id="文本文件的上传"><a href="#文本文件的上传" class="headerlink" title="文本文件的上传"></a>文本文件的上传</h2><p>文本文件的换行符<br>Windows:    <font color=gred>\r\n</font><br>Linux:  <font color=gred>\n</font></p><h2 id="Java-Tomcat运行环境的搭建等"><a href="#Java-Tomcat运行环境的搭建等" class="headerlink" title="Java/Tomcat运行环境的搭建等"></a>Java/Tomcat运行环境的搭建等</h2><h2 id="Linux程序与进程"><a href="#Linux程序与进程" class="headerlink" title="Linux程序与进程"></a>Linux程序与进程</h2><p>程序Program:指一个程序文件,如houdini.exe<br>进程Process:但一个程序在系统上运行是，系统会创建一条用来描述程序运行状态的记录，这个记录就叫做进程       </p><p><font color=gred><b>ps -ef</b></font>查看系统所有进程</p><blockquote><p>User执行者，PID进程ID，PPID父进程ID，STIME启动时间，CMD启动时调用的命令行</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | <span class="keyword">grep</span> houdini </span><br><span class="line">#vfx        <span class="number">43668</span>    <span class="number">1538</span> <span class="number">82</span> <span class="number">11</span>:<span class="number">56</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">13</span> <span class="regexp">/opt/</span>hfs18.<span class="number">5.351</span><span class="regexp">/bin/</span>houdinifx-bin</span><br><span class="line">#vfx        <span class="number">43738</span>   <span class="number">39606</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">57</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="keyword">grep</span>  (省略) -dir=.tox houdini</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>按名字查找进程，”ps -ef”将读取的信息输出，重定向给”grep”命令进行过滤处理    </p></blockquote><p><font color=yellow><b>ps -ef | grep xxxx</b></font> 常用命令，必记</p><p><b>使用<font color=gred>top</font>命令动态查看系统进程</b></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>按上下键翻阅或者PaUp和PaDn翻页预览<br>按q或者CLRT+C终止退出</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">top</span> | <span class="type">grep</span> houdini #查看houdini动态进程</span><br><span class="line"><span class="built_in">top</span> - p  <span class="number">43668</span> #<span class="string">&quot;top -p PID&quot;</span>可以查看进程详细的使用状态 </span><br></pre></td></tr></table></figure><p><font color=yellow><b>top -p xxxx</b></font> 常用命令，必记</p><p><b>使用<font color=gred>kill</font>杀死终结系统进程</b></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 PID <span class="comment">#PID进程id号，使用&quot;ps -ef&quot;查看</span></span><br></pre></td></tr></table></figure><p><b>使用<font color=gred>pkill</font>查找并杀死终结系统进程</b></p><p>Ctrl+C 终止进程</p><h2 id="前台进程与后台进程"><a href="#前台进程与后台进程" class="headerlink" title="前台进程与后台进程"></a>前台进程与后台进程</h2><p>差异1：有无控制台<br>前台进程，有控制台，运行结果输出至当前终端<br>后台进程，无控制台，看不到输出(运行状态)<br>差异2：有无父进程<br>前台进程，有父进程，父进程即当前终端；当终端关闭时，进程被一同关闭<br>后台进程，有父进程，父进程为系统进程(1号进程);当终端关闭时，后台进程不受影响    </p><p><font color=yellow>xxxx  run</font>以前台方式运行<br><font color=yellow>xxxx  start</font>以后台方式运行    </p><h2 id="其他软件的编译与安装-Redis"><a href="#其他软件的编译与安装-Redis" class="headerlink" title="其他软件的编译与安装 Redis"></a>其他软件的编译与安装 Redis</h2><h2 id="MySQL服务器安装"><a href="#MySQL服务器安装" class="headerlink" title="MySQL服务器安装"></a>MySQL服务器安装</h2><p>MySQL跨平台，”免费”<br>MariaDB是MySQL的免费开源版本<br>MySQL<a href="https://www.bilibili.com/video/BV1GW411g7pF?from=search&seid=10930918099147167333">安装配置</a>    </p><p>特别感谢<a href="http://afanihao.cn/">阿发你好</a>提供的学习资料</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt菜单与工具栏</title>
      <link href="2020/02/22/%E7%AD%86%E8%A8%98/python/PyQt%E8%8F%9C%E5%8D%95%E4%B8%8E%E5%B7%A5%E5%85%B7%E6%A0%8F/"/>
      <url>2020/02/22/%E7%AD%86%E8%A8%98/python/PyQt%E8%8F%9C%E5%8D%95%E4%B8%8E%E5%B7%A5%E5%85%B7%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="QMainWindow创建基本窗口"><a href="#QMainWindow创建基本窗口" class="headerlink" title="QMainWindow创建基本窗口"></a>QMainWindow创建基本窗口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow,QApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QMainWindow</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.statusBar().showMessage(<span class="string">&#x27;Ready&#x27;</span>)</span><br><span class="line">        <span class="comment">#QMainWindow类第一次调用ststusBar()方法创建一个状态栏，后续调用返回状态栏对象，showMassage()状态栏上显示一条消息</span></span><br><span class="line">          </span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">250</span>,<span class="number">150</span>)    </span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Statusbar&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line">````  </span><br><span class="line"></span><br><span class="line"><span class="comment">### 创建菜单栏</span></span><br><span class="line">````python</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QAction, qApp, QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QMainWindow</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        exitAction = QAction(QIcon(<span class="string">&#x27;bi.svg&#x27;</span>), <span class="string">&#x27;&amp;Exit&#x27;</span>, self)    <span class="comment">#定义菜单控件图标与名字</span></span><br><span class="line">        exitAction.setShortcut(<span class="string">&#x27;Ctrl+Q&#x27;</span>)                <span class="comment">#定义控件快捷键</span></span><br><span class="line">        exitAction.setStatusTip(<span class="string">&#x27;Exit application&#x27;</span>)     <span class="comment">#定义控件提示</span></span><br><span class="line">        exitAction.triggered.connect(qApp.quit)</span><br><span class="line"></span><br><span class="line">        self.statusBar()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个菜单栏</span></span><br><span class="line">        menubar = self.menuBar()</span><br><span class="line">        <span class="comment"># 添加菜单</span></span><br><span class="line">        fileMenu = menubar.addMenu(<span class="string">&#x27;&amp;File&#x27;</span>)</span><br><span class="line">        <span class="comment"># 添加事件</span></span><br><span class="line">        fileMenu.addAction(exitAction)</span><br><span class="line">        <span class="comment">#点击菜单控件的时候，调用qApp.quit,终止应用程序</span></span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Menubar&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QAction, QTextEdit, QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QMainWindow</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        textEdit = QTextEdit()</span><br><span class="line">        self.setCentralWidget(textEdit)</span><br><span class="line">        </span><br><span class="line">        exitAction = QAction(QIcon(<span class="string">&#x27;bi.svg&#x27;</span>), <span class="string">&#x27;Exit&#x27;</span>, self)</span><br><span class="line">        exitAction.setShortcut(<span class="string">&#x27;Ctrl+Q&#x27;</span>)</span><br><span class="line">        exitAction.setStatusTip(<span class="string">&#x27;Exit application&#x27;</span>)</span><br><span class="line">        exitAction.triggered.connect(self.close)</span><br><span class="line"></span><br><span class="line">        self.statusBar()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个菜单栏</span></span><br><span class="line">        menubar = self.menuBar()</span><br><span class="line">        <span class="comment"># 添加菜单</span></span><br><span class="line">        fileMenu = menubar.addMenu(<span class="string">&#x27;&amp;File&#x27;</span>)</span><br><span class="line">        <span class="comment"># 添加事件</span></span><br><span class="line">        fileMenu.addAction(exitAction)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#添加工具栏并命名为Tool，点击也是执行退出操作</span></span><br><span class="line">        toolbar = self.addToolBar(<span class="string">&#x27;Tool&#x27;</span>)</span><br><span class="line">        toolbar.addAction(exitAction)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Menubar&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="信号与信号槽"><a href="#信号与信号槽" class="headerlink" title="信号与信号槽"></a>信号与信号槽</h2><pre><code>所有的GUI程序都是事件驱动的。事件由用户出发，但也有可能是其他触发方式；例如网络连接、windows manager或定时器。当我们调用QApplication的exec_()方法时会使程序进入主循环，主循环会获取并分发时间。在事件模型中，有三个参与者；分别是事件源、事件对象、时间接收者。事件源是状态发生的对象，时间(对象)封装了事件中状态的变动，事件接收者是要接受事件源材料的对象，事件源对象将事件的处理工作交给事件接收者。PyQt5有独特的signal&amp;slot(信号槽)机制来处理事件，信号槽用于对象间的通信；signal在某以特定事件发生时被触发，slot可以是任何callable对象；当signal触发时会调用与之相连的slot。</code></pre><h3 id="信号槽Signal-amp-slots"><a href="#信号槽Signal-amp-slots" class="headerlink" title="信号槽Signal&amp;slots"></a>信号槽Signal&amp;slots</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QApplication,</span><br><span class="line">                             QVBoxLayout,QLCDNumber,QSlider)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        lcd = QLCDNumber(self)</span><br><span class="line">        sld = QSlider(Qt.Horizontal, self)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(lcd)</span><br><span class="line">        vbox.addWidget(sld)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line">        sld.valueChanged.connect(lcd.display)</span><br><span class="line">        <span class="comment">#calueChanged参数关联到lcd显示插槽上 </span></span><br><span class="line">        <span class="comment">#sender是发出信号的对象。receiver是接收信号的对象。slot(插槽)是对信号做出反应的方法。</span></span><br><span class="line">        </span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Signal &amp; slot&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重写实现事件处理器"><a href="#重写实现事件处理器" class="headerlink" title="重写实现事件处理器"></a>重写实现事件处理器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">250</span>,<span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Event handler&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keyPressEvent</span>(<span class="params">self,e</span>):</span></span><br><span class="line">        <span class="keyword">if</span> e.key() == Qt.Key_Escape:</span><br><span class="line">            self.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="链接槽函数"><a href="#链接槽函数" class="headerlink" title="链接槽函数"></a>链接槽函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="comment">#import pymel.core as pm        #maya的pyme模块提供了一种槽信号的链接方法，如需要使用需要导入此库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">v</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    btn = QPushButton()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">    btn.clicked.connect(fn)</span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    btn.clicked.connect(<span class="keyword">lambda</span> :fn())</span><br><span class="line">    <span class="comment"># 3</span></span><br><span class="line">    btn.clicked.connect(partial(fn))</span><br><span class="line">    <span class="comment"># 4</span></span><br><span class="line">    <span class="comment"># import pymel.core as pm</span></span><br><span class="line">    <span class="comment"># btn.clicked.connect(pm.Callback(fn))  #pymel的槽函数链接方法演示</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">    btn.clicked.connect(<span class="keyword">lambda</span>:func(<span class="number">456</span>))</span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    btn.clicked.connect(partial(func,<span class="number">456</span>))</span><br><span class="line">    <span class="comment"># 3</span></span><br><span class="line">    <span class="comment"># btn.clicked.connect(pm.Callback(fn,456))  # maya pymel.core.Callback</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        btn.clicked.connect(<span class="keyword">lambda</span>:func(i))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        btn.clicked.connect(partial(func,i))</span><br><span class="line"></span><br><span class="line">    btn.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br></pre></td></tr></table></figure><p>以上代码演示了几种不带参数的槽函数的用法和几种带参数的用法，一般情况下不带参数建议使用lambda方法链接槽函数，其他情况建议使用partial方法不易出现错误的情况。</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础(01)</title>
      <link href="2020/02/22/%E7%AD%86%E8%A8%98/python/Python%E5%9F%BA%E7%A1%80(01)/"/>
      <url>2020/02/22/%E7%AD%86%E8%A8%98/python/Python%E5%9F%BA%E7%A1%80(01)/</url>
      
        <content type="html"><![CDATA[<h1 id="Python编程介绍-01"><a href="#Python编程介绍-01" class="headerlink" title="Python编程介绍 01"></a>Python编程介绍 01</h1><p><strong>本节目标</strong>：学习了解Python语言在当今社会的现状及其未来的发展前景，及对本次课程的总体介绍；本章作为学习笔记记录学习状态</p><blockquote><p>百度百科：<br>Python是一种计算机程序设计语言。是一种<strong>面向对象</strong>的<strong>动态类型</strong>语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。<br>IT为Information Technology（信息技术）的简写，又可引申为信息技术行业的简称。IT行业主要包含计算机和通信方面的知识，若想涉足IT行业一般需要掌握信息获取、处理的基本理论和应用的方法。</p></blockquote><h2 id="Python的起源"><a href="#Python的起源" class="headerlink" title="Python的起源"></a>Python的起源</h2><ul><li>Python由Guidi（龟叔）于1989年处于娱乐性目的开发；Python语言基于ABC教学语言。</li><li> Python上手简单学习成本低，因此比较收到非编程专业领域的人的青睐；它还常用应用于医学、建筑、艺术等其他专业。</li></ul><h2 id="Python的历史"><a href="#Python的历史" class="headerlink" title="Python的历史"></a>Python的历史</h2><ul><li>2008年12月，Python发布3.0版本(也常被称为Python3000、或简称Py3k )，因为3.0和2.x不兼容，所以Python在较长的一段时间内都没有过度的3.0；Python官方称2.x将维护至2020年，所以可以早些接触Python3.x;Houdini的Python3.x测试版本也将在2019年底退出(小笔记小笔记，也不知准不准确，期待期待！！)</li></ul><h2 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h2><ul><li>运维自动化：目前Python主要应用的领域</li><li>大数据处理、数据分析：Python通过丰富多样的库来轻松完成数据分析</li><li>网络爬虫、数据爬取：使用Python开发快速、简洁（人生苦短，我用Python）</li><li>Web后端开发：Python也可以处理，Python提供大量后端框架，便于后端的开发</li><li><strong>机器学习人工智能（AI）</strong>:Python火热的主要原因,了解人工智能就能够理解Python受宠的原因：<blockquote><p>百度百科：人工智能的核心算法是完全依赖于C/C++的，因为是计算密集型，需要非常精细的优化，还需要GPU、专用硬件之类的接口，这些都只有C/C++能做到。所以某种意义上其实C/C++才是人工智能领域最重要的语言。<br>Python是这些库的API binding，使用Python是因为CPython的胶水语言特性，要开发一个其他语言到C/C++的跨语言接口，Python是最容易的，比其他语言的ffi门槛要低不少，尤其是使用Cython的时候。其他语言的ffi许多都只能导入C的函数入口点，复杂的数据结构大多只能手工用byte数组拼起来，如果还需要回调函数输入那就无计可施了。而CPython的C API是双向融合的，可以直接对外暴露封装过的Python对象，还可以允许用户通过继承这些自定义对象来引入新特性，甚至可以从C代码当中再调用Python的函数（当然，也有一定的条件限制）。不过这也是PyPy这样的JIT解释器的一个障碍。<br>而且Python历史上也一直都是科学计算和数据分析的重要工具，有numpy这样的底子，因为行业近似所以选择API binding语言的时候会首选Python，同时复用numpy这样的基础库既减少了开发工作量，也方便从业人员上手。&lt;</p></blockquote></li></ul><h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><h2 id="Python的变量"><a href="#Python的变量" class="headerlink" title="Python的变量"></a>Python的变量</h2><ol><li><p>Python具有如下两个特征：</p><ul><li>变量无需声明即可直接赋值，对一个不存在的变量赋值就相当于定义了这个变量</li><li>变量的数据类型可以动态变化，同一个变量可以赋予不同类型的值，会存储最新赋予的值</li></ul></li><li><p>Python标识符的规则</p><ul><li>Python区分大小写</li><li>标识符可以有字母、数字、下划线( _ )组成，其中不能使用数字开头</li><li>标识符不能是Python关键字，但可以包含关键字</li><li>标识符不能包含空格</li></ul></li><li><p>Python整型</p><ul><li>Python3的整型支持各种整数值，不管识小的整数，还是大的整数，Python都可以轻松处理(Python2x使用long处理数值过大的整型）</li><li>整形的四种表现形式<ul><li> 十进制：最普通的整数就是十进制的整数</li><li>二进制：以0b或者0B开头的整数就是二进制的整数</li><li>八进制：以0o或者0O开头的整数就是八进制的整数</li><li>十六进制：以0x或0X开头的整数就是十六进制的整数</li></ul></li></ul></li><li><p>Python浮点</p><ul><li>浮点型数值用于保存带小数点的数值，Python的浮点数有两种形式<ol><li>十进制数形式：这种形式就是平常简单的浮点数</li><li>科学计数形式：例如5.12e2(5.12*10**2）<blockquote><p>1、把一个绝对值大于等于1或小于10的实数记为a×10n的形式(比如1≤/a/&lt;10),这种记数法叫做科学记数法。例如19971400000000=1.99714×10^13。计算器或电脑表达10的的幂是一般是用E或e，也就是1.99714E13=19971400000000。<br>2、用科学记数法表示数时，不改变数的符号，只是改变数的书写形式而已。可以方便的表示日常生活中遇到的一些极大或极小的数，如：光的速度大约是300,000,000米/秒；全世界人口数大约是：6,100,000,000.<br>这样的数，读、写都很不方便，我们可以免去写这么多重复的0，将其表现为这样的形式：6,100,000,000=6.1×10^9，<br>或：0.00001=1×10^-5，即绝对值小于1的数也可以用科学记数法表示为a乘10 的负n次方的形式。&lt;</p></blockquote></li></ol></li></ul></li><li><p>Python的复数</p><ul><li>Python支持复数，复数的虚部用j或者J表达式</li><li>如果需要在程序对复数进行计算，可导入Python的cmath模块(c代表complex)，该模块下包含了各种支持复数运算的函数</li></ul></li></ol><h1 id="Python编程-字符串入门-02"><a href="#Python编程-字符串入门-02" class="headerlink" title="Python编程-字符串入门 02"></a>Python编程-字符串入门 02</h1><h2 id="字符串的基础用法"><a href="#字符串的基础用法" class="headerlink" title="字符串的基础用法"></a>字符串的基础用法</h2><ul><li>此处省略<a href="https://edu.csdn.net/course/play/24797/282155">21天通过Python-李刚</a></li></ul><h2 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h2><ul><li>将两个字符紧挨着写在一起，Python就会自动拼接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&quot;BuBuPython&quot;</span><span class="string">&quot;get-up&quot;</span></span><br><span class="line"><span class="comment"># &#x27;BuBuPythonget-up&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>使用加号 + 拼接两个字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">st1 = <span class="string">&quot;我要学&quot;</span></span><br><span class="line">st2 = <span class="string">&quot;Python&quot;</span></span><br><span class="line">st1 + st2</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>‘我要学Python’<br>#这里的st1、st2是我定义的两个字符串</p></blockquote><ul><li>不同类型字符串拼接，拼接前需使用str()或repr()函数进行转化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pt1 = <span class="number">25</span></span><br><span class="line">pt2 = <span class="number">11.3</span></span><br><span class="line"><span class="comment"># TypeError：st1+pt1</span></span><br><span class="line">st1 + <span class="built_in">str</span>(pt1)</span><br><span class="line"><span class="comment"># &#x27;我要学25&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="repr函数，input获取用户数据"><a href="#repr函数，input获取用户数据" class="headerlink" title="repr函数，input获取用户数据"></a>repr函数，input获取用户数据</h2><ul><li>repr()会以Python表达式的形式来表示值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">st2 = <span class="string">&quot;羞愧难当&quot;</span></span><br><span class="line"><span class="built_in">print</span> (st2)</span><br><span class="line"><span class="comment"># 羞愧难当</span></span><br><span class="line"></span><br><span class="line">st2 = <span class="built_in">repr</span>(<span class="string">&quot;羞愧难当&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (st2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>‘羞愧难当’<br> #可以使用repr()函数来强制Python字符类型的表现形式</p></blockquote><ul><li>Python 获取用户输入</li></ul><ol><li>input()向用户生成一条提示，然后获取用户的输入内容</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (name)</span><br><span class="line">&gt;请输入你的名字：帅B</span><br><span class="line">帅B</span><br><span class="line"><span class="comment">#这次因为是执行两行代码，所以不能直接在IDE中打印，需要创建一个Python文件然后保存按F5来执行</span></span><br><span class="line"><span class="comment">#执行后会直接跳出“请输入你的名字：”输入结果后程序获得结果并打印出来“帅B”</span></span><br></pre></td></tr></table></figure><ul><li>Python2.x的raw_input()相当于Python3.x中的input()</li><li>Python2.x的input()函数则比较怪异 <h2 id="长字符串与原始字符串"><a href="#长字符串与原始字符串" class="headerlink" title="长字符串与原始字符串"></a>长字符串与原始字符串</h2></li><li>长字符串使用三个引号(单引号、双引号都可以)括起来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    st8 = <span class="string">&#x27;&#x27;&#x27;你好</span></span><br><span class="line"><span class="string">    很高兴认识你</span></span><br><span class="line"><span class="string">    我叫田暴雷</span></span><br><span class="line"><span class="string">    叫我大雷就好</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> (st8)</span><br><span class="line">&gt;你好</span><br><span class="line">很高兴认识你</span><br><span class="line">我叫田暴雷</span><br><span class="line">叫我大雷就好</span><br><span class="line"><span class="comment">#像这种字符串很长的字符，就可以用三组单引号来定义(赋值)</span></span><br></pre></td></tr></table></figure><ul><li>Python会允许使用转义符(\)对换行符转义，这样也可以定义字符串<blockquote><p>#这里要实现“\”需要多打两个或者三个才阔以￣□￣｜｜</p></blockquote></li><li>原始字符串</li></ul><ol><li>原始字符串以r开头，原始字符串不会把反斜杠\当成特殊字符</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    st = <span class="string">r&#x27;老司机带带我！\n我要成大佬！&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> (st)</span><br><span class="line">&gt;老司机带带我！\n我要成大佬！</span><br><span class="line"><span class="comment">#这里就成功的将\\当成一个字符串打印出来了</span></span><br></pre></td></tr></table></figure><ul><li>如果原始字符串中包含引号(一组引号的其中一个时)，程序同样需要对引号进行转义(否则Python同样无法对字符串的引号精确匹配) </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    st7 = <span class="string">r&#x27;教练我要学‘开车&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> (st7)</span><br><span class="line">   &gt; 教练我要学‘开车</span><br><span class="line">   </span><br><span class="line">    st7 = <span class="string">&#x27;教练我要学&#x27;</span>开车<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">   &gt;SyntaxError: invalid syntax</span></span><br><span class="line"><span class="string">   #这里运行报错，加上\\转义符后就可以将&#x27;</span>号转为原始字符，如下</span><br><span class="line">   </span><br><span class="line">    st7 = <span class="string">&#x27;教练我要学\&#x27;开车&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> (st7)</span><br><span class="line">   &gt; 教练我要学<span class="string">&#x27;开车</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">st7 = &quot;教练我要学\&#x27;开车&quot;</span></span><br><span class="line"><span class="string">print (st7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;教练我要学&#x27;</span>开车</span><br></pre></td></tr></table></figure><blockquote><p>#我试了试在一个数组中加一个独立的引号，运行直接报错了</p></blockquote><h2 id="字节串与字符串"><a href="#字节串与字符串" class="headerlink" title="字节串与字符串"></a>字节串与字符串</h2><ul><li>字符串(str)由多个字符组成；字节串(bytes)由多个字节组成</li><li>bytes和str除了操作的数据单元不同之外，它们所支持的方法都基本相同，bytes也是不可变序列<blockquote><p><a href="http://blog.chinaunix.net/uid-26602509-id-3085906.html">A</a>  &lt;——-何为可变序列何为不可变序列—–&gt; <a href="https://www.cnblogs.com/pslblog/p/10095492.html">B</a></p></blockquote></li><li>字符串和字节串间的相互转化</br></li></ul><ol><li>将字符串转换成bytes对象有如下三种方式：<ul><li>如果字符串内容都是<a href="https://baike.baidu.com/item/ASCII/309296?fr=aladdin">ASCII</a>字符，可以通过直接在字符串之前添加b前缀来构建字节串值</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st7 = <span class="string">b&#x27;你好&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">type</span>(st7))</span><br><span class="line"><span class="comment"># SyntaxError: bytes can only contain ASCII literal characters.</span></span><br><span class="line">      </span><br><span class="line">st7 = <span class="string">b&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">type</span>(st7))</span><br><span class="line">       </span><br><span class="line"><span class="comment"># &lt;class &#x27;bytes&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>调用butes()函数(其实是bytes的构造方法)将字符串按指定的方式转化为字节串或转化为指定类型的字节串，默认使用UTF-8字符集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st6 = <span class="string">&quot;我爱我家&quot;</span>.encode()</span><br><span class="line"><span class="built_in">print</span> (st6)</span><br><span class="line"><span class="comment"># b&#x27;\xe6\x88\x91\xe7\x88\xb1\xe6\x88\x91\xe5\xae\xb6&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>调用字符串本身的encode()方法将字符串按指定字符集转化成字节串，默认使用UTF-8字符集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">st6 = <span class="built_in">bytes</span>(<span class="string">&quot;我爱我家&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (st6)</span><br><span class="line"><span class="comment"># b&#x27;\xe6\x88\x91\xe7\x88\xb1\xe6\x88\x91\xe5\xae\xb6&#x27;</span></span><br><span class="line"><span class="comment"># 这种方式要加字符集否则Python会直接报错，不能正常运行    </span></span><br></pre></td></tr></table></figure><pre><code>2.调用bytes对象的decode()方法将bytes对象解码成字符串 </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st9 = <span class="string">b&#x27;\xe6\x88\x91\xe7\x88\xb1\xe6\x88\x91\xe5\xae\xb6&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (st9.decode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line"><span class="comment"># 我爱我家</span></span><br></pre></td></tr></table></figure><h1 id="转义字符-03"><a href="#转义字符-03" class="headerlink" title="转义字符 03"></a>转义字符 03</h1><ul><li><p>在字符操作中\表示转义，如果字符串本身包含反斜杠，则需要\表示，其中\就是转义字符</p>  <table class="reference">      <thead>          <tr>              <th>转义字符</th><th>描述</th>          </tr>      </thead>      <tbody>          <tr>              <td>\(在行尾时)</td>              <td>续行符</td>          </tr>          <tr>              <td>\\</td>              <td>反斜杠符号</td>          </tr>          <tr>              <td>\'</td>              <td>单引号</td>          </tr>          <tr>              <td>\"</td>              <td>双引号</td>          </tr>          <tr>              <td>\a</td>              <td>响铃</td>          </tr>          <tr>              <td>\b</td>              <td>退格(Backspace)</td>          </tr>          <tr>              <td>\e</td>              <td>转义</td>          </tr>          <tr>              <td>\000</td>              <td>空</td>          </tr>          <tr>              <td>\n</td>              <td>换行</td>          </tr>          <tr>              <td>\v</td>              <td>纵向制表符</td>          </tr>          <tr>              <td>\t</td>              <td>横向制表符</td>          </tr>          <tr>              <td>\r</td>              <td>回车</td>          </tr>          <tr>              <td>\f</td>              <td>换页</td>          </tr>          <tr>              <td>\oyy</td>              <td>八进制数，yy代表的字符，例如：\o12代表换行</td>          </tr>          <tr>              <td>\xyy</td>              <td>十六进制数，yy代表的字符，例如：\x0a代表换行</td>          </tr>          <tr>              <td>\other</td>              <td>其它的字符以普通格式输出</td>          </tr>      </tbody>  </table></li></ul><p>例：</p><pre><code>`st0 = &#39;J\nK\nL&#39;`</code></pre><blockquote><p>   J<br>    K<br>    L</p></blockquote><h1 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h1><ul><li><p>使用%加转换说明符的方式执行字符格式化，Python支持如下所示转换说明符</p>  <table class="reference">     <thead>         <tr>             <th>转义说明符</th><th>说明</th>         </tr>     </thead>     <tbody>         <tr>             <td>d,i</td>             <td>转换为带十进制的整数</td>         </tr>         <tr>             <td>o</td>             <td>转换为带符号的八进制整数</td>         </tr>         <tr>             <td>x,X</td>             <td>转换为带符号的十六进制整数</td>         </tr>         <tr>             <td>e,E</td>             <td>转换为科学计数法表示的浮点数(e小写、E大写)</td>         </tr>         <tr>             <td>f,F</td>             <td>转换为十进制浮点数</td>         </tr>         <tr>             <td>g</td>             <td>智能选择f或e格式</td>         </tr>         <tr>             <td>G</td>             <td>智能选择F或E格式</td>         </tr>         <tr>             <td>c</td>             <td>转换为单字符(只接受整数或单字符字符串)</td>         </tr>         <tr>             <td>r</td>             <td>使用repr()将变量或表达式转换为字符串</td>         </tr>         <tr>             <td>s</td>             <td>使用str()将变量或表达式转换为字符串</td>         </tr>     </tbody> </table>例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st1 = <span class="string">&#x27;我爱%s&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (st1%<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"><span class="comment"># 我爱Python</span></span><br></pre></td></tr></table></figure> #这里%s表示的是替代符要将替代**源对象**转换数组再替代进来到目标**位置上**(可能这种解释不是很对，个人理解)<p> st2 = ‘我的名字是%s,我%d岁了’<br> print (st2 %(‘田大雷’,25))</p><blockquote><p> 我的名字是田大雷,我25岁了<br> #这里因为有两个转换字符，它们所组成了一个元组，所以要用括号将这两个个准换符括起来</p></blockquote><h1 id="调用函数-方法-操作字符串"><a href="#调用函数-方法-操作字符串" class="headerlink" title="调用函数(方法)操作字符串"></a>调用函数(方法)操作字符串</h1></li><li><p>字符串本质就是由多个字符组成，字符的本质就是不可变序列，因此序列相关的方法：</p></li></ul><h4 id="基于索引的计算"><a href="#基于索引的计算" class="headerlink" title="基于索引的计算"></a>基于索引的计算</h4><pre><code>st3 = &#39;houdini.vfx&#39;print(st3[3])print(st3[2:5])print(st3[3:8:2])</code></pre><blockquote><p>   d<br>        udi<br>        dn.<br>        #打印st3里的第三个字符 <strong>(开始)</strong><br>        #打印st3字符串中第二个开始到第五个左右字符(包含开始，不包含结尾) <strong>(开始、结束)</strong><br>        #打印st3字符串中第三个开始到第八个结束隔一个打印(间隔为2) <strong>(开始、结束、间隔)</strong><br>        #<em><strong>常用于提取字符串中的指定字符</strong></em></p></blockquote><h4 id="in运算"><a href="#in运算" class="headerlink" title="in运算"></a>in运算</h4><pre><code>st3 = &#39;houdini.vfx&#39;print (&#39;vfx&#39; in st3)print (&#39;rbd&#39; in st3)</code></pre><blockquote><p> True<br>        False<br>       #in即 <em><strong>判断一个赋值串是否包含在某个字符串中</strong></em> ，如果是返回True，否则返回False</p></blockquote><h4 id="len-函数"><a href="#len-函数" class="headerlink" title="len()函数"></a>len()函数</h4><pre><code>st3 = &#39;houdini.vfx&#39;print (len(st3))</code></pre><blockquote><p>11<br>      #<em><strong>用于计算字符串长度</strong></em> </p></blockquote><h4 id="min-max-函数"><a href="#min-max-函数" class="headerlink" title="min()\max()函数"></a>min()\max()函数</h4><pre><code>st3 = &#39;houdini.vfx&#39;print (max(st3))print (min(st3))</code></pre><blockquote><p>x<br>        .<br>    #而 <em><strong>max和min则用于分别求字符串中最大的字符串和最小的字符串</strong></em></p></blockquote><h4 id="大小写相关的方法"><a href="#大小写相关的方法" class="headerlink" title="大小写相关的方法"></a>大小写相关的方法</h4><ul><li><p>title():将每个单词首字母改为大写</p></li><li><p>lower():将整个字符串改为小写</p></li><li><p>upper():将整个字符串改为大写</p><h4 id="删除空白的方法"><a href="#删除空白的方法" class="headerlink" title="删除空白的方法"></a>删除空白的方法</h4></li><li><p>strip():删除字符串前后的空白</p></li><li><p>lstrip():删除字符串<strong>左边</strong>的空白</p></li><li><p>rstrip():删除字符串<strong>右边</strong>的空白</p><h4 id="查找、替换相关的方法"><a href="#查找、替换相关的方法" class="headerlink" title="查找、替换相关的方法"></a>查找、替换相关的方法</h4></li><li><p>startswith():判断字符串是否以指定字符开头</p></li><li><p>endswith():判断字符串是否以指定字符结尾</p></li><li><p>find():查找指定字符在字符串中的位置，如果找到返回位置信息，如果没有返回-1</p></li><li><p>index():查找指定字符在字符串中的位置，如果找到返回位置信息，如果没有则引发ValueError错误</p></li><li><p>replace():使用指定字符替换字符串中的目标字串</p></li><li><p>translate():使用指定的翻译映射对字符串执行替换</p></li></ul><h4 id="使用dir查询Python方法的使用方法"><a href="#使用dir查询Python方法的使用方法" class="headerlink" title="使用dir查询Python方法的使用方法"></a>使用dir查询Python方法的使用方法</h4><pre><code>dir(str)</code></pre><blockquote><p>[‘_<em>add_</em>‘, ‘_<em>class_</em>‘, ‘_<em>contains_</em>‘, ‘_<em>delattr_</em>‘, ‘_<em>dir_</em>‘, ‘_<em>doc_</em>‘, ‘_<em>eq_</em>‘, ‘_<em>format_</em>‘, ‘_<em>ge_</em>‘, ‘_<em>getattribute_</em>‘, ‘_<em>getitem_</em>‘, ‘_<em>getnewargs_</em>‘, ‘_<em>gt_</em>‘, ‘_<em>hash_</em>‘, ‘_<em>init_</em>‘, ‘_<em>init_subclass_</em>‘, ‘_<em>iter_</em>‘, ‘<strong>le</strong>‘, ‘_<em>len_</em>‘, ‘_<em>lt_</em>‘, ‘_<em>mod_</em>‘, ‘_<em>mul_</em>‘, ‘_<em>ne_</em>‘, ‘_<em>new_</em>‘, ‘_<em>reduce_</em>‘, ‘_<em>reduce_ex_</em>‘, ‘_<em>repr_</em>‘, ‘_<em>rmod_</em>‘, ‘_<em>rmul_</em>‘, ‘_<em>setattr_</em>‘, ‘_<em>sizeof_</em>‘, ‘_<em>str_</em>‘, ‘_<em>subclasshook_</em>‘, ‘capitalize’, ‘casefold’, ‘center’, ‘count’, ‘encode’, ‘endswith’, ‘expandtabs’, ‘find’, ‘format’, ‘format_map’, ‘index’, ‘isalnum’, ‘isalpha’, ‘isascii’, ‘isdecimal’, ‘isdigit’, ‘isidentifier’, ‘islower’, ‘isnumeric’, ‘isprintable’, ‘isspace’, ‘istitle’, ‘isupper’, ‘join’, ‘ljust’, ‘lower’, ‘lstrip’, ‘maketrans’, ‘partition’, ‘replace’, ‘rfind’, ‘rindex’, ‘rjust’, ‘rpartition’, ‘rsplit’, ‘rstrip’, ‘split’, ‘splitlines’, ‘startswith’, ‘strip’, ‘swapcase’, ‘title’, ‘translate’, ‘upper’, ‘zfill’]<br>#列数关于字符串的所有方法<br>#前后带’__’的方法不能直接使用(后续课程补上)，其他可以直接使用，具体使用方法，使用**help(str.方法)**查阅</p></blockquote><pre><code>help(str.islower)</code></pre><blockquote><p>Help on method_descriptor:<br>islower(self, /)<br>    Return True if the string is a lowercase string, False otherwise.<br>    A string is lowercase if all cased characters in the string are lowercase and<br>    there is at least one cased character in the string.<br>#查看字符串方法中islower的具体使用方法,以上就是对这个方法怎么使用的具体描述(需要一定的英文阅读能力⊙﹏⊙∥∣°)</p></blockquote><pre><code>inta = float(input(&quot;请输入第一个数值：&quot;))intb = float(input(&quot;请输入第二个数值：&quot;))print(&quot;两个数的和为：&quot;+ str(inta+intb))print(&quot;和的十六进制为:&quot; + hex(int(inta+intb)))print(&quot;两个数的差为：&quot; + str(inta-intb))print(&quot;差的八进制为：&quot; + oct(int(inta-intb)) )print(&quot;两个数的积为：&quot; + str(inta*intb))print(&quot;积的二进制为：&quot; + bin(int(inta*intb)))</code></pre><h1 id="www-runoob-com"><a href="#www-runoob-com" class="headerlink" title="www.runoob.com"></a><a href="https://www.runoob.com/python/python-tutorial.html">www.runoob.com</a></h1><p>找到一个很好的python资料网站，记录起来，日后常翻！</p><h1 id="赋值运算符与扩展的赋值运算符-04"><a href="#赋值运算符与扩展的赋值运算符-04" class="headerlink" title="赋值运算符与扩展的赋值运算符 04"></a>赋值运算符与扩展的赋值运算符 04</h1><ul><li>赋值运算符是 ‘ = ‘号<br> 赋值运算符的作用是将等号右边的值赋予到等号左边的变量中</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul><li><p>+、-、<em>、/、//(整除)、%、</em>*(乘方)</p><pre><code>div1 = 5/3print(div1)div2 = 5//3print(div2)</code></pre><blockquote><p>整除的结果总是只保留整数部分</p></blockquote><pre><code>mod1 = 23%7print(mod1)</code></pre><blockquote><p>求余的结果总是与除数保持一致</p></blockquote><pre><code>print(4**5)print(1024**.25)print(1024**(1/5))print(32**.5)</code></pre><blockquote><p>** 可以用来求乘方也可以用来求开方<br> 如果要实现复杂的数学运算，可以导入math模块</p></blockquote><h2 id="扩展的赋值运算符"><a href="#扩展的赋值运算符" class="headerlink" title="扩展的赋值运算符"></a>扩展的赋值运算符</h2><blockquote><p>   x += y,即对应与x = x+y<br> x -= y,即对应与x = x-y<br> x <em>= y,即对应与x = x</em>y<br> x /= y,即对应与x = x/y<br> x //= y,即对应与x = x//y<br> x %= y,即对应与x = x%y<br> x **= y,即对应与x = x**y</p></blockquote><h1 id="索引运算符"><a href="#索引运算符" class="headerlink" title="索引运算符"></a>索引运算符</h1></li><li><p>索引运算符就是 [ ] 方括号</p></li><li><p>方括号中可使用单个索引，用于访问单个元素</p></li><li><p>方括号中也可以使用索引范围，使用索引范围时，还可以指定步长</p><pre><code> str2 = &quot;HoudiniVFX&quot;print(str2[-2])print(str2[1:5:2])</code></pre><blockquote><p>索引运算符对所有的序列**(字符串、字节串、列表、元组)**都起作用</p></blockquote><h1 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h1><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>&gt; 、&gt;= : 大于、大于或等于</p><pre><code>\&lt;、\&lt;=:小于、小于或等于</code></pre><p>  ==：等于<br>  ！=：不等于<br>  is(is not):判断两个变量引用的对象是否相同(不相同)，如果相同(不相同)返回True，否则返回False</p></li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>and:与，任一操作中为False，结果返回False<br>or:或，任一操作中为True，结果返回True<br>not:非，只需要一个操作数，如果操作数为True，则返回False；如果操作数为False，则返回True</p><h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><ul><li><p>Python使用if表达式代替三目运算符</p></li><li><p>True_statements if expression else False_statements</p></li><li><p>if支持嵌套</p><pre><code>name = str(input(&quot;请输入你的名字：&quot;))age = int(input(&quot;请输入你的熟练度：&quot;))print(name[-2:] + &quot; 先生/女士&quot; + &quot;您好！&quot;) if(age &gt; 4500) else print(name[-2:] + &quot; 小朋友&quot; + &quot;你好呀！&quot;)</code></pre><h1 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h1></li><li><p>用于判断元素是否在一个序列(字符串、字节串、序列、元组)中</p><pre><code> str3 = &quot;吸油糖&quot; print(&quot;吸&quot; in str3) print(&quot;广州&quot; in str3)</code></pre></li></ul><h1 id="通过索引访问元素-05"><a href="#通过索引访问元素-05" class="headerlink" title="通过索引访问元素 05"></a>通过索引访问元素 05</h1><h2 id="列表和元组都可以通过索引来访问元素："><a href="#列表和元组都可以通过索引来访问元素：" class="headerlink" title="列表和元组都可以通过索引来访问元素："></a>列表和元组都可以通过索引来访问元素：</h2><blockquote><p>Python文件书写标准开头模板</p></blockquote><pre><code># -*- coding: utf-8 -*-# @Time : 2019/7/25 12:53# @Author : yaogang_li# @File : 2.2列表和元组.py </code></pre><ul><li><p>一种是正向访问(从左到右)，索引从0开始：第一个元素索引为0，第二个元素索引为1，…..以此类推；</p></li><li><p>一种是反相访问(从右到左)，索引从-1开始：倒数第一个元素索引为-1，倒数第二个元素索引为-2,….以此类推;</p><pre><code>my_tuple = tuple(range(3,10))print(my_tuple)</code></pre><blockquote><p>len()函数可以获取对象元素的长度(元素数量)</p></blockquote><p> print(len(my_tuple))<br> print(str(“打印my_tuple第二个元素为：”) + str(my_tuple[2]))<br> print(str(“打印my_tuple倒数第二个元素为：”) + str(my_tuple[-2]))</p><blockquote><p>当你使用索引访问元素时，你的索引必须在 <strong>-len ~ len-1</strong>之间，否则程序就会报错(IndexError: tuple index out of range)<br>##print(str(“打印my_tuple倒数第二个元素为：”) + str(my_tuple[20]))</p></blockquote></li></ul><h2 id="子序列"><a href="#子序列" class="headerlink" title="子序列"></a>子序列</h2><ul><li><p>列表和元组也可以使用索引获取元素中间字符，这种方法被称为slice(分片和切片)<br>slice的完整格式 [start: end :step] 开始：结束：步幅</p><pre><code>my_list1 = str(&quot;降世魔童&quot;)print (my_list1[0:3:2])my_tuple1 = (1,3,5,8,4,2,&quot;Python&quot;,&quot;Houdini&quot;,&quot;Maya&quot;)print(my_tuple1[0: -1 :2])</code></pre><blockquote><p>获取子序列(元素的中间字符/序列的中间元素)</p></blockquote></li><li><p>元组和列表的加减</p><pre><code>my_list2 = [&quot;动画电影&quot;]                 #列表my_tuple2 = (25,5,10,82,&quot;神兵小将&quot;)     #元组print (list(my_list1) + my_list2)print (tuple(my_tuple1) + my_tuple2)print (my_list2+ list(my_tuple2))</code></pre></li><li><p>列表需要使用 <strong>[ ]</strong> 中括号括起来，元组则是 <strong>( )</strong> 小括号；数组则直接返回字符串不带符号(可强制返回引号 吗？)</p><pre><code>print(my_list1)print(my_list2)print(my_tuple2)</code></pre></li></ul><h1 id="序列相关函数与封包解包"><a href="#序列相关函数与封包解包" class="headerlink" title="序列相关函数与封包解包"></a>序列相关函数与封包解包</h1><h2 id="len-、max-、min-函数"><a href="#len-、max-、min-函数" class="headerlink" title="len()、max()、min()函数"></a>len()、max()、min()函数</h2><ul><li><p>len()、max()、min()函数可分别获取元组或者列表的长度、最大值、最小值</p><pre><code>mystr1 = &quot;我是一个热爱生活的艺术家！&quot;mylist1 = [&quot;Python&quot;,&quot;Houdini&quot;,&quot;Maya&quot;,&quot;Nuke&quot;,&quot;帅刚&quot;]mytuple1 = (&quot;亦建&quot;,&quot;淮宝&quot;,&quot;思婷&quot;,&quot;啊凡&quot;,&quot;啊航&quot;,&quot;雅思&quot;)print(len(mystr1),max(mystr1),min(mystr1))print(len(mylist1),max(mylist1),min(mylist1))print(len(mytuple1),max(mytuple1),min(mytuple1))</code></pre></li><li><p>字符串比较大小时，将会依次按字符串中每个字符对应的编码来比较大小</p></li><li><p>字符串比较大小时，先比较第一个字符的大小，再比较第二个字符….</p></li></ul><h2 id="序列封包"><a href="#序列封包" class="headerlink" title="序列封包"></a>序列封包</h2><ul><li><p>在Python里把多个值赋予给一个变量时，Python会自动将多个值封装成元组。这种功能被称为序列封包</p><pre><code>data1 = 3,6,&quot;Houdini&quot;,&quot;Nuke&quot;print(len(data1))print(type(data1).__name__)</code></pre></li></ul><h2 id="序列解包"><a href="#序列解包" class="headerlink" title="序列解包"></a>序列解包</h2><ul><li>序列(元组或列表等)可以直接赋予多个变量，此时序列的元素会被依次赋予给每个变量**(要求序列的元素个数和变量个数相等)**，这种功能被称为序列解包<pre><code> mylist1 = [&quot;Python&quot;,&quot;Houdini&quot;,&quot;Maya&quot;,&quot;Nuke&quot;,&quot;帅刚&quot;]mytuple1 = (&quot;亦建&quot;,&quot;淮宝&quot;,&quot;思婷&quot;,&quot;啊凡&quot;,&quot;啊航&quot;,&quot;雅思&quot;) str1 = &quot;Python&quot;,&quot;Houdini&quot;,&quot;VFX&quot;a,b,c = str1d,e,f = mylist1[-3:]g,h,i = mytuple1[0:3]print(a,b,c,d,e,f,g,h,i)</code></pre></li></ul><blockquote><p>.有时候需要解包的对象元素大于要分配的变量个数时，可以使用slice的方式获取其中一部分来解包赋值<br>. 封包适用于元组、列表、字符串等序列,包括(range)</p></blockquote><pre><code>j,k,l,m = range(520,524)print(j,k,l,m)</code></pre><ul><li>当只需要解包其中一个元素给特定变量其他变量随意分配时，可以在随意分配的变量前加一个<em>号，这样就会先按照顺序自动解包赋予上值，剩下的就会以列表的形式赋予给由</em>号的变量<pre><code> mylist1 = [&quot;Python&quot;,&quot;Houdini&quot;,&quot;Maya&quot;,&quot;Nuke&quot;,&quot;帅刚&quot;]mytuple1 = (&quot;亦建&quot;,&quot;淮宝&quot;,&quot;思婷&quot;,&quot;啊凡&quot;,&quot;啊航&quot;,&quot;雅思&quot;) n,*o,p = mystr1q,r,*s = mytuple1print(n,o,p,q,r,s)</code></pre><blockquote><p>我 [‘是’, ‘一’, ‘个’, ‘热’, ‘爱’, ‘生’, ‘活’, ‘的’, ‘艺’, ‘术’, ‘家’] ！ 亦建 淮宝 [‘思婷’, ‘啊凡’, ‘啊航’, ‘雅思’]</p></blockquote></li></ul><h2 id="多个变量同时赋值"><a href="#多个变量同时赋值" class="headerlink" title="多个变量同时赋值"></a>多个变量同时赋值</h2><ul><li>Python的赋值运算符支持同时将多个值赋予给多个变量，这是因为Python同时运用了序列的封包和解包<pre><code>t,u,v = &quot;Python&quot;,&quot;Houdini&quot;,&quot;VFX&quot;print(t,u,v)</code></pre><blockquote><p>这里就是先将等号右边的三个字符串打包成元组，再依次解包赋值到对应的变量上</p></blockquote></li></ul><h1 id="列表的添加、删除、替换-06"><a href="#列表的添加、删除、替换-06" class="headerlink" title="列表的添加、删除、替换 06"></a>列表的添加、删除、替换 06</h1><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><ul><li><p><strong>append()</strong> 方法会把传入的参数追加到列表的最后</p></li><li><p>append()方法追加另一个列表(序列)时，列表被 <strong>当成一个元素</strong></p></li><li><p><strong>extend()</strong> 方法用于追加另一个列表(序列)，他会将列表(序列)中的元素 <strong>拆分后追加</strong> 进来</p></li><li><p><strong>insert()</strong> 方法将元素 <strong>插入列表指定位置</strong></p><pre><code> #列表元素的添加 list1 = [&quot;吸油糖&quot;,&quot;Houdini&quot;,&quot;VFX&quot;] list2 = [1,3,5,7,9] list3 = [3] list4 = [4] list5 = [5] list3.append(list1) #加入一个元素 print(list3) list4.extend(list1) #拆分元素再加入 print(list4) list5.insert(0,list1)   #插入指定位置 print(list5)</code></pre></li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p> #列表元素的删除，使用del函数实现元素的删除</p><pre><code>    list_a = [&quot;吸油糖&quot;,&quot;Houdini&quot;,&quot;VFX&quot;]    list_b = [1,3,5,7,9]    del list_a[0]   #删除指定元素    print(list_a)    del list_b[1:4]    print(list_b)   #删除指定范围内的元素    list_a.extend(list_b)    del list_a[0:3:2]    print(list_a)   #删除范围内指定步幅的元素</code></pre><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ul><li>对列表的元素赋值即可修改列表中的元素</li><li>还可以通过slice语法对列表的其中一部分赋值，对列表的其中一部分赋值时，并不要求新值的元素个数与原元素个数相等；这种行为即可为列表增加元素，也可为列表删除元素</li><li>对列表的slice语法赋值时，不能使用单个值；如果使用字符串赋值，Python会自动把字符串当成序列处理<pre><code>  #列表元素的替换(增加、删除) list_1 = [&quot;魔丸&quot;,&quot;魔童&quot;,&quot;哪吒&quot;,&quot;命运&quot;,&quot;友情&quot;,&quot;亲情&quot;] list_2 = [&quot;故事&quot;,&quot;节奏&quot;,&quot;画面&quot;,&quot;超赞&quot;] list_3 = [] list_1[0:3] = list_3 print(list_1)    #这里因为list_3为一个空对象，所以将0-3四个元素替换为空，就等于删除了list_1中0-3的元素 list_1[0:1] = list_2 print(list_1)    #这里list_2元素个数大于0-1两个，所以相当与增加了list_1的元素 #列表元素的替换其实就是对列表元素中的指定元素重新赋值</code></pre></li></ul><h1 id="列表的常用手法"><a href="#列表的常用手法" class="headerlink" title="列表的常用手法"></a>列表的常用手法</h1><h2 id="列表的几个常用方法"><a href="#列表的几个常用方法" class="headerlink" title="列表的几个常用方法"></a>列表的几个常用方法</h2><ul><li>使用dir()list可查看列表支持的方法，使用help(方法)来查看方法的具体使用方式<pre><code> #列表常用的一些方法演示 #count() 求列表中某个元素出现的次数 print(list_2.count(&quot;画面&quot;)) #index() 元素再列表中的位置 print(list_2.index(&quot;超赞&quot;)) #reverse()  反转列表/序列的排列顺序 list_2.reverse() print (list_2) #sort() 排序，默认是根据字符编码对列表/序列中的元素进行排序 list_2.sort() print(list_2) #__len__ 获取列表/序列的元素个数/长度 print(list_2.__len__())</code></pre></li></ul><h1 id="创建字典-07"><a href="#创建字典-07" class="headerlink" title="创建字典 07"></a>创建字典 07</h1><h2 id="什么是字典"><a href="#什么是字典" class="headerlink" title="什么是字典"></a>什么是字典</h2><ul><li>字典就是用于保存具有映射关系的数据，字典相当于保存两组数据，其中一组是关键数据，成为key；另一组数据可以通过key来访问，被称为value</li><li><strong>特性：</strong> 字典中每一个key对应一个value,每一个key都不能相同，但是value可以多个相等<h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2></li></ul><ol><li>花括号法：花括号应包含多组key-value对，key-value之间用英文的冒号隔开；多组key-value对之间使用英文逗号隔开<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#字典中key和value一一对应，key都是独一无二的不可以相同，value可以多个相同</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;语文&#x27;</span>:<span class="number">89</span>,<span class="string">&#x27;数学&#x27;</span>:<span class="number">78</span>,<span class="string">&#x27;英语&#x27;</span>:<span class="number">95</span>,<span class="string">&#x27;地理&#x27;</span>:<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br></pre></td></tr></table></figure></li><li>dict构造器：可以传入多个列表或元组参数作为key-value对；也可以为dict指定关键字参数创建字典，此时字典的key不允许使用表达式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#使用dict创建字典时，列表/序列中的每个元素必须包含两个子元素如下，如若子元素个数不为2，则字典创建失败，返回&#x27;ValueError: dictionary update sequence element #3 has length 3; 2 is required&#x27;</span></span><br><span class="line">dicta = <span class="built_in">dict</span>([(<span class="string">&#x27;小学&#x27;</span>,<span class="number">7</span>),(<span class="string">&#x27;初中&#x27;</span>,<span class="number">13</span>),(<span class="string">&#x27;高中&#x27;</span>,<span class="number">16</span>),(<span class="string">&#x27;大学&#x27;</span>,<span class="number">19</span>)])</span><br><span class="line"><span class="built_in">print</span>(dicta)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用关键字参数创建字典(dict)时，不能使用表达式</span></span><br><span class="line">dictb = <span class="built_in">dict</span>(小学=<span class="number">7</span>,初中=<span class="number">13</span>,高中=<span class="number">16</span>,大学=<span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(dictb)</span><br></pre></td></tr></table></figure></li><li>字典的key是不可变的，因此列表不能作为dict的key</li></ol><h1 id="操作字典key-value对"><a href="#操作字典key-value对" class="headerlink" title="操作字典key-value对"></a>操作字典key-value对</h1><ul><li>使用方括号和key来<strong>访问</strong>key对应的value值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字典中通过key访问value</span></span><br><span class="line">dictb = <span class="built_in">dict</span>(小学=<span class="number">7</span>,初中=<span class="number">13</span>,高中=<span class="number">16</span>,大学=<span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(dictb[<span class="string">&#x27;高中&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li>当对不存在的key赋value值时，相当于给字典<strong>添加</strong>字典元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字典元素的添加</span></span><br><span class="line">dictb = <span class="built_in">dict</span>(小学=<span class="number">7</span>,初中=<span class="number">13</span>,高中=<span class="number">16</span>,大学=<span class="number">19</span>)</span><br><span class="line">dictb[<span class="string">&#x27;社会实践&#x27;</span>] = <span class="string">&#x27;forever&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dictb)</span><br></pre></td></tr></table></figure></li><li>当对已存在的key赋value值时，相当于<strong>替换</strong>字典中对应key的value值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#字典元素替换</span></span><br><span class="line">dictb = <span class="built_in">dict</span>(小学=<span class="number">7</span>,初中=<span class="number">13</span>,高中=<span class="number">16</span>,大学=<span class="number">19</span>)</span><br><span class="line">dictb[<span class="string">&#x27;高中&#x27;</span>] = <span class="string">&#x27;forever&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dictb)</span><br></pre></td></tr></table></figure></li><li>删除key-value对<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#字典元素的删除</span></span><br><span class="line">dictb = <span class="built_in">dict</span>(小学=<span class="number">7</span>,初中=<span class="number">13</span>,高中=<span class="number">16</span>,大学=<span class="number">19</span>)</span><br><span class="line"><span class="keyword">del</span> dictb[<span class="string">&#x27;高中&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(dictb)</span><br></pre></td></tr></table></figure></li><li><del>将指定的key赋值为None时不能删除key-value对</del> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#字典元素的删除</span></span><br><span class="line">dictb = <span class="built_in">dict</span>(小学=<span class="number">7</span>,初中=<span class="number">13</span>,高中=<span class="number">16</span>,大学=<span class="number">19</span>)</span><br><span class="line"><span class="keyword">del</span> dictb[<span class="string">&#x27;高中&#x27;</span>]</span><br><span class="line">dictb[<span class="string">&#x27;大学&#x27;</span>] = <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(dictb)</span><br><span class="line"><span class="keyword">del</span> dictb[<span class="string">&#x27;大学&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(dictb)</span><br><span class="line"><span class="comment">#我这里赋值为None后依然可以被删除，有点疑惑这是为什么，大佬可以评论告诉我，谢谢！</span></span><br></pre></td></tr></table></figure></li><li>使用in、not in判断dict是否包含指定的key <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用in 、not in判断元素是否再字典内</span></span><br><span class="line">dictb = <span class="built_in">dict</span>(小学=<span class="number">7</span>,初中=<span class="number">13</span>,高中=<span class="number">16</span>,大学=<span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;小学&#x27;</span> <span class="keyword">in</span> dictb)<span class="comment">#返回True 说明&#x27;小学&#x27;在dictb中</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;初中&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> dictb)<span class="comment">##返回False 说明&#x27;小学&#x27;在dictb中</span></span><br></pre></td></tr></table></figure><h1 id="理解dict和list的关系"><a href="#理解dict和list的关系" class="headerlink" title="理解dict和list的关系"></a>理解dict和list的关系</h1></li><li>字典相当于索引，是任意不可变类型的列表，而列表相当于key只能是整数的字典；如果程序中要使用字典的key都是整数类型，则可以考虑是不是要换成列表</li><li>列表的索引总是从0开始，也不需要连续。因此列表不允许对不存在的索引赋值；但字典则允许直接对不存在的key赋值，这样就会直接给字典新增了一对key-value值</li></ul><blockquote><p><font color=#CD8500 face ="微软雅黑" size=4 ><strong># 总结：<br>    字典(dict)和列表(list)都是可变的，都可以对内部元素进行增加、删除、修改的操作<br>    但是因为字典的key是不可变的，所以列表(list)不能直接赋值于key</strong><font></p></blockquote><h1 id="字典用法的进阶"><a href="#字典用法的进阶" class="headerlink" title="字典用法的进阶"></a>字典用法的进阶</h1><h2 id="字典的常用方法"><a href="#字典的常用方法" class="headerlink" title="字典的常用方法"></a>字典的常用方法</h2><ul><li>dir(dict) 查看字典所支持的方法</li><li><font color=red >clear() </font>用于清空字典的所有key-value对<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#clear()清空字典内所有key-value,被清空的字典就是一个空字典返回&#x27;&#123;&#125;&#x27;</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;语文&#x27;</span>:<span class="number">89</span>,<span class="string">&#x27;数学&#x27;</span>:<span class="number">78</span>,<span class="string">&#x27;英语&#x27;</span>:<span class="number">95</span>,<span class="string">&#x27;地理&#x27;</span>:<span class="number">78</span>&#125;</span><br><span class="line">scores.clear()</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br></pre></td></tr></table></figure></li><li><font color=red >get() </font>方法其实就是根据key来获取value<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#get()根据key来获取value值</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;语文&#x27;</span>:<span class="number">89</span>,<span class="string">&#x27;数学&#x27;</span>:<span class="number">78</span>,<span class="string">&#x27;英语&#x27;</span>:<span class="number">95</span>,<span class="string">&#x27;地理&#x27;</span>:<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;数学&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><font color=red >update()</font>方法可使一个字典所包含的key-value对来更新另一个已有的字典.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#使用update()方法，用一个新的字典去更新另一个已有的字典</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;语文&#x27;</span>:<span class="number">89</span>,<span class="string">&#x27;数学&#x27;</span>:<span class="number">78</span>,<span class="string">&#x27;英语&#x27;</span>:<span class="number">95</span>,<span class="string">&#x27;地理&#x27;</span>:<span class="number">78</span>&#125;</span><br><span class="line">scores_a = &#123;<span class="string">&#x27;语文&#x27;</span>:<span class="number">90</span>,<span class="string">&#x27;数学&#x27;</span>:<span class="number">98</span>,<span class="string">&#x27;生物&#x27;</span>:<span class="number">76</span>&#125;</span><br><span class="line">scores_b = [(<span class="string">&#x27;历史&#x27;</span>,<span class="number">98</span>),(<span class="string">&#x27;自然&#x27;</span>,<span class="number">75</span>),(<span class="string">&#x27;Python&#x27;</span>,<span class="number">100</span>)]</span><br><span class="line">scores_c = <span class="built_in">dict</span>(彭同学=<span class="number">88</span>,雷同学=<span class="number">79</span>,李同学=<span class="number">90</span>)   <span class="comment">#注意使用关键字定义字典时，括号内不允许有表达式(key不需要引号)</span></span><br><span class="line">scores.update(scores_a)</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="comment">#更新目标.update(使用对象)</span></span><br><span class="line">scores_a.update(scores_b)</span><br><span class="line"><span class="built_in">print</span>(scores_a)</span><br><span class="line"><span class="comment">#若字典使用序列作为参数，此时序列的每个元素必须包含两个子元素，第一个是key，第二个是value</span></span><br><span class="line">scores_temp = <span class="built_in">dict</span>(scores_b)    <span class="comment">#先将列表转为字典</span></span><br><span class="line">scores_temp.update(scores_c)    <span class="comment">#再使用scores_c,来更新这个转化好的字典</span></span><br><span class="line"><span class="built_in">print</span>(scores_temp)</span><br><span class="line"><span class="comment">#注意使用关键字定义字典时，括号内不允许有表达式(key不需要引号)</span></span><br></pre></td></tr></table></figure></li><li><font color=red >iteme()、keys()、value()</font>分别用于获取字典中所有的key-value、所有的key、所有的value<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用items()、keys()、values()分别遍历字典中的所有元素(每个元素包含一个key，一个value)、遍历字典中的所有key(只遍历key)、遍历所有value(只遍历value)</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;语文&#x27;</span>:<span class="number">89</span>,<span class="string">&#x27;数学&#x27;</span>:<span class="number">78</span>,<span class="string">&#x27;英语&#x27;</span>:<span class="number">95</span>,<span class="string">&#x27;地理&#x27;</span>:<span class="number">78</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> scores.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> scores.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> scores.items():<span class="comment">#liems这里面使用到了序列的解包</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li><li><font color=red>pop()</font> 方法用于<font color=red>获取、并删除</font>指定key对应的value<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用pop()方法获取并删除key对应的value(删除并返回key对应的value值)</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;语文&#x27;</span>:<span class="number">89</span>,<span class="string">&#x27;数学&#x27;</span>:<span class="number">78</span>,<span class="string">&#x27;英语&#x27;</span>:<span class="number">95</span>,<span class="string">&#x27;地理&#x27;</span>:<span class="number">78</span>&#125;</span><br><span class="line">return1 = scores.pop(<span class="string">&#x27;地理&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="built_in">print</span>(return1)</span><br></pre></td></tr></table></figure></li><li>popitem()方法用于随机地弹出字典中一个key-value对</li><li><font color= red >setdefault()</font>方法也用与根据key来获取对应value的值，并为不存在的key设置默认值<font color= red >(创建字典的地三种方法)</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用setdefault()方法获取对应key的value值,如果key不存在，则添加一个key到字典中并设置value为None</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;语文&#x27;</span>:<span class="number">89</span>,<span class="string">&#x27;数学&#x27;</span>:<span class="number">78</span>,<span class="string">&#x27;英语&#x27;</span>:<span class="number">95</span>,<span class="string">&#x27;地理&#x27;</span>:<span class="number">78</span>&#125;</span><br><span class="line">a = scores.setdefault(<span class="string">&#x27;数学&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">scores.setdefault(<span class="string">&#x27;生物&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br></pre></td></tr></table></figure></li><li><font color=red>fromkeys()</font> 方法可将序列转化为字典,可以给转化的字典设置一个固定的value值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用formkeys()转化序列为字典</span></span><br><span class="line">d = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;RNG&#x27;</span>,<span class="string">&#x27;IG&#x27;</span>,<span class="string">&#x27;BLG&#x27;</span>,<span class="string">&#x27;LNG&#x27;</span>],<span class="number">35</span>) <span class="comment">#dict.fromkeys(序列，value默认值) = newscores</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><h2 id="使用字典对字符串格式化"><a href="#使用字典对字符串格式化" class="headerlink" title="使用字典对字符串格式化"></a>使用字典对字符串格式化</h2></li><li>在字符串模板中按key指定变量，然后通过字典为字符串模板中的key设置值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#使用字典格式化字符串</span></span><br><span class="line">str1 =<span class="string">&quot;今年是%4.0f年&quot;</span><span class="string">&quot;我在学习%s&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1%(<span class="number">2019</span>,<span class="string">&#x27;Python&#x27;</span>))     <span class="comment">#普通的格式化字符串</span></span><br><span class="line">str2 = <span class="string">&quot;今年是%(nian)4.0f年&quot;</span><span class="string">&quot;我在学习%(name)s&quot;</span>  <span class="comment">#字典格式化字符串</span></span><br><span class="line"><span class="built_in">print</span>(str2 % &#123;<span class="string">&#x27;nian&#x27;</span>:<span class="number">2019</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Python&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul> <font color=gred size=5 face='楷体'>总结:两种字符格式化原理其时是一样的，不同的时第一种是根据字符的先后位置来填充字符串；而字典格式化字符串则是根据设置好的key来指定对应的value</font>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5创建基础UI</title>
      <link href="2020/02/20/%E7%AD%86%E8%A8%98/python/PyQt%E5%88%9B%E5%BB%BAUI/"/>
      <url>2020/02/20/%E7%AD%86%E8%A8%98/python/PyQt%E5%88%9B%E5%BB%BAUI/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3学习网站收藏"><a href="#Python3学习网站收藏" class="headerlink" title="Python3学习网站收藏"></a>Python3学习网站收藏</h1><p><a href="https://www.python.org/downloads/windows/">Python官网</a>下载对应系统的安装文件进行安装；<br><a href="https://docs.python.org/zh-cn/3/">Python文档</a>有各个版本的Python多种语言的技术文档说明；<br><a href="https://www.runoob.com/python/">Runoob编程中文文档</a><br><a href="http://code.py40.com/">PyQt5-Python学习笔记文档</a></p><h1 id="PyQt5安装"><a href="#PyQt5安装" class="headerlink" title="PyQt5安装"></a>PyQt5安装</h1><h2 id="windows10安装PyQt5-tool"><a href="#windows10安装PyQt5-tool" class="headerlink" title="windows10安装PyQt5-tool"></a>windows10安装PyQt5-tool</h2><p><a href="https://pypi.org/project/pyqt5-tools/">pyqt2-tool下载</a><br>使用CMD运行如下代码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pip</span> install pyqt<span class="number">5</span>-tools</span><br></pre></td></tr></table></figure><p>这里建议先安装pyqt5-tool再安装pyqt5，避免安装pyqt5时报错，若是仍然有报错可<a href="https://blog.csdn.net/SeekAndFindYou/article/details/81264684">参考</a></p><h2 id="windows10安装PyQt5"><a href="#windows10安装PyQt5" class="headerlink" title="windows10安装PyQt5"></a>windows10安装PyQt5</h2><p><a href="https://pypi.org/project/PyQt5/">pyqt5下载</a><br>使用CMD运行如下代码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pip</span> install pyqt<span class="number">5</span></span><br></pre></td></tr></table></figure><p>如是提示pip版本过低执行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure><p>升级pip版本后在执行上一条命令安装PyQt5</p><h1 id="PyCharm配置PyQt5"><a href="#PyCharm配置PyQt5" class="headerlink" title="PyCharm配置PyQt5"></a>PyCharm配置PyQt5</h1><h3 id="PyCharm安装"><a href="#PyCharm安装" class="headerlink" title="PyCharm安装"></a>PyCharm安装</h3><p><a href="https://www.jetbrains.com/pycharm/download/#section=windows">PyCharm</a>官网下载<br><a href="https://www.cnblogs.com/huke123/p/12110902.html">学习版设置</a></p><h3 id="PyCharm配置"><a href="#PyCharm配置" class="headerlink" title="PyCharm配置"></a>PyCharm配置</h3><p>Python文件代码模板</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">##!/usr/bin/python</span></span><br><span class="line"><span class="meta"># -*- coding: utf-8 _*_</span></span><br><span class="line"><span class="meta"># @Time     :$&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="meta"># @Author   :luomit</span></span><br><span class="line"><span class="meta"># @Email    :1107199736@qq.com</span></span><br><span class="line"><span class="meta"># @File     :$&#123;NAME&#125;.py</span></span><br><span class="line"><span class="meta"># @Project  :$&#123;PROJECT_NAME&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/stormdony/article/details/80400032">PyQt5其他配置参考</a></p><h1 id="PyQt5创建UI"><a href="#PyQt5创建UI" class="headerlink" title="PyQt5创建UI"></a>PyQt5创建UI</h1><h2 id="基础窗口-置顶"><a href="#基础窗口-置顶" class="headerlink" title="基础窗口 置顶"></a>基础窗口 置顶</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindows</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MainWindows, self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;主窗口&quot;</span>)  <span class="comment"># 设置窗口标题</span></span><br><span class="line">        self.resize(<span class="number">800</span>, <span class="number">600</span>)  <span class="comment"># 重设尺寸</span></span><br><span class="line"></span><br><span class="line">        self.move(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 移动窗口</span></span><br><span class="line">        <span class="comment"># self.setGeometry(0,0,800,600)     #相当于move + resize</span></span><br><span class="line"></span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&#x27;icon path&#x27;</span>))  <span class="comment"># 设置窗口的图标</span></span><br><span class="line">        self.setWindowFlag(Qt.WindowStaysOnTopHint, <span class="literal">True</span>)  <span class="comment"># 设置窗口标旗，置顶标旗</span></span><br><span class="line">        <span class="comment"># self.setStyleSheet(&#x27;background(100,200,200)&#x27;)      #通过样式的方法把窗口背景的颜色设置为(100，200，200)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    a = MainWindows()</span><br><span class="line">    a.show()  <span class="comment"># show是窗口的显示方法，hide时窗口的隐藏方法，close窗口的关闭方法</span></span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#引入必要的模块，窗口的基本控件位于QtWidgets模块中</span></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#每一个PyQt5程序必须创建一个应用程序对象。argv参数是一个列表，从命令行输入参数</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment">#QWidget部件时PyQt5所有用户界面的基类，它为构建窗口界面提供默认构造，默认构造没有父对象</span></span><br><span class="line">    w = QWidget()</span><br><span class="line">    <span class="comment">#重设窗口的大小</span></span><br><span class="line">    w.resize(<span class="number">300</span>,<span class="number">250</span>)</span><br><span class="line">    <span class="comment">#设置窗口的标头</span></span><br><span class="line">    w.setWindowTitle(<span class="string">&quot;luomit windows&quot;</span>)</span><br><span class="line">    <span class="comment">#设置窗口的位置</span></span><br><span class="line">    w.move(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">    <span class="comment">#show显示窗口</span></span><br><span class="line">    w.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用exit()方法确保应用程序干净的退出</span></span><br><span class="line">    <span class="comment">#exec_有下划线是因为这里执行的时一个Python的关键词，因此exec_替代</span></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><p><code>QPushButton Label</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buttom</span>(<span class="params">QPushButton</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Buttom, self).__init__()</span><br><span class="line">        self.setText(<span class="string">&quot;按钮&quot;</span>)</span><br><span class="line">        <span class="comment">#self.setIcon()</span></span><br><span class="line">        self.clicked.connect(self.print123)</span><br><span class="line">        self.clicked.connect(<span class="keyword">lambda</span>:<span class="built_in">print</span>(<span class="number">456</span>))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(self.text())</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print123</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Label</span>(<span class="params">QLabel</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.setText(<span class="string">&#x27;大标签&#x27;</span>)</span><br><span class="line">        self.setAlignment(Qt.AlignVCenter | Qt.AlignHCenter)    <span class="comment"># |按钮或运算</span></span><br><span class="line">        <span class="comment">#self.setPixmap(QPixmap(&#x27;map path&#x27;))                     #像素图</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#获取参数的方法</span></span><br><span class="line">        <span class="built_in">print</span>(self.text())</span><br><span class="line">        <span class="built_in">print</span>(self.alignment())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    a = Label()</span><br><span class="line">    a.show()</span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure><h3 id="窗口提示"><a href="#窗口提示" class="headerlink" title="窗口提示"></a>窗口提示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget,QToolTip,QPushButton,QApplication)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;sansSerif&quot;</span>,<span class="number">10</span>))</span><br><span class="line">        self.setToolTip(<span class="string">&quot;这是一个UI提示测试脚本&quot;</span>)</span><br><span class="line"></span><br><span class="line">        btn = QPushButton(<span class="string">&quot;Button&quot;</span>,self)</span><br><span class="line">        btn.setToolTip(<span class="string">&quot;这是一个按钮提示&quot;</span>)</span><br><span class="line"></span><br><span class="line">        btn.resize(btn.sizeHint())</span><br><span class="line">        btn.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;Tooltips&quot;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="消息提示框"><a href="#消息提示框" class="headerlink" title="消息提示框"></a>消息提示框</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QPushButton, QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        qbtn = QPushButton(<span class="string">&quot;Quit&quot;</span>, self)</span><br><span class="line">        qbtn.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        qbtn.resize(qbtn.sizeHint())</span><br><span class="line">        qbtn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;Quit button&quot;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="消息提示框-1"><a href="#消息提示框-1" class="headerlink" title="消息提示框"></a>消息提示框</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QMessageBox, QApplication</span><br><span class="line"><span class="comment">#QMessageBox</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Message box&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义关闭触发方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        reply = QMessageBox.question(self, <span class="string">&#x27;Message&#x27;</span>,<span class="string">&quot;Are you sure to quit?&quot;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="显示窗口到屏幕中心"><a href="#显示窗口到屏幕中心" class="headerlink" title="显示窗口到屏幕中心"></a>显示窗口到屏幕中心</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QDesktopWidget, QApplication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        </span><br><span class="line">        self.resize(<span class="number">250</span>,<span class="number">150</span>)</span><br><span class="line">        self.center()</span><br><span class="line">        </span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;Center&quot;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#控制窗口显示在屏幕中心的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#获得窗口</span></span><br><span class="line">        qr = self.frameGeometry()</span><br><span class="line">        <span class="comment">#获取屏幕中心点坐标</span></span><br><span class="line">        cp = QDesktopWidget().availableGeometry().center()</span><br><span class="line">        <span class="comment">#显示到屏幕中心</span></span><br><span class="line">        qr.moveCenter(cp)</span><br><span class="line"></span><br><span class="line">        self.move(qr.topLeft())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="PyQt的布局"><a href="#PyQt的布局" class="headerlink" title="PyQt的布局"></a>PyQt的布局</h1><p>程序指定每个控件的位置和大小(以像素为单位px)</p><h2 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h2><p>绝对布局有以下限制:</p><ul><li>调整窗口，控件元素的大小和位置不会改变</li><li>会因使用的场景影响其显示效果</li><li>如改变内部元素，应用程序的布局就会改变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QLabel, QApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        laba = QLabel(<span class="string">&#x27;好想出去玩啊&#x27;</span>,self)</span><br><span class="line">        laba.move(<span class="number">15</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        labb = QLabel(<span class="string">&#x27;肺炎啥时候走&#x27;</span>,self)</span><br><span class="line">        labb.move(<span class="number">35</span>,<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">        labc = QLabel(<span class="string">&#x27;我看不见病毒&#x27;</span>,self)</span><br><span class="line">        labc.move(<span class="number">55</span>,<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">250</span>,<span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;绝对布局案例&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="相对布局-框布局BoxLayout"><a href="#相对布局-框布局BoxLayout" class="headerlink" title="相对布局-框布局BoxLayout"></a>相对布局-框布局BoxLayout</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget,QPushButton,QHBoxLayout,QVBoxLayout,QApplication)</span><br><span class="line"><span class="comment">#导入PyQt的纵向布局方法和横向布局方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        okButton = QPushButton(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">        cancelButton = QPushButton(<span class="string">&#x27;Cancel&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#设置纵向布局方式然后添加一个纵向拉伸因子并创建两个Button</span></span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        hbox.addStretch(<span class="number">1</span>)</span><br><span class="line">        hbox.addWidget(okButton)</span><br><span class="line">        hbox.addWidget(cancelButton)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#设置横向布局，并设置横向拉伸因子来将按钮推向右侧</span></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addStretch(<span class="number">1</span>)</span><br><span class="line">        vbox.addLayout(hbox)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#最后将设置到全局窗口中   </span></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">250</span>,<span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;绝对布局案例&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="相对布局-表格布局QGridLayout"><a href="#相对布局-表格布局QGridLayout" class="headerlink" title="相对布局-表格布局QGridLayout"></a>相对布局-表格布局QGridLayout</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget,QPushButton,QGridLayout,QApplication)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        self.setLayout(grid)</span><br><span class="line">        <span class="comment">#实例化QGridLayout表格布局样式并设置到应用程序布局</span></span><br><span class="line">        </span><br><span class="line">        name = [<span class="string">&#x27;Cls&#x27;</span>,<span class="string">&#x27;Bck&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;Close&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;+&#x27;</span>]</span><br><span class="line">        <span class="comment">#创建按钮到一个字符串数组中</span></span><br><span class="line">        </span><br><span class="line">        positions = [(i,j)<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> position,name <span class="keyword">in</span> <span class="built_in">zip</span>(positions, name):</span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            button = QPushButton(name)</span><br><span class="line">            grid.addWidget(button,*position)</span><br><span class="line">        <span class="comment">#使用for in 将数组字符串解包依次对应到各自位置上</span></span><br><span class="line">            </span><br><span class="line">        self.move(<span class="number">300</span>,<span class="number">150</span>)    </span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Grid布局案例&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = Example()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="相对布局-跨行表格布局"><a href="#相对布局-跨行表格布局" class="headerlink" title="相对布局-跨行表格布局"></a>相对布局-跨行表格布局</h2><pre><code class="python">import sysfrom PyQt5.QtWidgets import (QWidget,QLabel,QLineEdit,QTextEdit,QGridLayout,QApplication)class Example(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        title = QLabel(&#39;Title&#39;)        author = QLabel(&#39;Author&#39;)        review = QLabel(&#39;Review&#39;)        titleEdit = QLineEdit()        authorEdit = QLineEdit()        reviewEdit = QLineEdit()        grid = QGridLayout()        grid.setSpacing(10)        grid.addWidget(title,1,0)        grid.addWidget(titleEdit,1,1)        grid.addWidget(author,2,0)        grid.addWidget(authorEdit,2,1)        grid.addWidget(review,3,0)        grid.addWidget(reviewEdit,3,1,5,1)        self.setLayout(grid)                    self.setGeometry(300,300,350,300)            self.setWindowTitle(&#39;跨行表格布局案例&#39;)        self.show()if __name__ == &#39;__main__&#39;:    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())    </code></pre>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础(02)</title>
      <link href="2020/02/20/%E7%AD%86%E8%A8%98/python/Python%E5%9F%BA%E7%A1%80(02)/"/>
      <url>2020/02/20/%E7%AD%86%E8%A8%98/python/Python%E5%9F%BA%E7%A1%80(02)/</url>
      
        <content type="html"><![CDATA[<h3 id="分支和循环"><a href="#分支和循环" class="headerlink" title="分支和循环"></a>分支和循环</h3><h4 id="if-else-的三种写法"><a href="#if-else-的三种写法" class="headerlink" title="if else 的三种写法"></a>if else 的三种写法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">source = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input number: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="number">100</span> &gt;= source &gt;= <span class="number">90</span>:</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">90</span> &gt; source &gt;= <span class="number">75</span>:</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">75</span> &gt; source &gt;= <span class="number">60</span>:</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">60</span> &gt; source &gt;= <span class="number">0</span>:</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;D&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">source = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input number: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="number">100</span> &gt;= source &gt;= <span class="number">90</span>:</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">90</span> &gt; source &gt;= <span class="number">75</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;B&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">75</span> &gt; source &gt;= <span class="number">60</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;C&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">60</span> &gt; source &gt;= <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;D&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;Error!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">source = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;input number: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="number">100</span> &gt;= source &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">90</span> &gt; source &gt;= <span class="number">75</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">75</span> &gt; source &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &gt; source &gt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;D&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Error!&quot;</span>)</span><br></pre></td></tr></table></figure><p>python对缩进的要求很严格，这是的python的代码更加的简洁和已读。</p><h4 id="断言-assert"><a href="#断言-assert" class="headerlink" title="断言(assert)"></a>断言(assert)</h4><p>assert称之为“断言”，assert后面的条件为假时，程序自动崩溃并抛出assertionError的异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">3</span> &gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>AssertionError      </p></blockquote><p>一般来说我们可以用Ta在程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作的话，asser关键字就非常有用了。</p><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 目标 <span class="keyword">in</span> 表达式:</span><br><span class="line">    循环列表</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">    <span class="built_in">print</span> (i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 循环python每个字符，每次打印循环的字符和一个空格</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">&quot;python&quot;</span>,<span class="string">&quot;bilibili&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">    <span class="built_in">print</span>(i, <span class="built_in">len</span>(i), <span class="built_in">type</span>(i))</span><br></pre></td></tr></table></figure><h4 id="range-范围"><a href="#range-范围" class="headerlink" title="range 范围"></a>range 范围</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">25</span>):</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br></pre></td></tr></table></figure><h4 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h4><p>break 终止当前循环<br>continue  终止本轮循环，开始下一轮循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">25</span>):</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br><span class="line">    <span class="keyword">continue</span>    <span class="comment">#终止本轮循环，开始新循环</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;i = &quot;</span>,i)</span><br></pre></td></tr></table></figure><p>break 通常使用在代码的末尾，或者满足特定条件时，用来结束程序的运行；<br>continue 通常用来检查代码判断，执行continue上面的循环，忽略continue下面的操作。</p><h3 id="数组-列表-list"><a href="#数组-列表-list" class="headerlink" title="数组(列表)list"></a>数组(列表)list</h3><p>将各种数据打包，放到一个组(列表)中；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mix = [<span class="number">1</span>, <span class="string">&quot;闪电&quot;</span>, <span class="number">2.55</span>, &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;]</span><br><span class="line"><span class="built_in">print</span> (mix[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 创建一个列表，并将第“1”个元素打印</span></span><br></pre></td></tr></table></figure><h4 id="添加元素的三种方法"><a href="#添加元素的三种方法" class="headerlink" title="添加元素的三种方法"></a>添加元素的三种方法</h4><p>xx.<code>append</code>(元素) append加入新的元素<br>xx.<code>extend</code>([“a”,”b”,”c”]) 将两个已有的数组组装在一起<br>xx.<code>insert</code>(5,”大保健”) 将新的元素插入到列表对象的第5个位置上   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mix = [<span class="number">1</span>, <span class="string">&quot;闪电&quot;</span>, <span class="number">2.55</span>, &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;]</span><br><span class="line"><span class="built_in">print</span> (mix)</span><br><span class="line">mix.append(<span class="string">&quot;C##&quot;</span>)   <span class="comment"># 加入元素(数据)到已有数组(列表)中</span></span><br><span class="line"><span class="built_in">print</span>(mix)</span><br><span class="line">mix.extend([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(mix)</span><br></pre></td></tr></table></figure><blockquote><p>[1, ‘闪电’, 2.55, {0, 1}]<br>[1, ‘闪电’, 2.55, {0, 1}, ‘C##’]<br>[1, ‘闪电’, 2.55, {0, 1}, ‘C##’, ‘a’, ‘b’, ‘c’]<br>[1, ‘闪电’, 2.55, {0, 1}, ‘C##’, ‘大保健’, ‘a’, ‘b’, ‘c’]    </p></blockquote><h4 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h4><p>xx[number] 获取第几个在中括号内填写位置序号</p><h4 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h4><p>xx.<code>remove[&#39;元素&#39;]</code> 使用remove删除数组元素，不需要元素在数组中的位置，只需要知道<em>数组中的具体元素</em>；<br><code>del</code> xx[number] 使用del删除数组元素，不需要知道具体元素，只需要知道<em>元素在数组中的位置</em>。<br>xx.<code>pop()</code> pop方法剔除数组最后一个元素并返回该元素，如果填上序号，则从剔除对应序号上的元素</p><h4 id="列表分片-分离列表或元素-Slice"><a href="#列表分片-分离列表或元素-Slice" class="headerlink" title="列表分片(分离列表或元素)Slice"></a>列表分片(分离列表或元素)Slice</h4><p>xx[1:3] 指定元素序号范围提取列表元素，不影响原列表<br>xx[:3] 分离从开始到第三个元素<br>xx[:] 复制拷贝一个与原数组一样的新数组<br><code>tips:     这里的拷贝，就是复制一份，新复制的和原来的就没有了关联； 如果是将列表赋值到一个新列表(镜像复制)，则当该列表发生改变，新列表也会发生改变           </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mix = [<span class="number">1</span>, <span class="string">&quot;闪电&quot;</span>, <span class="number">2.55</span>, &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;]    </span><br><span class="line">a = mix[:]    </span><br><span class="line">a.reverse()    </span><br><span class="line">b = mix  </span><br></pre></td></tr></table></figure><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><h5 id="in-或not-in"><a href="#in-或not-in" class="headerlink" title="in 或not in"></a>in 或not in</h5><p><code>in</code> 或者<code>not in</code>都可以用来判断元素是否在数组列表中，如果成立返回True    </p><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>xx<code>.count(元素)</code> 元素在列表中的数量(长度)</p><h5 id="index"><a href="#index" class="headerlink" title="index"></a>index</h5><p>xx<code>.index(元素)</code> 返回元素在列表中的位置  </p><h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h5><p>xx.<code>reverse()</code> 翻转元素在列表中的排序</p><h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><p>xx.<code>sort(reverse=False)</code> 让列表内所有元素按照从小到大进行排序<br>xx.<code>sort(reverse=True)</code> 从大到小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">199</span>,<span class="number">3</span>,<span class="number">145</span>,<span class="number">54</span>]</span><br><span class="line"><span class="built_in">str</span>.sort(); <span class="comment"># 什么都不写默认为升序，从小到大，结束要加分号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>sort方法使用对象的元素必须是同种类型</p><h5 id="dir-list"><a href="#dir-list" class="headerlink" title="dir(list)"></a>dir(list)</h5><p><code>dir(list)</code> 列出python中关于list(数组或者列表)的所有方法</p><h3 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h3><p>元组最大的特点就是不可改变<br>数组用中括号表示，元组使用小括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [a,b,c,d,e]  <span class="comment">#这是一个数组</span></span><br><span class="line">b = (a,b,c,d,e)  <span class="comment">#这是一个元组</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">1</span>,</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">type</span>(c))</span><br><span class="line">d = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">type</span>(d))</span><br></pre></td></tr></table></figure><h4 id="使用slice改变元组"><a href="#使用slice改变元组" class="headerlink" title="使用slice改变元组"></a>使用slice改变元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = (<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span> (e)</span><br><span class="line">e = e[<span class="number">0</span>:<span class="number">2</span>] +(<span class="string">&quot;牛逼&quot;</span>,) +e[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span> (e)</span><br></pre></td></tr></table></figure><p>元组的操作符基本上和列表相同</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">capitaliz()</td><td align="center">将整个字符串第一个字符改为大写</td></tr><tr><td align="center">casefold()</td><td align="center">将整个字符串所有字符改为小写</td></tr><tr><td align="center">center(width)</td><td align="center">将字符串居中，并使用空格填充至长度width的新字符串</td></tr><tr><td align="center">count(sub[,start,[end]])</td><td align="center">返回sub在字符串里出现的次数，start和end参数表示范围，可选</td></tr><tr><td align="center">encode(encoding=’utf-8’,error=’start’)</td><td align="center">以encoding指定的编码格式对字符串进行编码</td></tr><tr><td align="center">expandtabs([tabsize=8])</td><td align="center">把字符串中的tab符号(\t)转换为空格，如不指定参数，默认空格数是tabsize=8</td></tr><tr><td align="center">find(sub[,start[,end]])</td><td align="center">检测sub是否包含在字符串中，如果有则返回索引，否则返回-1，start和end参数表示范围，可选</td></tr><tr><td align="center">index(sub[,start[,end]])</td><td align="center">跟find方法一样，不过如果sub不在string中会产生一个异常</td></tr><tr><td align="center"><a href="https://fishc.com.cn/forum.php?mod=forumdisplay&fid=243&page=1&filter=typeid&typeid=403">鱼C论坛Python速查</a></td><td align="center"></td></tr></tbody></table><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p>xx.format() 位置参数格式化,关键字参数格式化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="string">&quot;&#123;0&#125; love &#123;1&#125; &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;I&quot;</span>,<span class="string">&quot;Houdini&quot;</span>,<span class="string">&quot;vfx&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br><span class="line"><span class="comment"># 位置参数格式化</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="string">&quot;&#123;a&#125; love &#123;b&#125; &#123;c&#125;&quot;</span>.<span class="built_in">format</span>(a=<span class="string">&quot;I&quot;</span>,b=<span class="string">&quot;Houdini&quot;</span>,c=<span class="string">&quot;vfx&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br><span class="line"><span class="comment"># 关键字参数格式化</span></span><br></pre></td></tr></table></figure><blockquote><p>两种格式化方法混用时，位置参数要在关键字前</p></blockquote><h4 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h4><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">%c</td><td align="center">格式化字符及其ASCII</td></tr><tr><td align="center">%s</td><td align="center">格式化字符串</td></tr><tr><td align="center">%d</td><td align="center">格式化整数</td></tr><tr><td align="center">%o</td><td align="center">格式化无符号八进制数</td></tr><tr><td align="center">%x</td><td align="center">格式化无符号十六进制数</td></tr><tr><td align="center">%X</td><td align="center">格式化无符号十六进制数(大写)</td></tr><tr><td align="center">%f</td><td align="center">格式化定点数，可指定小数点后的精度</td></tr><tr><td align="center">%e</td><td align="center">用科学计数法格式化定点数</td></tr><tr><td align="center">%E</td><td align="center">作用同%e</td></tr><tr><td align="center">%g</td><td align="center">根据值的大小决定使用%f或%e</td></tr><tr><td align="center">%G</td><td align="center">作用同%g</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><ul><li>列表、元组和字符串的共同点<ul><li>都可以通过索引得到每一个元素</li><li>默认索引值总是从0开始</li><li>可以通过分片的方式得到指定范围内的元素的集合</li><li>有着许多共同的操作符(重复操作符、拼接操作符、成员关系操作符)</li></ul></li></ul><p>list() 转换为列表<br>tuple() 转换为元组<br>str() 转换为字符串<br>len() 返回长度<br>max() 返回最大值(对象元素必须是同一类型)<br>min() 返回最小值(对象元素必须是同一类型)<br>sum() 返回总和(对象元素必须是数值类型)<br>reversed() 翻转<br>enumerate() 枚举，返回结果是由元素和元素序号组成的元组对象；使用list转化为数组如下代码所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">32</span>,<span class="number">44</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">51</span>,<span class="number">61</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>(<span class="built_in">enumerate</span>(numbers)</span><br></pre></td></tr></table></figure><p>zip 返回由各个序列元素组成的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">b = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(a,b)))</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><p>自定义<code>定义函数</code>的基本框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def 函数名():</span></span><br><span class="line"><span class="comment">#    程序代码块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyFunction</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;人生苦短，我爱python&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;世界之大，我要去摩旅&quot;</span>)</span><br></pre></td></tr></table></figure><p>调用函数<br>MyFunction()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyMult</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span>(a*b)</span><br><span class="line">MyMult(<span class="number">5</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><blockquote><p>return 用来返回代码块运行结果，与print不同return返回结果并不会打印出来;</p></blockquote><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><code>形参parameter和实参argument</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyFunction</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="string">&#x27;打印输入元素&#x27;</span> <span class="comment"># 使用‘’“”加说明为函数添加函数说明，使用help(函数)查看</span></span><br><span class="line">    <span class="comment">#函数定义过程中的name叫做行参，它只是一个形式，用来表示占据一个参数的位置</span></span><br><span class="line">    <span class="built_in">print</span> (name)</span><br><span class="line">MyFunction(<span class="string">&quot;呵呵&quot;</span>)</span><br><span class="line">    <span class="comment"># 这里的“呵呵”就是实参，它代表了具体参数</span></span><br></pre></td></tr></table></figure><p><code>关键字参数</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyFunction</span>(<span class="params">name,say</span>):</span></span><br><span class="line">    <span class="comment"># 在定义函数时，有时候会有多个参数的输入，可以在形参定义时命好各个参数的名字，然后传入实参时按照形参名获取参数</span></span><br><span class="line">    <span class="built_in">print</span> (name +<span class="string">&quot;:&quot;</span> + say)</span><br><span class="line">MyFunction(name=<span class="string">&quot;小明&quot;</span>,say=<span class="string">&quot;我是峡谷王者&quot;</span>)</span><br><span class="line">    <span class="comment"># 关键指定实参</span></span><br></pre></td></tr></table></figure><p><code>默认参数</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyFunction</span>(<span class="params">name=<span class="string">&quot;呵呵！&quot;</span></span>):</span></span><br><span class="line">    <span class="comment"># 在定义函数时，给形参一个默认参数，可以再调用函数时有一个初始的默认值</span></span><br><span class="line">    <span class="built_in">print</span> (name)</span><br><span class="line">MyFunction()</span><br></pre></td></tr></table></figure><blockquote><p>默认参数可以有效的避免用户在调用函数时，忘记输入参数所导致函数报错的问题</p></blockquote><p><code>收集参数</code><br>收集参数既是设置N个参数，形参可用(*name)表示，如果还有特定的参数，要使用关键字参数来设置，避免参数的混乱；还可使用默认参数来规避函数报错的风险；</p><h4 id="为函数提供文档"><a href="#为函数提供文档" class="headerlink" title="为函数提供文档"></a>为函数提供文档</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_print</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;打印输入的参数</span></span><br><span class="line"><span class="string">    函数的文档、帮助</span></span><br><span class="line"><span class="string">    使用 print(函数名，_doc_) 查看</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">input</span> = <span class="string">&quot;打印&quot;</span> + <span class="string">&quot;:&quot;</span> + <span class="built_in">input</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (my_print.__doc__) <span class="comment">#查看这个函数的文档</span></span><br></pre></td></tr></table></figure><h4 id="函数与过程"><a href="#函数与过程" class="headerlink" title="函数与过程"></a>函数与过程</h4><h4 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h4><p>根据定义变量的位置,变量的作用域有两种:<br>局部变量：在函数内定义的变量包括参数，都被称为局部变量;<br>全局比那辆：在函数外、全局范围内定义的变量，被称为全局变量;<br><code>locals()</code> 返回当前所在范围内的所有变量组成的”变量字典”<br><code>globals()</code> 该函数返回全局范围内搜索到的所有变量组成的”变量字典”<br><code>var(object)</code> 获取指定对象的范围内所变量组成的”变量字典”,如果不传入object参数,vars()和locals()的作用完全相同<br>全局变量默认可以在所有函数内访问,<br>如果在函数中定义与全局变量同名的变量,与此时就会发生局部变量遮蔽(hide)全局变量的情况     </p><h4 id="内嵌函数和闭包"><a href="#内嵌函数和闭包" class="headerlink" title="内嵌函数和闭包"></a>内嵌函数和闭包</h4><p>函数内部的变量不影响函数外面的变量，如果要使函数内定义的变量影响全局，使用global来定义这个函数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span>():</span> </span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数内的 a=&quot;</span>,a)</span><br><span class="line">myfun()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;函数外的 a=&quot;</span>,a)</span><br></pre></td></tr></table></figure><blockquote><p>如果不使用global定义a变量，外面的a变量就不会受到内部变量a的影响</p></blockquote><p><code>内嵌函数</code>(函数嵌套)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>(<span class="params">name=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(name + <span class="string">&quot;好饿啊！&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span>(<span class="params">name=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">        <span class="built_in">print</span> (name + <span class="string">&quot;好想吃手抓饼！&quot;</span>)</span><br><span class="line">    fun2(name)</span><br><span class="line">fun1(<span class="string">&quot;我&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>多个函数的相互嵌套，用户只能调用最外面一层函数，函数内部的函数只能在其内部调用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a *= <span class="number">10</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    fun2()</span><br><span class="line">fun1()</span><br></pre></td></tr></table></figure><blockquote><p>在多个函数嵌套定义时，有时候内部函数需要调用父集函数定义的变量，如果需要对这个变量进行改变时，函数就会报错；使用nolocal来强制这个变量为费局部变量可实现调用和修改该变量</p></blockquote><h4 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h4><p>Python写一些执行脚本时，使用lambda就可以剩下定义函数的过程，比如说我们只需要写个简单的脚本来管理服务器时间，我们就不需要专门定义一个函数然后再写调用，使用lambda就可以使得代码更加的精简。<br>对于一些比较抽象并且整个程序执行下来只需要调用一两次的函数，有时候给函数起个名字也是比较头疼的问题，使用lambda就不再需要考虑函数命名的问题。<br>简化代码的可读性，由于普通的屌丝函数阅读经常要跳到开头def定义部分,使用lambda函数可以省去这样的步骤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>(<span class="params">a=<span class="number">3</span>,b=<span class="number">2</span></span>):</span></span><br><span class="line">    c = a*b</span><br><span class="line">    <span class="built_in">print</span> (c)</span><br><span class="line">fun1()</span><br><span class="line"><span class="comment"># lambda 写法</span></span><br><span class="line">g = <span class="keyword">lambda</span> a=<span class="number">2</span>,b=<span class="number">3</span>: a*b</span><br><span class="line">g()</span><br></pre></td></tr></table></figure><h4 id="filter和"><a href="#filter和" class="headerlink" title="filter和"></a>filter和</h4><p>filter(条件,对象) filter方法用来过滤数据，可以根据条件过滤掉不想要的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp = [<span class="number">0</span>,<span class="number">2</span>,<span class="number">55</span>,<span class="number">123</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">55</span>,<span class="number">67</span>,<span class="number">558</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filt</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a%<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(filt,temp)))</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mdigui</span>(<span class="params">num</span>):</span></span><br><span class="line">    a = num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>，num)</span><br><span class="line">        a *= i</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">mdigui(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mdigui</span>(<span class="params">n=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span>  n * mdigui(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个正整数: &quot;</span>))</span><br><span class="line">digui = mdigui(number)</span><br><span class="line"><span class="built_in">print</span>(digui)</span><br></pre></td></tr></table></figure><p>递归的正确实现需要满足两个条件，一个是调用函数自身，一个是正确设置自身的返回值;</p><h4 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h4><h3 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h3><p>OS：opreate system<br>os模块是paython的标准库中的一个用于访问操作系统功能的模块；使用os提供的接口可以实现跨平台的访问；</p><p>os.sep 主要用于返回系统路径的分隔符(Windows系统是”\“，Linux类系统如Ubuntu的分隔符是”/“，而MacOS系统是”:”<br>os.name 返回当前工作的系统平台(如果是windows，返回”nt”，如果是linux返回”posix”)<br>os.getevn(name) 获取系统的环境变量,name为环境变量名，返回环境变量名为name的环境变量值；<br>os.getcwd() 返回当前运行脚本的工作路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getgwd()</span><br></pre></td></tr></table></figure><p>os.environ()  返回系统环境信息</p><h4 id="os与系统目录操作"><a href="#os与系统目录操作" class="headerlink" title="os与系统目录操作"></a>os与系统目录操作</h4><p>os.listdir(path)  返回指定路径下所有文件和文件夹的名字    </p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">os</span>.listdir(<span class="built_in">path</span>)    # 列出<span class="built_in">path</span>目录下所有的文件和文件夹列表</span><br></pre></td></tr></table></figure><p>os.mkdir(name)  创建一个目录，只创建一个空的目录</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.<span class="built_in">mkdir</span>(<span class="built_in">path</span>,chmod)    # <span class="built_in">path</span>为创建文件夹的完整路径地址 chmod可设置文件权限</span><br></pre></td></tr></table></figure><h5 id="linux下的文件权限"><a href="#linux下的文件权限" class="headerlink" title="linux下的文件权限"></a>linux下的文件权限</h5><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">0o</td><td align="center">7</td><td align="center">7</td><td align="center">7</td></tr><tr><td align="center">八进制</td><td align="center">所有者</td><td align="center">所属组</td><td align="center">其他人</td></tr><tr><td align="center">权限划分:</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><pre><code>可读  可写  可执行4     2     1</code></pre><p>os.rmdir(name)  删除一个空的目录，若目录中有文件则无法删除目录<br>os.makedirs(dirname)  创建多层递归目录，如果目录存在，则创建目录失败<br>os.removedirs(dirname)  删除多层递归空目录，如果目录中存在文件则无法删除<br>os.chdir()  改变当前目录到制定的目录中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(path) <span class="comment"># path为字符串文件目录地址</span></span><br></pre></td></tr></table></figure><p>os.rename()  重命名目录或文件名，如果重命名的文件名对象已存在，则重命名失败    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.removedirs(<span class="string">&#x27;Max-Man/vfx/clound/pyro/python/hda&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><p>os.path.exists(path)    判断文件或目录是否存在，存在返回True，否则返回False<br>os.path.isfile(path)    判断是否为文件，是文件返回True，否则返回False<br>os.path.isdir(path)     判断是否为目录，是目录返回True，否则返回False    </p><h4 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h4><p>os.path.join(path,name)  获得文件或文件名的绝对路径，path当前所在路径，name文件或目录的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="built_in">input</span>()</span><br><span class="line">os.chdir(path)  <span class="comment">#移动工作路径到制定路径下</span></span><br><span class="line">taget = <span class="string">&quot;houdini18.5&quot;</span></span><br><span class="line"><span class="comment">#print(os.getcwd())</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&quot;houdini18.5&quot;</span>):       <span class="comment">#判断是否存在</span></span><br><span class="line">    fullPath = os.path.join(path,taget) <span class="comment">#完整路径获取</span></span><br><span class="line">    <span class="built_in">print</span>(fullPath)</span><br><span class="line"><span class="comment"># 获取输入文件路径，将工作路径移动到获取的路径下，然后判断文件夹houdini18.5是否存在工作路径下，存在的话打印它的完整路径</span></span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><h4 id="了解类和对象"><a href="#了解类和对象" class="headerlink" title="了解类和对象"></a>了解类和对象</h4><p>两个重要的概念：类(class)和对象(object,也被称为实例，instance)<br>类是某一批对象的抽象，可以把类理解成为某种概念; 有着某种相同性质的对象;<br>对象，就是值某一个具体存在的事物。    </p><h4 id="怎么定义类"><a href="#怎么定义类" class="headerlink" title="怎么定义类"></a>怎么定义类</h4><p>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_name</span>:</span> <span class="comment">#class_name 为这个类的名字</span></span><br><span class="line">    <span class="comment"># 执行语句</span></span><br><span class="line">    <span class="comment"># 零个到多个变量</span></span><br><span class="line">    <span class="comment"># 零个到多个方法(函数)</span></span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>类和方法(函数)不同，类不需要调用，定义即存在<br>方法定义后需要用户再次调用，才会产生作用    </p><h4 id="类的作用"><a href="#类的作用" class="headerlink" title="类的作用"></a>类的作用</h4><h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><p>调用构造器创建对象<br>对象的作用：<br>    操作对象的实例变量(包括访问实例变量的值、添加实例变量、删除实例变量)<br>    操作对象的方法(包括调用方法、添加方法、删除方法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name=<span class="string">&quot;默认值&quot;</span>,size=<span class="number">8</span></span>):</span>   <span class="comment"># 创建一个构造器，设置变量默认值</span></span><br><span class="line">        self.name = name                      <span class="comment"># 创建构造器变量</span></span><br><span class="line">        self.size = size</span><br><span class="line"></span><br><span class="line">ite1 = Item()   <span class="comment"># 实例化Item类，方便下面对类内的变量进行操作</span></span><br><span class="line"><span class="built_in">print</span>(ite1.name)    <span class="comment"># 打印Item类下的name实例变量，对已经实例化的类可以直接访问其内部函数、方法和变量</span></span><br><span class="line">ite1.name=<span class="string">&quot;按钮&quot;</span></span><br><span class="line"><span class="built_in">print</span>(ite1.name)    <span class="comment"># 也可以对实例化对象内的变量进行重新赋值</span></span><br><span class="line"><span class="built_in">print</span>(ite1.size,ite1.name)  <span class="comment"># 访问多个值</span></span><br><span class="line">ite1.color = (<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>)  <span class="comment"># 为实例化对象添加一个新的实例化变量</span></span><br><span class="line"><span class="built_in">print</span>(ite1.color)   <span class="comment"># 打印新添加的实例变量</span></span><br><span class="line"><span class="keyword">del</span> ite1.color      <span class="comment"># 删除实例变量</span></span><br><span class="line"><span class="comment">#print(ite1.color)  删除之后再打印就会提示 Item没有color属性</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打印方法&quot;</span>)</span><br><span class="line">pr = Item() <span class="comment"># 先实例化</span></span><br><span class="line">pr.<span class="built_in">print</span>()  <span class="comment"># 实例化后就可以调用类里面定义的方法了</span></span><br></pre></td></tr></table></figure><p>python的方法和实例变量是统一的：它们都是对象的成员。<br>实例对象到底是方法还是实例变量，这取决你对它进行赋值时的是普通值还是函数值，是普通值则为变量，是函数则为方法    </p><h5 id="派生子类"><a href="#派生子类" class="headerlink" title="派生子类"></a>派生子类</h5><h4 id="实例方法与绑定"><a href="#实例方法与绑定" class="headerlink" title="实例方法与绑定"></a>实例方法与绑定</h4><p>使用对象调用实例方法时，pthon通常会自动绑定第一个参数(通常建议将其参数命名为self)<br>根据地一个参数出现的位置不同，第一个参数所绑定的对象略有区别<br>在构造方法中引用该构造方法正在初始化的对象。<br>在普通实例方法中引用调用该方法的对象。    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>使用对象调用实例方法时，self自动绑定<br>实例方法返回self时，实例方法可以连续调用<br>类调用实例方法时，self不会自动绑定，可以先实例化类，再将实例化对象传入到类调用实例方法的self中，以此来实现类调用方法;    </p><h4 id="类方法与静态方法"><a href="#类方法与静态方法" class="headerlink" title="类方法与静态方法"></a>类方法与静态方法</h4><p>類方法修飾符 <code>@classmethod</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span>:</span></span><br><span class="line">    <span class="comment"># 類方法的兩個特點：a.用@classmethod修飾 b.定義一個cls形參(cls是class的縮寫)</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;info 類方法&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line"><span class="built_in">print</span>(Tiger)</span><br><span class="line"><span class="comment"># 類方法屬於類本身，所以用類調用</span></span><br><span class="line"><span class="comment"># 類方法的第一個參數cls會自動綁定自身</span></span><br><span class="line">Tiger.info()</span><br><span class="line">t = Tiger()</span><br><span class="line"><span class="comment"># 實例化對象調用類方法</span></span><br><span class="line">t.info()</span><br></pre></td></tr></table></figure><p>靜態方法修飾符 <code>@staticmethod</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 靜態方法的特點： a.定義行慘不是必須的  b.定義的形參也不會自動綁定</span></span><br><span class="line">    <span class="comment"># 靜態方法相當與一個函數，類調用有參數的靜態方法必須傳入參數值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">st</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;info 靜態方法&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(st)</span><br><span class="line">Tiger.info(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"><span class="comment"># 類調用靜態方法時，如果方法有形參必須傳入參數</span></span><br><span class="line"><span class="comment"># 對象調用靜態方法時，以爲參數傳入是必須的，所以也不會自動綁定</span></span><br><span class="line">t = Tiger()</span><br><span class="line">t.info(t)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">/</th><th align="center">實例方法</th><th align="center">類方法(@classmethod)</th><th align="center">靜態方法(@staticmethod)</th></tr></thead><tbody><tr><td align="center">對象調用</td><td align="center">自動綁定</td><td align="center">自動綁定</td><td align="center">不自動綁定</td></tr><tr><td align="center">類調用</td><td align="center">不自動綁定</td><td align="center">自動綁定</td><td align="center">不自動綁定</td></tr></tbody></table><h4 id="函數裝飾器"><a href="#函數裝飾器" class="headerlink" title="函數裝飾器"></a>函數裝飾器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作爲函數裝飾器使用的函數，它必須定義一個形參</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;foo函數&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(fn)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;acfun&#x27;</span></span><br><span class="line"><span class="comment"># 使用函數來裝飾函數</span></span><br><span class="line"><span class="meta">@foo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函數&#x27;</span>)</span><br><span class="line"><span class="comment"># 此時函數fun已經使用foo函數來裝飾</span></span><br><span class="line"><span class="built_in">print</span>(fun)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">函數裝飾器的本質：</span></span><br><span class="line"><span class="string">    a.將裝飾的函數作爲參數傳入到裝飾函數內</span></span><br><span class="line"><span class="string">    b.被裝飾的函數將被裝飾器函數修飾，返回的值是裝飾器函數的返回值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="類變量與實例變量"><a href="#類變量與實例變量" class="headerlink" title="類變量與實例變量"></a>類變量與實例變量</h4><p>類變量:在類空間或通過類引用和賦值的變量<br>實例變量:通過對象引用或者self引用賦值的變量    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="comment"># 在类空间中定义或赋值的变量叫做类变量</span></span><br><span class="line">    ff = <span class="string">&quot;name&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 通过self引用或赋值的变量叫做实例变量</span></span><br><span class="line">        self.name = <span class="string">&quot;name&quot;</span></span><br><span class="line">        self.passwd = <span class="string">&quot;passwd&quot;</span></span><br><span class="line"><span class="comment"># 通过类引用或赋值的变量，属于类变量</span></span><br><span class="line">User.<span class="built_in">type</span> = <span class="string">&quot;other&quot;</span></span><br></pre></td></tr></table></figure><h5 id="合成屬性"><a href="#合成屬性" class="headerlink" title="合成屬性"></a>合成屬性</h5>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 30day </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="2020/02/09/%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2020/02/09/%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h3><p><code>windows</code><br>node.js链接 <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><blockquote><p>node.js安装会给系统安装一个npm的包管理器，这是hexo搭建博客所需要的；<br><code>linux</code><br>下载源码包，然后解压到任意文件夹<br><img url="https://imgchr.com/i/JWsCH1"><br><img src="https://s1.ax1x.com/2020/04/27/JWsCH1.png" alt="avatar"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo cp node-v12.16.2-linux-x64 /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/node-v12.16.2-linux-x64/bin/</span><br><span class="line">sudo ln -s node /usr/bin/node</span><br><span class="line">sudo ln -s npm /usr/bin/npm</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>执行上面的代码进行软连接<br>打开终端获取管理员权限<br>windows使用管理员身份运行命令提示符窗口<br>liunx or mac则使用sudo su获得管理员权限<br>查看node版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>查看npm版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>git <a href="https://git-scm.com/">https://git-scm.com/</a></p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><ul><li>使用npm安装cnpm来提高构建博客框架时下载文件的速度的<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="regexp">//</span>registry.npm.taobao.org</span><br></pre></td></tr></table></figure><code>linux</code><br>在linux执行完上一步骤后可能使用cnpm会返回<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Command <span class="string">&#x27;cnpm&#x27;</span> not found, did you mean:</span><br><span class="line">  <span class="built_in">command</span> <span class="string">&#x27;npm&#x27;</span> from deb npm (6.14.4+ds-1ubuntu2)</span><br><span class="line">  <span class="built_in">command</span> <span class="string">&#x27;cypm&#x27;</span> from deb pakcs (2.2.0-1)</span><br><span class="line">  <span class="built_in">command</span> <span class="string">&#x27;cpm&#x27;</span> from deb cpm (0.32-1.2build2)</span><br><span class="line">  <span class="built_in">command</span> <span class="string">&#x27;cxpm&#x27;</span> from deb xpmutils (1:3.5.12-1)</span><br><span class="line"></span><br><span class="line">Try: sudo apt install &lt;deb name&gt;</span><br></pre></td></tr></table></figure>是因为这样安装他的软链接不会指向/usr/bin/目录，你需要返回查看cnpm安装时返回的代码如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/node-v12.16.2-linux-x64/bin/cnpm -&gt; /opt/node-v12.16.2-linux-x64/lib/node_modules/cnpm/bin/cnpm</span><br><span class="line">+ cnpm@6.1.1</span><br><span class="line">added 685 packages from 953 contributors <span class="keyword">in</span> 14.043s</span><br></pre></td></tr></table></figure>然后手动创建软连接,之后再执行cnpm就可以使用了<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /opt/node-v12.16.2-linux-x64/bin/cnpm /usr/bin/cnpm</span><br></pre></td></tr></table></figure></li><li><strong>使用cnpm安装hexo</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo</span><br></pre></td></tr></table></figure>按照上面的方法手动创建软连接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /opt/node-v12.16.2-linux-x64/bin/hexo /usr/bin/hexo</span><br></pre></td></tr></table></figure><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2></li><li>pwd 返回当前终端所在系统位置</li><li>mkdir ‘文件夹名’ 创建一个博客文件目录，后续的配置都在这个目录内进行</li><li>hexo init 初始化博客框架<br>初始化报错<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br><span class="line"><span class="comment">#total 261</span></span><br><span class="line"><span class="comment">#-rw-r--r-- 1 Administrator 197121   2465  2月 10 01:49 _config.yml</span></span><br><span class="line"><span class="comment">#-rw-r--r-- 1 Administrator 197121  71577  2月 10 01:49 db.json</span></span><br><span class="line"><span class="comment">#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:13 node_modules/</span></span><br><span class="line"><span class="comment">#-rw-r--r-- 1 Administrator 197121    581  2月 10 01:35 package.json</span></span><br><span class="line"><span class="comment">#-rw-r--r-- 1 Administrator 197121 133002  2月 10 01:13 package-lock.json</span></span><br><span class="line"><span class="comment">#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:49 public/</span></span><br><span class="line"><span class="comment">#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:02 scaffolds/</span></span><br><span class="line"><span class="comment">#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:02 source/</span></span><br><span class="line"><span class="comment">#drwxr-xr-x 1 Administrator 197121      0  2月 10 01:46 themes/</span></span><br><span class="line"><span class="comment">## 可以列出当前目录下的hexo创建的所有文件windows使用dir来查看</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo start</span><br><span class="line"><span class="comment">#INFO  Start processing</span></span><br><span class="line"><span class="comment">#INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span></span><br><span class="line"><span class="comment">## 本地运行博客网页可使用hexo s</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;博客文章名&quot;</span></span><br><span class="line"><span class="comment">#INFO Created:&quot;文章路径&quot; </span></span><br><span class="line"><span class="comment">## 创建一篇新的博客文章</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line"><span class="comment">## 删除静态博客</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate </span><br><span class="line"><span class="comment">## 生成静态博客 hexo g</span></span><br></pre></td></tr></table></figure><h2 id="部署GitHub-and-Coding"><a href="#部署GitHub-and-Coding" class="headerlink" title="部署GitHub and Coding"></a>部署GitHub and Coding</h2><h3 id="仓库的创建与本地文件配置"><a href="#仓库的创建与本地文件配置" class="headerlink" title="仓库的创建与本地文件配置"></a>仓库的创建与本地文件配置</h3>在GitHub创建一个名字格式为 “用户名”+ .github.io 的仓库<br>在Coding创建一个名字格式为 “用户名”+ .coding.me 的仓库<br>然后复制仓库路径添加到博客目录下_config.yml内，如下所示<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&#x27;仓库地址&#x27;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&#x27;分支&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@e.coding.net:luomit/luomit.coding.me.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="comment">## 这里可以配置多个仓库的路径一键部署到多个仓库下</span></span><br></pre></td></tr></table></figure><h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3>在博客根目录下使用以下命令安装git<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install <span class="comment">--save hexo-deployer-git</span></span><br></pre></td></tr></table></figure><h3 id="git-用户配置"><a href="#git-用户配置" class="headerlink" title="git 用户配置"></a>git 用户配置</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;用户名&quot;</span></span><br><span class="line"># git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="string">&quot;邮箱&quot;</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> luomit</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="number">1107199736</span>@qq<span class="variable">.com</span></span><br><span class="line">## 注意，如果需要在部署时同时部署到不同的站点，则这些站点的用户名和注册邮箱需要一致</span><br></pre></td></tr></table></figure><h3 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h3></li><li>检查ssh密钥是否存在<br>cd 到系统根目录，使用ls -l 列出所有文件，如果有.ssh文件夹存在，则打开.pud结尾的文件将密钥复制到远端站点的用户设置内<img src="/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20200210025046915.png"></li><li>生成SSH密钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="comment">## 使用以上代码会生成一个.ssh的文件夹在系统根目录内，.ssh文件夹内就有id_rsa和id_rsa.pub两个文件，分别表示生成的私钥和公钥</span></span><br><span class="line"><span class="comment">## 公钥一定要妥善保管，切勿泄露他人，以免心怀不轨的人偷走你的&#x27;小姐姐&#x27;or&#x27;小哥哥&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="部署到远端仓库"><a href="#部署到远端仓库" class="headerlink" title="部署到远端仓库"></a>部署到远端仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean </span><br><span class="line"><span class="comment">## 删除静态博客</span></span><br><span class="line">$ hexo generate </span><br><span class="line"><span class="comment">## 生成静态博客</span></span><br><span class="line">$ hexo deploy</span><br><span class="line"><span class="comment">## 部署</span></span><br><span class="line">$ hexo backup</span><br><span class="line"><span class="comment">## 备份</span></span><br><span class="line">$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo backup &amp;&amp; hexo deploy</span><br><span class="line"><span class="comment">## 也可以一次执行全部命令</span></span><br></pre></td></tr></table></figure><h2 id="主题替换"><a href="#主题替换" class="headerlink" title="主题替换"></a>主题替换</h2><a href="https://hexo.io/themes/">Hexo</a>主题官网<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/JoeyBling/</span>hexo-theme-yilia-plus.git <span class="regexp">/themes/yi</span>lia</span><br><span class="line"><span class="comment">## git clone &quot;主题仓库路径&quot; &quot;目标路径&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Sakura主题修改"><a href="#Sakura主题修改" class="headerlink" title="Sakura主题修改"></a>Sakura主题修改</h2><h2 id="Hexo-插件"><a href="#Hexo-插件" class="headerlink" title="Hexo 插件"></a>Hexo 插件</h2><h3 id="Hexo-tag-gdemo"><a href="#Hexo-tag-gdemo" class="headerlink" title="Hexo-tag-gdemo"></a>Hexo-tag-gdemo</h3>用于展示代码在终端输入的过程，<a href="https://heowc.dev/2018/11/14/introduction-hexo-tag-gdemo/">详情</a><br>基本样式：<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;% gdemo_terminal <span class="string">&#x27;node ./demo&#x27;</span> <span class="string">&#x27;250px&#x27;</span> <span class="string">&#x27;bash&#x27;</span> <span class="string">&#x27;500&#x27;</span> <span class="string">&#x27;$&#x27;</span> <span class="string">&#x27;demo-teriminal&#x27;</span> %&#125;</span><br><span class="line">Hello World!</span><br><span class="line">&#123;% endgdemo_terminal %&#125;</span><br></pre></td></tr></table></figure><h3 id="Fancybox-主题集成"><a href="#Fancybox-主题集成" class="headerlink" title="Fancybox(主题集成)"></a>Fancybox(主题集成)</h3>点击图片预览时可以缩放等，<a href="http://fancyapps.com/fancybox/3/docs/">详情</a><br>基本样式：(在博客中插入)<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#第一种</span></span><br><span class="line">&#123;% fb<span class="emphasis">_img src [caption] %&#125;</span></span><br><span class="line"><span class="emphasis">#第二种</span></span><br><span class="line"><span class="emphasis"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">data-fancybox</span>=<span class="string">&quot;images&quot;</span> <span class="attr">data-caption</span>=<span class="string">&quot;My caption&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;thumbnail.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="emphasis"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">#更多部分多方法，详情跳转</span></span><br></pre></td></tr></table></figure><h3 id="hexo-tag-bili-主题集成"><a href="#hexo-tag-bili-主题集成" class="headerlink" title="hexo-tag-bili(主题集成)"></a>hexo-tag-bili(主题集成)</h3>用来在文章或单页面中插入B站外链视频，<a href="https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md">详情</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bili video_id [page] %&#125;</span><br></pre></td></tr></table></figure><h3 id="Bilibili追番"><a href="#Bilibili追番" class="headerlink" title="Bilibili追番"></a>Bilibili追番</h3><a href="https://www.npmjs.com/package/hexo-bilibili-bangumi">npm</a>安装配置说明说明<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hexo bangumi -u     <span class="comment">#更新追番数据</span></span><br><span class="line">&gt;&gt;&gt; hexo bangumi -d     <span class="comment">#删除追番数据</span></span><br></pre></td></tr></table></figure><h3 id="豆瓣书单"><a href="#豆瓣书单" class="headerlink" title="豆瓣书单"></a>豆瓣书单</h3><a href="https://github.com/mythsman/hexo-douban">Github</a>安装配置说明地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hexo douban -bgm</span><br></pre></td></tr></table></figure><h3 id="图标设置插件"><a href="#图标设置插件" class="headerlink" title="图标设置插件"></a>图标设置插件</h3><a href="http://fontawesome.dashgame.com/">fontawesome</a><h3 id="Hexo文章隐藏插件"><a href="#Hexo文章隐藏插件" class="headerlink" title="Hexo文章隐藏插件"></a>Hexo文章隐藏插件</h3>[参考][7]<h2 id="windows下端口占用问题"><a href="#windows下端口占用问题" class="headerlink" title="windows下端口占用问题"></a>windows下端口占用问题</h2>在windows下时常会遇到端口占用而导致hexo不能在本地运行博客预览，如当4000端口占用可使用”netstat -ano | findstr 4000”，查看当前占用4000端口的pid然后使用”tasklist | findstr pid”查询当前占用该端口的程序，使用”taskkill -PID 10388 -F”来杀死该程序，如下所示<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;netstat -ano | findstr 4000</span><br><span class="line">  TCP    0.0.0.0:4000           0.0.0.0:0              LISTENING       10388</span><br><span class="line">  TCP    [::]:4000              [::]:0                 LISTENING       10388</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;tasklist | findstr 10388</span><br><span class="line">node.exe                     10388 Console                    1     62,568 K</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;taskkill -PID 10388 -F</span><br><span class="line">成功: 已终止 PID 为 10388 的进程。</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;</span><br></pre></td></tr></table></figure><h2 id="git-常见问题与解决方法"><a href="#git-常见问题与解决方法" class="headerlink" title="git 常见问题与解决方法"></a>git 常见问题与解决方法</h2>问题：本地仓库与远程仓库不同步导致报错<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">To github.com:luomit/luomit.github.io.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;git@github.com:luomit/luomit.github.io.git&#x27;</span></span><br><span class="line">```</span><br><span class="line">解决方案：</span><br><span class="line">```bush</span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure></li></ul><p>主题<a href="/theme-sakura/">帮助文档</a>挺详细</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hugo博客搭建</title>
      <link href="2020/02/09/%E5%8D%9A%E5%AE%A2/Hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2020/02/09/%E5%8D%9A%E5%AE%A2/Hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h4 id="Hugo的安装"><a href="#Hugo的安装" class="headerlink" title="Hugo的安装"></a>Hugo的安装</h4><p>Hugo<a href="https://www.gohugo.org/">帮助文档</a><br>Hugo<a href="https://github.com/gohugoio/hugo/releases">下载链接</a><br>Go<a href="https://dl.google.com/go/go1.13.8.windows-386.zip">下载链接</a><br>Mercurial<a href="https://www.mercurial-scm.org/">下载链接</a></p><p>检查hugo版本</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo <span class="built_in">version</span></span><br></pre></td></tr></table></figure><h4 id="站点的创建"><a href="#站点的创建" class="headerlink" title="站点的创建"></a>站点的创建</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hugo <span class="keyword">new</span> site wiki   <span class="meta">#创建一个文件夹名字为wiki的站点</span></span><br><span class="line">cd wiki </span><br><span class="line">git <span class="keyword">init</span>    <span class="meta">#初始化站点</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/forestryio/hugo-theme-novela.git themes/novela    </span><br><span class="line"><span class="comment">#下载novela主题到/themes/novela文件夹下</span></span><br></pre></td></tr></table></figure><h4 id="本地运行博客"><a href="#本地运行博客" class="headerlink" title="本地运行博客"></a>本地运行博客</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hugo server -t nederburg --buildDrafts</span><br><span class="line"><span class="comment"># hugo server -t &quot;主题名&quot; --buildDrafts</span></span><br></pre></td></tr></table></figure><h4 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hugo new post/Hogo博客搭建.md</span><br><span class="line"><span class="comment">#hugo new post /&quot;博客名.md&quot;</span></span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h4 id="生成public仓库"><a href="#生成public仓库" class="headerlink" title="生成public仓库"></a>生成public仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo --theme=novela -- baseUrl=<span class="string">&quot;https://luomit.github.io&quot;</span> --buildDrafts</span><br></pre></td></tr></table></figure><h4 id="提交部署"><a href="#提交部署" class="headerlink" title="提交部署"></a>提交部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git init </span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;第一次提交&quot;</span></span><br><span class="line">git remote add origin https://github.com/luomit/luomit.github.io.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>未完待续…..</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Website favorites</title>
      <link href="2019/10/23/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/Website%20favorites/"/>
      <url>2019/10/23/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/Website%20favorites/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><a href="http://forums.cgsociety.org/">CGTalk</a><code>外网CG交流论坛</code></li><li><a href="https://www.artstation.com/">Artstation客栈</a><code>艺术家栖息地</code></li><li><a href="http://threedscans.com/">扫描模型下载</a><code>高精度扫描模型免费下载</code></li><li><a href="https://cgmeetup.com/">cgmeetup</a><code>国外CG艺术社区</code></li></ul><hr><ul><li><a href="https://500px.me/luomit">500px视觉中国</a><code>摄影作品分享社区</code></li><li><a href="https://www.pexels.com/search/">pexels外网高清图片</a><code>需要黑魔法</code></li><li><a href="https://pixabay.com/">pixabay</a><code>需要黑魔法</code></li><li><a href="https://www.textures.com/">textures每日免费限制</a><code>每天十张免费高清贴图，需要黑魔法</code></li><li><a href="https://www.pixiv.net/">Pixiv二次元站</a><code>优秀二次元绘画鉴赏</code></li></ul><hr><ul><li><a href="https://www.aboutcg.org/home">AboutCG</a><code>国内最正规最权威的CG教育社区</code></li><li><a href="https://www.vfxforce.cn/">vfxforce</a><code>国外优质CG特效资讯与教程分享</code></li><li><a href="https://cg.vfxer.me/">VFXinfo</a><code>丰富的CG导航网站</code></li><li><a href="https://www.newvfx.com/">Newvfx</a><code>CG交流、文档查阅</code></li><li><a href="http://www.tokeru.com/cgwiki/index.php?title=Houdini">HoudiniWiKi</a><code>经典教程，全是干货</code></li></ul><hr><ul><li><a href="http://www.lilsubs.com/">YouTube视频下载</a><code>复制视频连接粘贴，然后在刷新的页面选中要下载的分辨率，然后右键另存视频即可。</code></li><li><a href="https://www.clipconverter.cc/">YouTube字幕下载</a><code>粘贴视频连接，生成并下载字幕文件</code></li><li><a href="http://pianyuan.la/">Film resource network</a><code>高清电影资源下载</code></li><li><a href="https://www.zybuluo.com/mdeditor">Markdown</a><code>博客书写编辑器</code></li><li><a href="https://donghua.agefans.com/">Age动漫资源</a><code>最新动漫资源下载</code></li><li><a href="https://www.zhaicy.com/">宅次元站</a><code>你要的这里全有</code></li></ul><hr><ul><li><a href="https://blog.csdn.net/luomit">CSDN</a><code>我的csdn地址</code></li><li><a href="https://mp.csdn.net/mdeditor?not_checkout=1#">CSDN编辑器</a><code>CSDN博客书写超级好用</code></li></ul><hr><ul><li><a href="https://everypixel.com/">Everypixel</a></li><li><a href="https://freephotos.cc/">Freephotos</a></li><li><a href="http://librestock.com/">librestock</a></li><li><a href="https://www.sitebuilderreport.com/stock-up">Stock Up</a></li><li><a href="http://finda.photo/">Findaphoto</a></li><li><a href="https://www.stockio.com/">Stockio</a></li><li><a href="https://wallpaperhub.app/">wallpaperhub</a><code>高清大气简约的免费壁纸</code></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> links </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用VEX</title>
      <link href="2019/10/23/%E7%AD%86%E8%A8%98/houdini/%E5%B8%B8%E7%94%A8VEX/"/>
      <url>2019/10/23/%E7%AD%86%E8%A8%98/houdini/%E5%B8%B8%E7%94%A8VEX/</url>
      
        <content type="html"><![CDATA[<h1 id="findattribval-找同类"><a href="#findattribval-找同类" class="headerlink" title="findattribval 找同类"></a>findattribval 找同类</h1><p><a href="http://127.0.0.1:48626/vex/functions/findattribval">findattribval</a><br>用来查找指定层级(vertices、point、prim)上属性是否相同，相同则返回0，否则返回-1；然后再调取相同时的对象的某些属性来进行其他的操作。<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> result = findattribval(<span class="number">1</span>,<span class="string">&quot;point&quot;</span>,<span class="string">&quot;name&quot;</span>,s@name,<span class="number">0</span>);</span><br><span class="line">v@v = point(<span class="number">1</span>,<span class="string">&quot;v&quot;</span>,result);</span><br></pre></td></tr></table></figure><blockquote><p>如在刚体中查找对比0和1两个输入端刚体的那么属性，如果左右相同，则将1号对象上相同name的元素的某个属性赋予到0号对象对应元素上；</p></blockquote><h1 id="addvariablename-自定义全局变量"><a href="#addvariablename-自定义全局变量" class="headerlink" title="addvariablename 自定义全局变量"></a>addvariablename 自定义全局变量</h1><p><a href="http://127.0.0.1:48626/vex/functions/addvariablename">addvariablename</a><br>在属性调用过程中，有时候使用全局变量的方式会非常的方便；这时候我们可以使用这个方法将自定义属性定义为一个houdini的全局变量来调用；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> a = @numpt%<span class="number">2</span>；</span><br><span class="line">f@b = a；</span><br><span class="line">addvariablename(<span class="number">0</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;B&quot;</span>)；</span><br></pre></td></tr></table></figure><blockquote><p>addvariablename(数据端口，属性，全局变量名)；</p></blockquote><p>未完…</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PFTrack学习笔记</title>
      <link href="2019/10/10/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/PFTrack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2019/10/10/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BA%8C/PFTrack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="物体跟踪案例-汽车"><a href="#物体跟踪案例-汽车" class="headerlink" title="物体跟踪案例-汽车"></a>物体跟踪案例-汽车</h1><ul><li>快捷键<br>左键 编辑</li></ul><p>中键拖拽 缩放视图</p><p>右键拖拽 平移视图</p><h2 id="设置透视与地平线"><a href="#设置透视与地平线" class="headerlink" title="设置透视与地平线"></a>设置透视与地平线</h2><ul><li>节点网络<br><img src="https://img-blog.csdnimg.cn/2019100915380033.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>在进行相机跟踪之前首先要进行素材帧率的匹配、相机焦距的确定、相机高度的调整等；<br>创建Estimate Focal节点然后手动匹配XYZ三个轴来获取当前场景的大概焦距参数；(如下图)<br><img src="https://img-blog.csdnimg.cn/20191009152938254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>相机高度则通过拍摄经验判断，然后填写到EditCamera参数的Y Translate内<br><img src="https://img-blog.csdnimg.cn/20191009153519854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="跟踪汽车"><a href="#跟踪汽车" class="headerlink" title="跟踪汽车"></a>跟踪汽车</h2><p>在UserTrack下添加一个AutoTrack来增加跟踪点，因为这里需要跟踪的是汽车，所以可以绘制一个Mask如下；</p><p><img src="https://img-blog.csdnimg.cn/20191009161305711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>绘制完成默认紫色的部分为遮挡部分，点击Invert来翻转遮罩，这样就只跟踪汽车了；<strong>绘制mask完成后需要跟踪一遍mask</strong>；<br>完成mask的跟踪后返回autoTrack节点参数面板(再次点击上图左边Mask大按钮即可返回上一层级)，调整自动跟踪参数，最后执行Ayto-Track；</p><p><img src="https://img-blog.csdnimg.cn/20191009161911215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="跟踪修复"><a href="#跟踪修复" class="headerlink" title="跟踪修复"></a>跟踪修复</h2><p><img src="https://img-blog.csdnimg.cn/20191010040505783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pftrack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装配置Pycharm</title>
      <link href="2019/10/01/%E7%AD%86%E8%A8%98/linux/Ubuntu%E9%85%8D%E7%BD%AEPycharm/"/>
      <url>2019/10/01/%E7%AD%86%E8%A8%98/linux/Ubuntu%E9%85%8D%E7%BD%AEPycharm/</url>
      
        <content type="html"><![CDATA[<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>下载<a href="http://www.jetbrains.com/pycharm/download/#section=linux">PyCharm</a></p><p><img src="https://img2018.cnblogs.com/blog/1749258/201909/1749258-20190929011801613-777117996.png"></p><p>Ubuntu可以直接在终端执行以下代码进行安装：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install [pycharm-professional <span class="string">| pycharm-community] --classic</span></span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1749258/201909/1749258-20190929011831142-373801934.png"></p><p>如果使用代码安装失败，可以使用上面的链接下载对应的PyCharm版本，如”pycharm-professional-2019.2.3.tar.gz”;<br>然后将”pycharm-professional-2019.2.3.tar.gz”解压到 /opt 路径下 </p><p><img src="https://img2018.cnblogs.com/blog/1749258/201909/1749258-20190929011918299-518563904.png"></p><p>然后打开终端</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/opt/pycharm-2019.2.3/bin</span></span><br><span class="line"><span class="string">./pycharm.sh</span></span><br></pre></td></tr></table></figure><h1 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h1><p>然后就是一顿设置，最后输入激活码时，将下面的<a href="https://blog.csdn.net/qq_42914528/article/details/90511045">激活码</a>复制进去就可以了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">MTW881U3Z5</span>-eyJsaWNlbnNlSWQiOiJNVFc<span class="number">4</span>ODFVM<span class="number">1</span>o<span class="number">1</span>IiwibGljZW<span class="number">5</span>zZWVOYW<span class="number">1</span>lIjoiTnNzIEltIiwiYXNzaWduZWVOYW<span class="number">1</span>lIjoiIiwiYXNzaWduZWVFbWFpbCI<span class="number">6</span>IiIsImxpY<span class="number">2</span>Vuc<span class="number">2</span>VSZXN<span class="number">0</span>cmljdGlvbiI<span class="number">6</span>IkZvciBlZHVjYXRpb<span class="number">25</span>hbCB<span class="number">1</span>c<span class="number">2</span>Ugb<span class="number">25</span>seSIsImNoZWNrQ<span class="number">29</span>uY<span class="number">3</span>VycmVudFVzZSI<span class="number">6</span>ZmFsc<span class="number">2</span>UsInByb<span class="number">2</span>R<span class="number">1</span>Y<span class="number">3</span>RzIjpbeyJjb<span class="number">2</span>RlIjoiSUkiLCJwYWlkVXBUbyI<span class="number">6</span>IjIwMTktMTEtMDYifSx<span class="number">7</span>ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxOS<span class="number">0</span>xMS<span class="number">0</span>wNiJ<span class="number">9</span>LHsiY<span class="number">29</span>kZSI<span class="number">6</span>IkRQTiIsInBhaWRVcFRvIjoiMjAxOS<span class="number">0</span>xMS<span class="number">0</span>wNiJ<span class="number">9</span>LHsiY<span class="number">29</span>kZSI<span class="number">6</span>IlBTIiwicGFpZFVwVG<span class="number">8</span>iOiIyMDE<span class="number">5</span>LTExLTA<span class="number">2</span>In<span class="number">0</span>seyJjb<span class="number">2</span>RlIjoiR<span class="number">08</span>iLCJwYWlkVXBUbyI<span class="number">6</span>IjIwMTktMTEtMDYifSx<span class="number">7</span>ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOS<span class="number">0</span>xMS<span class="number">0</span>wNiJ<span class="number">9</span>LHsiY<span class="number">29</span>kZSI<span class="number">6</span>IkNMIiwicGFpZFVwVG<span class="number">8</span>iOiIyMDE<span class="number">5</span>LTExLTA<span class="number">2</span>In<span class="number">0</span>seyJjb<span class="number">2</span>RlIjoiUlMwIiwicGFpZFVwVG<span class="number">8</span>iOiIyMDE<span class="number">5</span>LTExLTA<span class="number">2</span>In<span class="number">0</span>seyJjb<span class="number">2</span>RlIjoiUkMiLCJwYWlkVXBUbyI<span class="number">6</span>IjIwMTktMTEtMDYifSx<span class="number">7</span>ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjAxOS<span class="number">0</span>xMS<span class="number">0</span>wNiJ<span class="number">9</span>LHsiY<span class="number">29</span>kZSI<span class="number">6</span>IlBDIiwicGFpZFVwVG<span class="number">8</span>iOiIyMDE<span class="number">5</span>LTExLTA<span class="number">2</span>In<span class="number">0</span>seyJjb<span class="number">2</span>RlIjoiUk<span class="number">0</span>iLCJwYWlkVXBUbyI<span class="number">6</span>IjIwMTktMTEtMDYifSx<span class="number">7</span>ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOS<span class="number">0</span>xMS<span class="number">0</span>wNiJ<span class="number">9</span>LHsiY<span class="number">29</span>kZSI<span class="number">6</span>IkRCIiwicGFpZFVwVG<span class="number">8</span>iOiIyMDE<span class="number">5</span>LTExLTA<span class="number">2</span>In<span class="number">0</span>seyJjb<span class="number">2</span>RlIjoiREMiLCJwYWlkVXBUbyI<span class="number">6</span>IjIwMTktMTEtMDYifSx<span class="number">7</span>ImNvZGUiOiJSU<span class="number">1</span>UiLCJwYWlkVXBUbyI<span class="number">6</span>IjIwMTktMTEtMDYifV<span class="number">0</span>sImhhc<span class="number">2</span>giOiIxMDgyODE<span class="number">0</span>Ni<span class="number">8</span>wIiwiZ<span class="number">3</span>JhY<span class="number">2</span>VQZXJpb<span class="number">2</span>REYXlzIjowLCJhdXRvUHJvbG<span class="number">9</span>uZ<span class="number">2</span>F<span class="number">0</span>ZWQiOmZhbHNlLCJpc<span class="number">0</span>F<span class="number">1</span>dG<span class="number">9</span>Qcm<span class="number">9</span>sb<span class="number">25</span>nYXRlZCI<span class="number">6</span>ZmFsc<span class="number">2</span>V<span class="number">9</span>-aKyalfjUfiV<span class="number">5</span>UXfhaMGgOqrMzTYy<span class="number">2</span>rnsmobL<span class="number">47</span>k<span class="number">8</span>tTpR/jvG<span class="number">6</span>HeL<span class="number">3</span>FxxleetI+W+Anw<span class="number">3</span>ZSe<span class="number">8</span>QAMsSxqVS<span class="number">4</span>podwlQgIe<span class="number">7</span>f+<span class="number">3</span>w<span class="number">7</span>zyAT<span class="number">1</span>j<span class="number">8</span>HMVlfl<span class="number">2</span>h<span class="number">96</span>KzygdGpDSbwTbwOkJ<span class="number">6</span>/<span class="number">5</span>TQOPgAP<span class="number">86</span>mkaSiM<span class="number">97</span>KgvkZV/<span class="number">2</span>nXQHRz<span class="number">1</span>yhm+MT+OsioTwxDhd/<span class="number">22</span>sSGq<span class="number">6</span>KuIztZ<span class="number">03</span>UvSciEmyrPdl<span class="number">2</span>ueJw<span class="number">1</span>WuT<span class="number">9</span>YmFjdtTm<span class="number">9</span>G<span class="number">7</span>LuXvCM<span class="number">6</span>eav+BgCRm+wwtUeDfoQqigbp<span class="number">0</span>t<span class="number">6</span>FQgkdQrcjoWvLSB<span class="number">0</span>IUgp/f<span class="number">4</span>qGf<span class="number">254</span>fA<span class="number">7</span>lXskT<span class="number">2</span>VCFdDvi<span class="number">0</span>jgxLyMVct<span class="number">1</span>cKnPdM<span class="number">6</span>fkHnbdSXKYDWw==-MIIElTCCAn<span class="number">2</span>gAwIBAgIBCTANBgkqhkiG<span class="number">9</span>w<span class="number">0</span>BAQsFADAYMRYwFAYDVQQDDA<span class="number">1</span>KZXRQcm<span class="number">9</span>maWxlIENBMB<span class="number">4</span>XDTE<span class="number">4</span>MTEwMTEyMjk<span class="number">0</span>NloXDTIwMTEwMjEyMjk<span class="number">0</span>NlowaDELMAkGA<span class="number">1</span>UEBhMCQ<span class="number">1</span>oxDjAMBgNVBAgMBU<span class="number">51</span>c<span class="number">2</span>xlMQ<span class="number">8</span>wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby<span class="number">4</span>xHTAbBgNVBAMMFHByb<span class="number">2</span>QzeS<span class="number">1</span>mcm<span class="number">9</span>tLTIwMTgxMTAxMIIBIjANBgkqhkiG<span class="number">9</span>w<span class="number">0</span>BAQEFAAOCAQ<span class="number">8</span>AMIIBCgKCAQEAxcQkq+zdxlR<span class="number">2</span>mmRYBPzGbUNdMN<span class="number">6</span>OaXiXzxIWtMEkrJMO/<span class="number">5</span>oUfQJbLLuMSMK<span class="number">0</span>QHFmaI<span class="number">37</span>WShyxZcfRCidwXjot<span class="number">4</span>zmNBKnlyHodDij/<span class="number">78</span>TmVqFl<span class="number">8</span>nOeD<span class="number">5</span>+<span class="number">07</span>B<span class="number">8</span>VEaIu<span class="number">7</span>c<span class="number">3</span>E<span class="number">1</span>N+e<span class="number">1</span>doC<span class="number">6</span>wht<span class="number">4</span>I<span class="number">4</span>+IEmtsPAdoaj<span class="number">5</span>WCQVQbrI<span class="number">8</span>KeT<span class="number">8</span>M<span class="number">9</span>VcBIWX<span class="number">7</span>fD<span class="number">0</span>fhexfg<span class="number">3</span>ZRt<span class="number">0</span>xqwMcXGNp<span class="number">3</span>DdJHiO<span class="number">0</span>rCdU+Itv<span class="number">7</span>EmtnSVq<span class="number">9</span>jBG<span class="number">1</span>usMSFvMowR<span class="number">25</span>mju<span class="number">2</span>JcPFp<span class="number">1</span>+I<span class="number">4</span>ZI+FqgR<span class="number">8</span>gyG<span class="number">8</span>oiNDyNEoAbsR<span class="number">3</span>lOpI<span class="number">7</span>grUYSvkB/xVy/VoklPCK<span class="number">2</span>h<span class="number">0</span>f<span class="number">0</span>GJxFjnye<span class="number">8</span>NT<span class="number">1</span>PAywoyl<span class="number">7</span>RmiAVRE/EKwIDAQABo<span class="number">4</span>GZMIGWMAkGA<span class="number">1</span>UdEwQCMAAwHQYDVR<span class="number">0</span>OBBYEFGEpG<span class="number">9</span>oZGcfLMGNBkY<span class="number">7</span>SgHiMGgTcMEgGA<span class="number">1</span>UdIwRBMD+AFKOetkhnQhI<span class="number">2</span>Qb<span class="number">1</span>t<span class="number">4</span>Lm<span class="number">0</span>oFKLl/GzoRykGjAYMRYwFAYDVQQDDA<span class="number">1</span>KZXRQcm<span class="number">9</span>maWxlIENBggkA<span class="number">0</span>myxg<span class="number">7</span>KDeeEwEwYDVR<span class="number">0</span>lBAwwCgYIKwYBBQUHAwEwCwYDVR<span class="number">0</span>PBAQDAgWgMA<span class="number">0</span>GCSqGSIb<span class="number">3</span>DQEBCwUAA<span class="number">4</span>ICAQAF<span class="number">8</span>uc+YJOHHwOFcPzmbjcxNDuGoOUIP+<span class="number">2</span>h<span class="number">1</span>R<span class="number">75</span>Lecswb<span class="number">7</span>ru<span class="number">2</span>LWWSUMtXVKQzChLNPn/<span class="number">72</span>W<span class="number">0</span>k+oI<span class="number">056</span>tgiwuG<span class="number">7</span>M<span class="number">49</span>LXp<span class="number">4</span>zQVlQnFmWU<span class="number">1</span>wwGvVhq<span class="number">5</span>R<span class="number">63</span>Rpjx<span class="number">1</span>zjGUhcXgayu<span class="number">7</span>+<span class="number">9</span>zMUW<span class="number">596</span>Lbomsg<span class="number">8</span>qVve<span class="number">6</span>euqsrFicYkIIuUu<span class="number">4</span>zYPndJwfe<span class="number">0</span>YkS<span class="number">5</span>nY<span class="number">72</span>SHnNdbPhEnN<span class="number">8</span>wcB<span class="number">2</span>Kz+OIG<span class="number">0</span>lih<span class="number">3</span>yz<span class="number">5</span>EqFhld<span class="number">03</span>bGp<span class="number">222</span>ZQCIghCTVL<span class="number">6</span>QBNadGsiN/lWLl<span class="number">4</span>JdR<span class="number">3</span>lJkZzlpFdiHijoVRdWeSWqM<span class="number">4</span>y<span class="number">0</span>t<span class="number">23</span>c<span class="number">92</span>HXKrgppoSV<span class="number">18</span>XMxrWVdoSM<span class="number">3</span>nuMHwxGhFyde<span class="number">05</span>OdDtLpCv+jlWf<span class="number">5</span>REAHHA<span class="number">201</span>pAU<span class="number">6</span>bJSZINyHDUTB+Beo<span class="number">28</span>rRXSwSh<span class="number">3</span>OUIvYwKNVeoBY+KwOJ<span class="number">7</span>WnuTCUq<span class="number">1</span>meE<span class="number">6</span>GkKc<span class="number">4</span>D/cXmgpOyW/<span class="number">1</span>SmBz<span class="number">3</span>XjVIi/zprZ<span class="number">0</span>zf<span class="number">3</span>qH<span class="number">5</span>mkphtg<span class="number">6</span>ksjKgKjmx<span class="number">1</span>cXfZAAX<span class="number">6</span>wcDBNaCL+Ortep<span class="number">1</span>Dh<span class="number">8</span>xDUbqbBVNBL<span class="number">4</span>jbiL<span class="number">3</span>i<span class="number">3</span>xsfNiyJgaZ<span class="number">5</span>sX<span class="number">7</span>i<span class="number">8</span>tmStEpLbPwvHcByuf<span class="number">59</span>qJhV/bZOl<span class="number">8</span>KqJBETCDJcY<span class="number">6</span>O<span class="number">2</span>aqhTUy+<span class="number">9</span>x<span class="number">93</span>ThKs<span class="number">1</span>GKrRPePrWPluud<span class="number">7</span>ttlgtRveit/pcBrnQcXOl<span class="number">1</span>rHq<span class="number">7</span>ByB<span class="number">8</span>CFAxNotRUYL<span class="number">9</span>IF<span class="number">5</span>n<span class="number">3</span>wJOgkPojMy<span class="number">6</span>jetQA<span class="number">5</span>Ogc<span class="number">8</span>Sm<span class="number">7</span>RG<span class="number">6</span>vg<span class="number">1</span>yow==</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><img src="https://img2018.cnblogs.com/blog/1749258/201909/1749258-20190929011952238-1098822669.png"></p><p>最后是设置PyChram的启动图标<br>使用文本编辑器新建一个名字为<code>PyChram.desktop</code>的文件内容为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Desktop Entry]</span></span><br><span class="line"><span class="attr">Name</span> = PyCharm</span><br><span class="line"><span class="attr">Type</span> = Application</span><br><span class="line"><span class="attr">Exec</span> = /opt/pycharm-<span class="number">2019.2</span>.<span class="number">3</span>/bin/pycharm.sh    <span class="comment">#pycharm.sh文件的绝对路径，一般就在软件安装目录bin文件夹下</span></span><br><span class="line"><span class="attr">Icon</span> = /opt/pycharm-<span class="number">2019.2</span>.<span class="number">3</span>/bin/pycharm.svg    <span class="comment">#图标图片文件路径</span></span><br><span class="line"><span class="attr">Terminal</span> = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>现将PyChram.desktop保存在桌面上，然后使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp PyChram.desktop <span class="regexp">/usr/</span>share/applications</span><br></pre></td></tr></table></figure><p>完成PyCharm的安装激活</p><h1 id="。。。"><a href="#。。。" class="headerlink" title="。。。"></a>。。。</h1>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pchram </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python在HDA中使用</title>
      <link href="2019/09/05/%E7%AD%86%E8%A8%98/python/Python%E5%9C%A8HDA%E4%B8%AD%E4%BD%BF%E7%94%A8/"/>
      <url>2019/09/05/%E7%AD%86%E8%A8%98/python/Python%E5%9C%A8HDA%E4%B8%AD%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Event-Handler"><a href="#Event-Handler" class="headerlink" title="Event Handler"></a>Event Handler</h1><p>在HDA中，要创建Python脚本，需要先选择一个事件处理器(EventHandle),他表示你要在什么时候执行你现在所创建的脚本命令</p><ul><li>On Created (在节点创建时，执行脚本)</li></ul><p>如选择此项编辑Python脚本，Python将会在节点创建时执行Python中的命令</p><ul><li>Python Model (Python模式)</li></ul><p>这一项会使创建的脚本在使用过程中根据用户设置执行</p><p>可以使用这一项给节点设置参数提示等功能</p><ul><li>On Delete(在节点创建时执行脚本)</li></ul><p><img src="https://img2018.cnblogs.com/blog/1749258/201909/1749258-20190905001141356-588229623.png"></p><h1 id="Python在Houdini节点上的常用方法"><a href="#Python在Houdini节点上的常用方法" class="headerlink" title="Python在Houdini节点上的常用方法"></a>Python在Houdini节点上的常用方法</h1><ul><li>Set Color 设置颜色</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node = kwargs[<span class="string">&#x27;node&#x27;</span>]　　<span class="comment">#获取当前节点</span></span><br><span class="line">context = hou.pwd()　　<span class="comment">#当前节点的父对象</span></span><br><span class="line">node.setColor(hou.Color((<span class="number">0.584</span>,<span class="number">0.776</span>,<span class="number">1</span>)))　　<span class="comment">#设置当前节点颜色</span></span><br></pre></td></tr></table></figure><ul><li> Node 创建节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    out = context.createNode(<span class="string">&#x27;null&#x27;</span>,<span class="string">&#x27;OUT_render&#x27;</span>)　　<span class="comment">#从当前节点的父对象创建节点</span></span><br><span class="line">    out.setInput(<span class="number">0</span>,node)　　<span class="comment">#设置out节点输入端为当前节点node</span></span><br><span class="line">    out.setColor(hou.Color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))　　<span class="comment">#设置out节点的颜色</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>Print and Button feedback 打印字符和按钮反馈</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CacheGeo</span>():</span>　　<span class="comment">#在OnCreate创建一些自定的方法，然后可以在节点参数中调用</span></span><br><span class="line">    this = hou.pwd()　　<span class="comment">#获取当前节点</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\nCaching......!&quot;</span>　　</span><br><span class="line">    filecache = hou.node(this.path() + <span class="string">&#x27;/cache_geo&#x27;</span>)　　<span class="comment">#获取设置当前节点内cache_geo的路径为filecache</span></span><br><span class="line">    filecache.parm(<span class="string">&#x27;execute&#x27;</span>).pressButton()　　<span class="comment">#获取filecache节点上execute的状态</span></span><br><span class="line">    this.setColor(hou.Color((<span class="number">0.584</span>,<span class="number">0.776</span>,<span class="number">1</span>)))　　<span class="comment">#设置节点颜色</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReloadGeo</span>():</span></span><br><span class="line">    this = hou.pwd()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\nLoaded successfully&quot;</span></span><br><span class="line">    filecache = hou.node(this.path() + <span class="string">&#x27;/report_geo&#x27;</span>)</span><br><span class="line">    filecache.parm(<span class="string">&#x27;reload&#x27;</span>).pressButton()</span><br><span class="line">    this.setColor(hou.Color((<span class="number">0.475</span>,<span class="number">0.812</span>,<span class="number">0.204</span>)))</span><br><span class="line"></span><br><span class="line">    output = hou.node(this.path() + <span class="string">&#x27;/output0&#x27;</span>)    <span class="comment">#设置当前节点内output0节点的路径为output</span></span><br><span class="line">    geo = output.geometry()    <span class="comment">#获取output的geometry并赋予到geo(要求出geometry才可以求这个节点上的geometry属性)</span></span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">len</span>(geo.points())    <span class="comment">#打印geo的点数</span></span><br></pre></td></tr></table></figure><blockquote><p>设置这两个按钮(cache_geo、report_geo)执行时调用不同的方法，执行不同的操作</p></blockquote><h1 id="参数调用PythonScripts"><a href="#参数调用PythonScripts" class="headerlink" title="参数调用PythonScripts"></a>参数调用PythonScripts</h1><p><img src="https://img2018.cnblogs.com/blog/1749258/201909/1749258-20190905002846358-1195152512.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hou.pwd().hdaModule().CacheGeo()</span><br></pre></td></tr></table></figure><p><a href="%5BCameraBack_FileIO%5D%5B1%5Dhttps://files.cnblogs.com/files/mlcg/Cameraback_fileIO.rar">Download CameraBack and FileIO HDA</a></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houdini流体水花I</title>
      <link href="2019/09/03/%E7%AD%86%E8%A8%98/houdini/HoudiniFlip/"/>
      <url>2019/09/03/%E7%AD%86%E8%A8%98/houdini/HoudiniFlip/</url>
      
        <content type="html"><![CDATA[<h2 id="Flip的大体结构"><a href="#Flip的大体结构" class="headerlink" title="Flip的大体结构"></a>Flip的大体结构</h2><p><img src="https://img-blog.csdnimg.cn/20190806010624110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="Flip"></p><h2 id="fliptank-initial"><a href="#fliptank-initial" class="headerlink" title="fliptank_initial"></a>fliptank_initial</h2><p><img src="https://img-blog.csdnimg.cn/2019080602274844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="fliptank_initial"></p><ul><li><strong>wavetank</strong><br>  用于设置水池的初始大小、位置、粒子间距以及其他一些动力学属性</li></ul><p><img src="https://img-blog.csdnimg.cn/20190805013243102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="Boundary Layer"></p><p><font color=red type='楷体' size=3 > <code>BoundaryLayer边界层：用于限制流体运动的边界，将位于边界的流体运动状态减弱，方便后期将流体嵌入到更大的流体系统中 ，又可称其为边界缓冲层</code></font></p><ul><li><strong>Narrow Band</strong> 这是一种流体结算的一种类型<br>  特点：只在流体的表面生成一层粒子用于flip结算，这样大大节省了流体模拟对计算机内存的消耗；但是这样只并不会减少对结算的时间。</li></ul><p><a href="https://v.youku.com/v_show/id_XMTU1NjUxNjU0MA==.html?spm=a1z3jc.11711052.0.0&isextonly=1">Narrow Band FLIP</a><br>视频介绍要使用这种方式创建并模拟Flip需要在创建<code>水箱(OceanSource)</code>时将Particle下的Narrow Band Particle启用(图一)，并且在<code>Dop</code>的Flip Object中(图二)设置Input Type为NarrowBand才可以</p><p><img src="https://img-blog.csdnimg.cn/20190806021810698.png" alt="图一，OceanSource的NarrowBand"></p><p><img src="https://img-blog.csdnimg.cn/2019080602185141.png" alt="图二，Dop中的NarrowBand"></p><h2 id="DopNetwork"><a href="#DopNetwork" class="headerlink" title="DopNetwork"></a>DopNetwork</h2><p><img src="https://img-blog.csdnimg.cn/20190806023632791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="DopNetwock"></p><ul><li><strong>flipsolver</strong><br>  Narrow Band 默认情况与flipObject关联，Bandwidth控制粒子层的厚度，Attribute-Field Pairs则可以将粒子上的属性转移到Field(场)中，避免属性的丢失；<br>  ParticleMotion-Reseeding 控制粒子再运动时的分布，在粒子分布较多的地方杀掉部分，在粒子稀疏的地方后新增一些以达到粒子在流体表面的平衡状态<br>  ParticleMotion-Vorticity 流体涡旋，在启用流体的涡旋时，能够增加流体模拟的真实度<br>  ParticleMotion-Rest<br>  VolumeMotion-VelosityTransfer这个就是表面粒子运动和底层网格之间相互传递速度属性(指定用于在每一帧结算之前将粒子的速度传递到底层网格，然后返回粒子的方法)。<a href="https://docs.newvfx.com/docs/8630.html">FlipSolverahHelp</a></li><li><strong>collisionsource</strong><br>  用于将polygons对象转为VDB碰撞对象，可以对碰撞网格精度VoxelSize调节，还可以设置碰撞速度的计算Geometry下的Velocity；<br>  通过设置碰撞对象的速度属性可以影响产生碰撞时所受碰撞的力度大小；<br>  <code>如果在collisionsource之前已经设置好了碰撞物体的速度，开启这里的Velocity时collisionsource会 重新根据物体的运动状态来计算速度属性覆盖原有的属性</code></li></ul><h1 id="Fluid-Mesh"><a href="#Fluid-Mesh" class="headerlink" title="Fluid Mesh"></a>Fluid Mesh</h1><p>在流体制作中，将流体粒子转换成mesh模型才可以给fluid赋予材质进行渲染；并且水的形态细节最终也是由这一步决定；</p><h2 id="particlefluid-mesh流程"><a href="#particlefluid-mesh流程" class="headerlink" title="particlefluid mesh流程"></a>particlefluid mesh流程</h2><p><img src="https://img-blog.csdnimg.cn/20190811152718922.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="图片来自网络"></p><blockquote><p>流体粒子转mesh，首先需要将particle转为vdb，然后对vdb进行膨胀操作，再将膨胀后的vdb进行smooth，最后对vdb进行收缩；(particle to mesh 的大概流程)</p></blockquote><p><code>在Houdini中使用</code><a href="http://127.0.0.1:48626/nodes/sop/particlefluidsurface">particlefluidsurface</a><code>节点来调节和实现particlefluid mesh的所有操作</code><br><img src="https://img-blog.csdnimg.cn/2019081115274963.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="图片来自网络"><br><img src="https://img-blog.csdnimg.cn/20190811152801946.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="图片来自网络"></p><blockquote><p>在实际制作particlefulid mesh时，会出现上图的情况，由于以上的操作默认是对整体粒子做相同操作且强度相同，这就导致粒子在高速飞溅的部分完全的smooth掉了，丢失掉水的细节；这是我们需要根据某种属性mask来控制mesh的范围强度，从而保留更多的模拟细节。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190811152830629.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="图片来自网络"></p><blockquote><p>最后通过优化polymesh拓扑节省mesh对内存的占用</p></blockquote><h2 id="fluid-mesh-实践技巧"><a href="#fluid-mesh-实践技巧" class="headerlink" title="fluid mesh 实践技巧"></a>fluid mesh 实践技巧</h2><p><img src="https://img-blog.csdnimg.cn/20190811165657149.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>复制两个particlefluidsurface节点，用作mesh调节的参考(如果对原始的粒子量做调整，每次计算需要耗费大量的时间，所以对particlefluidsurface做一定的裁切，调节出合适的mesh参数后再应用的原始的particlefluidsurface上就可以节省大量的时间，提升工作效率)</li></ul><p><img src="https://img-blog.csdnimg.cn/20190811171034712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>上图红色部分纠正’无线’应为’无限’</p></blockquote><ul><li>使用Regions的BoundingBox对水箱进行裁切，尽量保留既有运动剧烈的流体粒子，有保留相对运动平缓的粒子，这样在mesh时有个参考比较</li></ul><style>.font1{text-align:center;color:#D2691E}</style><div class="font1">初学Flip笔记，希望大家给点评论，指出错误和不足.</br></div><div class="font1"> **\\ ( >O< ) / ** </div>]]></content>
      
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> flip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houdini 粒子渲染拖尾 I</title>
      <link href="2019/09/01/%E7%AD%86%E8%A8%98/houdini/Houdini%E7%B2%92%E5%AD%90%E6%8B%96%E5%B0%BE%20%E2%85%A0/"/>
      <url>2019/09/01/%E7%AD%86%E8%A8%98/houdini/Houdini%E7%B2%92%E5%AD%90%E6%8B%96%E5%B0%BE%20%E2%85%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="实现路径运动"><a href="#实现路径运动" class="headerlink" title="实现路径运动"></a>实现路径运动</h1><h2 id="节点网络"><a href="#节点网络" class="headerlink" title="节点网络"></a>节点网络</h2><p><img src="https://img-blog.csdnimg.cn/20190831021017911.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h2><ul><li>创建一个不规则的发射源用于发射粒子，不规则的形状可以使粒子在发射开始时便获得一个随机的初始位置；</li><li>以粒子发射源位置为起点绘制创建一条曲线(曲线间点和点的位置均分布，不宜过于靠近，否则力会相互间影响)，计算线的切线向量，并转为速度场；</li><li>在粒子系统中使用popadvectbyvolume将速度场引入**(重点：advection type 平流类型使用Update velocity)**，Velocity Blend 速度混合为1，让引入的速度场完全影响粒子；</li><li>通过控制速度场来获得粒子在跟随路径运动过程中飘散出来的效果；</li><li><strong>（重点：粒子在结束模拟之前不允许有粒子死亡，也就是粒子的寿命需要给一个足够高的值来确保在结束模拟时没有粒子死亡）</strong></li></ul><h1 id="拖尾的渲染要点和设置"><a href="#拖尾的渲染要点和设置" class="headerlink" title="拖尾的渲染要点和设置"></a>拖尾的渲染要点和设置</h1><h2 id="要实现粒子在摄像机空间位移路径模糊的需要注意以下几点："><a href="#要实现粒子在摄像机空间位移路径模糊的需要注意以下几点：" class="headerlink" title="要实现粒子在摄像机空间位移路径模糊的需要注意以下几点："></a>要实现粒子在摄像机空间位移路径模糊的需要注意以下几点：</h2><ol><li><font color=red><strong>粒子不能是缓存在磁盘上的粒子，不需使用pop解算完成，暂时缓存在内存上的粒子</strong>；</font></li><li><font color=red><strong>需要创建一套粒子数量恒定不变的粒子系统来替换模拟好的动态</strong>；</font></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(i@id &#x3D; point(1,&quot;id&quot;,i@id))</span><br><span class="line">&#123;</span><br><span class="line">    v@P &#x3D; point(1,&quot;P&quot;,i@id);</span><br><span class="line">&#125;</span><br><span class="line">f@age &#x3D; point(1,&quot;age&quot;,i@id);</span><br><span class="line">f@life &#x3D; point(1,&quot;life&quot;,i@id);</span><br><span class="line">#根据id来匹配位置、生命&#x2F;寿命、年龄等需要的属性</span><br></pre></td></tr></table></figure><ol start="3"><li><font color=red><strong>在节点属性上<font color=blue>不要</font>启用几何体运动动属性</strong></font></li><li>提高渲染相机上的ShutterTime值</li><li>Mantra渲染器使用PBR渲染引擎，然后提高XformTimeSamples、GeoTimeSamples来得到模糊效果</li><li>在Mantra渲染器的Sampling里，需要将PixelSamples提高到20左右才可以得到较清晰的运动模糊</li></ol><h2 id="关于替换粒子"><a href="#关于替换粒子" class="headerlink" title="关于替换粒子"></a>关于替换粒子</h2><p>未来避免麻烦，我将教程中的步骤简化制作了一个HDA，方便日后制作时调用</p><p><img src="https://img-blog.csdnimg.cn/2019090112351688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b21pdA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vector rest &#x3D; point(2,&quot;P&quot;,0);</span><br><span class="line">int pt &#x3D; addpoint(0,rest);</span><br><span class="line">setpointattrib(0,&quot;id&quot;,pt,0,&quot;set&quot;);</span><br><span class="line">setpointattrib(0,&quot;rest&quot;,pt,rest,&quot;set&quot;);</span><br><span class="line"></span><br><span class="line">int off &#x3D; chi(&quot;on_off&quot;);</span><br><span class="line">int num &#x3D; detail(1,&quot;nextid&quot;,0);</span><br><span class="line">int ptnum &#x3D; num*off  + chi(&quot;point_constant&quot;)*off + num*(chf(&quot;point_multi&quot;)*(1-off));</span><br><span class="line">&#x2F;&#x2F;printf(&quot;%d\n&quot;,ptnum);</span><br><span class="line">&#x2F;&#x2F;setpointattrib(0,&quot;ptnum&quot;,pt,ptnum,&quot;set&quot;);</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; ptnum-1; ++i)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;* code *&#x2F;</span><br><span class="line">int a &#x3D; addpoint(0,rest);</span><br><span class="line">setpointattrib(0,&quot;id&quot;,a,i+1,&quot;set&quot;);</span><br><span class="line">setpointattrib(0,&quot;rest&quot;,a,rest,&quot;set&quot;);</span><br><span class="line">&#125;</span><br><span class="line">#创建恒定粒子数的粒子系统</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if(i@id &#x3D; point(1,&quot;id&quot;,i@ptnum))</span><br><span class="line">&#123;</span><br><span class="line">    v@P &#x3D; point(1,&quot;P&quot;,i@id);</span><br><span class="line">&#125;</span><br><span class="line">f@age &#x3D; point(1,&quot;age&quot;,i@id);</span><br><span class="line">f@life &#x3D; point(1,&quot;life&quot;,i@id);</span><br><span class="line"></span><br><span class="line">if(@P &#x3D;&#x3D; @rest)</span><br><span class="line">&#123;</span><br><span class="line">   f@Alpha &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">#根据id传递需要保留的粒子属性</span><br></pre></td></tr></table></figure><h2 id="关于粒子死亡"><a href="#关于粒子死亡" class="headerlink" title="关于粒子死亡"></a>关于粒子死亡</h2><p>因为粒子的整个过程需要保持粒子量的恒定不变，所以粒子会一直存在，需要通过控制粒子的Alpha的使粒子消失这就使用到age和life这两个属性了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f@Alpha &#x3D; 1.0;</span><br><span class="line"></span><br><span class="line">f@pscale &#x3D; fit01(rand(@id),chf(&quot;min&quot;),chf(&quot;max&quot;));</span><br><span class="line"></span><br><span class="line">v@Cd &#x3D; chramp(&quot;Cd&quot;,@age&#x2F;(@life+rand(@id)*5));</span><br><span class="line"></span><br><span class="line">f@Alpha &#x3D; chramp(&quot;Alpha&quot;,@age&#x2F;@life);</span><br><span class="line">#设置Alpha粒子的透明</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这种方式可以快速得到很棒的粒子曲线模糊的效果，但是也存在很大局限性；比如我感觉最麻烦的就是不能读取磁盘粒子来实现，这在模拟大量粒子时就需要机器拥有足够的内存来存储这些粒子，否则无法实现；如果需要对存盘粒子进行缓存建议阅读<a href="https://www.dxxnvfx.com/article-14938.html">大象小牛</a>的相关文章，他有讲到这种方式的实现；总之第一种方式出来的效果更加完美，第二种则更加实用；<br><font color=red> 以上均为个人学习理解的观点笔记，仅供参考；不足之处还望评论指出！！</font></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> trail </tag>
            
            <tag> particle </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
